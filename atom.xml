<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秦家大胖&#39;s Blog</title>
  
  <subtitle>生活朗朗,万物可爱</subtitle>
  <link href="https://100qin10086.github.io/atom.xml" rel="self"/>
  
  <link href="https://100qin10086.github.io/"/>
  <updated>2024-04-02T07:07:50.344Z</updated>
  <id>https://100qin10086.github.io/</id>
  
  <author>
    <name>秦三顺</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMVC复习</title>
    <link href="https://100qin10086.github.io/posts/a4c26199.html"/>
    <id>https://100qin10086.github.io/posts/a4c26199.html</id>
    <published>2024-03-29T00:29:05.000Z</published>
    <updated>2024-04-02T07:07:50.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>SpringMVC-基本介绍 </p></div></h1><h2 id="SpringMVC-特点-amp-概述"><a href="#SpringMVC-特点-amp-概述" class="headerlink" title="SpringMVC 特点&amp;概述"></a>SpringMVC 特点&amp;概述</h2><p>1.SpringMVC 是 WEB 层框架【老韩解读:SpringMVC接管了Web层组件,比如控制器,视图,视图解析, 返回给用户的数据格式,<br>同时支持 MVC 的开发模式/开发架构。<br>2.SpringMVC 通过注解，让 POJO 成为控制器，不需要继承类或者实现接口<br>3.SpringMVC 采用低耦合的组件设计方式，具有更好扩展和灵活性。<br>4.支持 REST 格式的 URL 请求<br>5.Spring MVC 只是 Spring 处理 WEB 层请求的一个模块/组件, Spring MVC 的基石是Servlet[Java WEB]。<br>6.Spring Boot 是为了简化开发者的使用, 推出的封神框架(约定优于配置，简化了 Spring的配置流程), SpringBoot<br>包含很多组件/框架，Spring就是最核心的内容之一，也包含 SpringMVC。<br>7.他们的关系大概是: Spring Boot &gt; Spring &gt; Spring MVC</p><h3 id="SpringMVC登录流程分析"><a href="#SpringMVC登录流程分析" class="headerlink" title="SpringMVC登录流程分析"></a>SpringMVC登录流程分析</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/53e2f22491771143335f4cec92d8cbeb.png"></div></div><p>·基本流程<br>1.创建src/application-mvc.xml文件(就是spring的容器文件),文件名自己定<br>2.WEB-INF/web.xml配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--1.中央控制器2.负责处理所有的应用请求--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlets</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- springmvc 的配置文件和以前 spring 的配置文件类似 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 在 web 项目启动时，就加载这个 servlet 实例 1 表示加载的顺序号--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 为了支持 rest 风格的 url 这里的 url-patther 需要写成 / --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlets</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/3a91be113516534d29d133158909c565.png"></div></div><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>·@RequestMapping注解可以指定控制器/处理器得某个方法得请求得url。<br>·@RequestMapping可以修饰类和方法,当同时修饰类和方法时,请求得url就是组合/类请求值/方法请求值<br>·@RequestMapping还可以指定请求得方式(post/get/put/delete),请求得方式需要和指定得一样,否则报错<br>·SpringMVC控制器默认支持GET和POST两种方式,也就是你不指定method,可以接收GET和POST请求<br>·当明确指定了 method , 则需要按指定方式请求, 否则会报错</p><h3 id="RequestMapping-可指定-params-和-headers-支持简单表达式"><a href="#RequestMapping-可指定-params-和-headers-支持简单表达式" class="headerlink" title="@RequestMapping 可指定 params 和 headers 支持简单表达式"></a>@RequestMapping 可指定 params 和 headers 支持简单表达式</h3><p>·param1:表示请求必须包含名为param1得请求参数<br>·!=param1: 表示请求不能包含名为 param1 的请求参数<br>·param1 != value1: 表示请求包含名为 param1 的请求参数，但其值不能为 value1</p><h4 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/find"</span><span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token string">"bookId"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> bookId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询书籍 bookId= "</span> <span class="token operator">+</span> bookId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RequestMapping支持Ant分格资源地址"><a href="#RequestMapping支持Ant分格资源地址" class="headerlink" title="@RequestMapping支持Ant分格资源地址"></a>@RequestMapping支持Ant分格资源地址</h3><p>· ?:匹配文件名中得一个字符<br>· <em>:匹配文件名中得任意字符<br>· *</em>:匹配多层路径</p><h3 id="RequestMapping-可配合-PathVariable-映射-URL-绑定得占位符"><a href="#RequestMapping-可配合-PathVariable-映射-URL-绑定得占位符" class="headerlink" title="@RequestMapping 可配合 @PathVariable 映射 URL 绑定得占位符"></a>@RequestMapping 可配合 @PathVariable 映射 URL 绑定得占位符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/reg/&#123;username&#125;/&#123;userid&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"userid"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的参数--"</span><span class="token operator">+</span><span class="token string">"username= "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span><span class="token string">"userid= "</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Rest-优雅得url请求分格"><a href="#Rest-优雅得url请求分格" class="headerlink" title="Rest-优雅得url请求分格"></a>Rest-优雅得url请求分格</h2><p>·Rest:(资源)表现层状态转化。是目前流行的请求方式。它结构清晰, 很多网站采用<br>·传统的 url 是通过参数来说明 crud 的类型，rest 是通过 get/post/put/delete 来说明 crud 的类型<br>·当前得浏览器只支持post/get请求,因此为了得到put/delete得请求方式需要使用Spring提供得HiddenHttpMethodFilter过滤器进行转换<br>·HiddenHttpMethodFilter:浏览器form表单只支持GET与POST请求,而DELETE,PUT等method并不支持,Spring添加了一个过滤器,<br>可以将这些请求转换为标准的http方法<br>·这个过滤器需要在web.xml中配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filters</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>hiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>hiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filters</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·在spring得配置xml中添加两个常规配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mvcs</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 能支持 SpringMVC 高级功能，比如 JSR303 校验，映射动态请求 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 将 SpringMVC 不能处理的请求交给 Tomcat, 比如请求 css,js 等--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mvcs</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1.HiddenHttpMethodFilter,在将post转成delete/put请求时,是按_method参数名来读取得</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="SpringMVC映射请求数据"><a href="#SpringMVC映射请求数据" class="headerlink" title="SpringMVC映射请求数据"></a>SpringMVC映射请求数据</h2><h3 id="获取参数值"><a href="#获取参数值" class="headerlink" title="获取参数值"></a>获取参数值</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/vote1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到的username= "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·解读:<br>1.@RequestParam表示说明一个接受到得参数<br>2.value=name:接收得参数名是name<br>3.required=false:表示该参数可以有,也可以没有</p><h3 id="获取http请求消息头"><a href="#获取http请求消息头" class="headerlink" title="获取http请求消息头"></a>获取http请求消息头</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/vote2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"Accept-Encoding"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> ae<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"Host"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> host<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的 Accept-Encoding="</span> <span class="token operator">+</span> ae<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Host="</span> <span class="token operator">+</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回一个结果</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取-javabean-形式的数据"><a href="#获取-javabean-形式的数据" class="headerlink" title="获取 javabean 形式的数据"></a>获取 javabean 形式的数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/vote3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token class-name">Master</span> master<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vote/vote03<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    主人号:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    主人名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    宠物号:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pet.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    宠物名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pet.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加主人和宠物<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解读:这里得字段名称和对象得属性名保持一致,级联添加属性也是一样保持名字对应关系</p><h3 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><p>1.支持级联数据获取<br>2.表单得控件名称name需要和javabean对象字段对应</p><h2 id="获取servlet-api"><a href="#获取servlet-api" class="headerlink" title="获取servlet api"></a>获取servlet api</h2><p>1.开发中,我们可能需要用到原生得servlet api</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/vote4"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> pwd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">HttpSession</span> session1 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//注意：通过参数传入的session和通过原生方式得到的session1是同一个对象</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//返回结果</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型数据"><a href="#模型数据" class="headerlink" title="模型数据"></a>模型数据</h2><h3 id="模型数据处理-数据放入request"><a href="#模型数据处理-数据放入request" class="headerlink" title="模型数据处理-数据放入request"></a>模型数据处理-数据放入request</h3><p>1.使用request放入域中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.通过请求得方法参数Map<String,Object>放入request域</String,Object></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/vote06"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token class-name">Master</span> master<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//解读</span>       <span class="token comment">//1.需求是通过map对象，添加属性到request中</span>       <span class="token comment">//2.原理分析，将master放入到request域中，然后遍历map，发现map中有数据，然后放入到request</span>       map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token string">"LZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token string">"vote_ok"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.通过返回ModelAndView对象实现request域数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/vote07"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token class-name">Master</span> master<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//放入属性到ModelAndView对象</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token string">"LZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将Master放入到request域中，会对ModelAndView进行扫描，ModelAndView中有数据，就添加到request域中</span>        <span class="token comment">//这里指定跳转的属兔名称</span>        modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"vote_ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回结果</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用注意事项-1"><a href="#使用注意事项-1" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><p>1.从本质看请求响应得方法return “xx”,是返回了一个字符串,其实本质是返回了一个ModelAndView对象,只是默认被封装起来了<br>2.ModelAndView即可以包含model数据,也可以包含视图信息<br>3.ModelAndView对象得addObject方法可以添加key-val数据,默认在request域中<br>4.ModelAndView对象得setView方法可以指定视图名称</p><h2 id="ModelAttribute实现prepare方法"><a href="#ModelAttribute实现prepare方法" class="headerlink" title="@ModelAttribute实现prepare方法"></a>@ModelAttribute实现prepare方法</h2><p>·基本说明<br>1.在开发中,有时需要使用某个前置方法,给目标方法准备一个模型对象<br>2.@ModelAttribute注解可以实现这样得需求<br>3.在某个handler得方法上增加了@ModelAttribute注解后,那么在调用该Handler得任何一个方法时,都会先调用这个方法</p><h2 id="视图和视图解析器"><a href="#视图和视图解析器" class="headerlink" title="视图和视图解析器"></a>视图和视图解析器</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>1.在springMVC中得目标方法最终返回都是一个视图(有各种视图)<br>2.返回得视图都会由一个视图解析器来处理</p><h3 id="自定义视图"><a href="#自定义视图" class="headerlink" title="自定义视图"></a>自定义视图</h3><p>1.在默认情况下,我们否是返回默认得视图,然后这个返回得视图交由SpringMVC得InternalResourceViewResolver来处理,这个在配置得xml<br>2.配置springDispatcherServlet-servlet.xml,增加自定义视图解析器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.BeanNameViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>99<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>·解读:<br>1.上面得配置是一个可以解析自定义得视图得解析器<br>2.name=”order”表示给这个解析器设置优先级,默认优先级很低,值为Integer.MAX_VALUE</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>·@Component表示该视图会被加载到容器,id为myView</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"qgqView"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyView</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractView</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">renderMergedOutputModel</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> model<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 完成视图渲染</span>        <span class="token comment">// 并且可以确定我们要跳转的页面[请求转发] /WEB-INF/pages/my_view.jsp</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入到自己的视图。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.下面的就是进行请求转发到/WEB-INF/pages/my_view.jsp</span>        <span class="token comment">//2./WEB-INF/pages/my_view.jsp会被springmvc解析成/springmvc//WEB-INF/pages/my_view.jsp</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/pages/my_view.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/buy"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----buy()-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"qgqView"</span><span class="token punctuation">;</span><span class="token comment">// 视图名要和自定义视图名的value保持一致</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义视图工作流程小结"><a href="#自定义视图工作流程小结" class="headerlink" title="自定义视图工作流程小结"></a>自定义视图工作流程小结</h3><p>·自定义视图:创建一个View得bean,该bean需要继承自AbstractView,并实现renderMergedOutputModel方法<br>·并把自定义 View 加入到 IOC 容器中,这个通过注解实现@Component(value=”xxx”),这个返回得视图要和自定义视图名得value保持一致<br>·我得理解,自定义视图其实是针对于某一个视图类得请求转发<br>·自定义视图得视图处理器,使用BeanNameViewResolver,这个视图处理器也需要配置到ioc容器<br>·实现了AbstractView相当于一个自定义视图类,自定义视图类需要通过自定义视图解析器取调用<br>·BeanNameViewResolver 的调用优先级需要设置一下，设置 order 比 Integer.MAX_VAL小的值.<br>以确保其在 InternalResourceViewResolver 之前被调用</p><h3 id="自定义视图的工作流程"><a href="#自定义视图的工作流程" class="headerlink" title="自定义视图的工作流程"></a>自定义视图的工作流程</h3><p>1.SpringMVC调用目标方法,返回自定义View在ioc容器中的id<br>2.SpringMVC调用BeanNameViewResolver解析视图:从ioc容器中获取返回id值对应的bean,即自定义的View的对象<br>3.SpringMVC 调用自定义视图的 renderMergedOutputModel 方法渲染视图<br>4.如果在 SpringMVC 调用目标方法, 返回自定义 View 在 IOC 容器中的 id,不存在， 则仍然按照默认的视图处理器机制处理</p><h3 id="目标方法直接指定转发或重定向"><a href="#目标方法直接指定转发或重定向" class="headerlink" title="目标方法直接指定转发或重定向"></a>目标方法直接指定转发或重定向</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/order"</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======order()====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里直接指定 转发到哪个页面</span><span class="token comment">//return "forward:/WEB-INF/pages/my_view.jsp";</span><span class="token comment">//重定向, 如果是重定向，就不能重定向到 /WEB-INF 目录中</span><span class="token keyword">return</span> <span class="token string">"redirect:/login.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h2><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><p>1.在我们提交数据(比如表单时)SpringMVC怎样对提交的数据进行转换和处理的<br>·基本数据类型可以和字符串之间自动完成转换<br>·日期和货币的两个注解 @DateTimeFormat @NumberFormat</p><h2 id="验证及国际化"><a href="#验证及国际化" class="headerlink" title="验证及国际化"></a>验证及国际化</h2><p>·对输入的数据(比如表单数据),进行必要的验证,并给出相应的提示信息<br>·对于验证表单数据,springMVC提供了很多实用的注解,这些注解由JSR 303验证框架提供<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/53b4a19a3b418e775d541af129e984e0.png"></div></div><br>·还有以下注解<br>@Email : 被注释的元素必须时电子邮箱地址<br>@Length : 被注释的字符串的大小必须在指定的范围内<br>@NotEmpty  : 必须为空<br>@Range  : 必须在合适的范围内</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Monster</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"年龄必须填写1-100[自定义]"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>max <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"名字不能为空[自定义]"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"生日不能为空[自定义]"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyy-MM-dd"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"薪水不能为空[自定义]"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NumberFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"##,###.##"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">Monster</span> monster<span class="token punctuation">,</span><span class="token class-name">Errors</span> errors<span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----monster-----"</span><span class="token operator">+</span>monster<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===== map ======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key= "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" value="</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===== errors ======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断是否有错误</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObjectError</span><span class="token punctuation">></span></span> allErrors <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ObjectError</span> error <span class="token operator">:</span> allErrors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"error="</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//返回添加页面</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token string">"datavalid/monster_addUI"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"datavalid/success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·解析<br>1.@Valid Monster monster表示对Monster接收的数据进行校验<br>2.Errors errors表示如果校验出现错误,将校验的错误信息保存errors<br>3.Map map表示如果出现错误,将校验的错误信息保存到map,同时保存monster对象<br>·运行结果:更能说明map保存错误信息和对象</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">key=monster value=Monster&#123;id=null, email='jack@sohu.com', age=900, name='',birthday=Thu Nov 11 00:00:00 CST 1999, salary=11.11&#125;key=org.springframework.validation.BindingResult.monstervalue=org.springframework.validation.BeanPropertyBindingResult: 2 errorsField error in object 'monster' on field 'age': rejected value [900]; codes[Range.monster.age,Range.age,Range.java.lang.Integer,Range]; arguments[org.springframework.context.support.DefaultMessageSourceResolvable: codes[monster.age,age]; arguments []; default message [age],100,1]; default message[需要在 1 和 100 之间]Field error in object 'monster' on field 'name': rejected value []; codes[NotEmpty.monster.name,NotEmpty.name,NotEmpty.java.lang.String,NotEmpty];arguments[org.springframework.context.support.DefaultMessageSourceResolvable: codes[monster.name,name]; arguments []; default message [name]]; default message[不能为空]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/72550a7d83a945929dbc442dfff47cf0.png"></div></div><p>·如果按照原来的错误信息输出到前端,页面很难看,所以就引出了国际化错误信息<br>1.首先配置国际化错误信息的资源处理bean,在配置xml中</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>messageSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>        <span class="token punctuation">"</span>org.springframework.context.support.ResourceBundleMessageSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 配置国际化文件名字    如果你这样配的话，表示 messageSource 回到 src/i18nXXX.properties 去读取错误    信息    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i18n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.创建国际化文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">NotEmpty.monster.name</span><span class="token punctuation">=</span><span class="token value attr-value">用户名不能为空</span><span class="token comment">#类型不匹配是1-150</span><span class="token comment">#范围不匹配是1-100</span><span class="token key attr-name">typeMismatch.monster.age</span><span class="token punctuation">=</span><span class="token value attr-value">年龄要求在1-150之间</span><span class="token key attr-name">typeMismatch.monster.birthday</span><span class="token punctuation">=</span><span class="token value attr-value">生日格式不正确，</span><span class="token key attr-name">typeMismatch.monster.salary</span><span class="token punctuation">=</span><span class="token value attr-value">薪水格式不正确</span><span class="token key attr-name">Range.monster.age</span><span class="token punctuation">=</span><span class="token value attr-value">年龄必须在1-100之间[自定义]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.最后回显错误</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">form:</span>errors</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">form:</span>errors</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">form:</span>errors</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h3><p>1.在需要验证的Javabean/POJO的字段上加上相应的验证注解<br>2.目标方法上,在JavaBean/POJO类型的参数前,添加@Valid注解,告知SpringMVC该bean是需要验证的<br>3.在@Valid注解之后,添加一个Errors或BindingResult类型的参数,可以获取到验证的错误信息<br>4.需要使用<form:errors path="email">&lt;/form:errors&gt;标签来显示错误信息,这个标签,需要写在<form:form>标签内生效<br>5.错误消息的国际化文件 i18n.properties,中文是需要Unicode编码</form:form></form:errors></p><h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><p>·说明:<br>当表单提交数为中文时,会出现乱码</p><h3 id="两种解决方案"><a href="#两种解决方案" class="headerlink" title="两种解决方案"></a>两种解决方案</h3><p>1.使用原生的javaWeb解决方案:写一个过滤器,并将其配置在web.xml最前面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCharacterFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这里加入对中文编码的处理</span>        servletRequest<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方形请求</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.使用Spring提供的过滤器处理中文<br>·直接去web.xml配置即可不用写Java过滤器【复习一下,Rest分格的请求也需要在web.xml中配置过滤器hiddenHttpMethodFilter】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>filter<span class="token punctuation">></span></span>       <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span><span class="token class-name">CharacterEncodingFilter</span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>       <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span>CharacterEncodingFilter</span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>       <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>           <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>encoding<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>           <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>   <span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>       <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span><span class="token class-name">CharacterEncodingFilter</span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>       <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token comment">/*&lt;/url-pattern>   &lt;/filter-mapping></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理json和HttpMessageConverter"><a href="#处理json和HttpMessageConverter" class="headerlink" title="处理json和HttpMessageConverter"></a>处理json和HttpMessageConverter<T></T></h2><p>·在项目开发中,我们往往需要服务器返回的数据格式是按照json来返回的<br>·指定返回的数据格式json,靠这个@ResponseBody<br>·使用SpringMVC的@RequestBody将客户端提交的json数据,封装成javaBean对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/save2"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">save2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//将前台传过来的数据 以 json 的格式相应回浏览器</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user~= "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user <span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·@ResponseBody可以直接写在controller上,这样对所有方法生效<br>·可以将@ResponseBody+@Controller直接写成</p><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>·在SpringMVC,通过返回ResponseEntity<T>的类型,可以实现文件下载的功能<br>·也就是只需要将ResponseEntity对象返回即可,ResponseEntity的三个属性<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">T</span> body<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> headers<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>·实例<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/downFile"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">downFile</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//1.先获取到下载文件的inputStream流</span>       <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/img/2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//2.开辟一个存放文件的byte数组，这里使用byte[]是可以支持二进制数据（图片。视频），大小和要读取的文件一样大</span>       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>resourceAsStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">//3.将要下载的数据读入到byte[]</span>       resourceAsStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//public ResponseEntity(@Nullable T body, @Nullable MultiValueMap&lt;String, String> headers, HttpStatus status) &#123;</span>       <span class="token comment">// this(body, headers, (Object) status);</span>       <span class="token comment">// &#125;</span>       <span class="token comment">//4.构建返回的HttpStatus</span>       <span class="token class-name">HttpStatus</span> ok <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">;</span>       <span class="token comment">//5.创建headers</span>       <span class="token class-name">HttpHeaders</span> httpHeaders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//指定返回的数据，客户端应当</span>       httpHeaders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename=2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//构建一个ResponseEntity 1. 读取文件并放入到一个字节数组2.http响应头的headers 3.http响应状态</span>       <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> responseEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> httpHeaders<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> responseEntity<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>·解析<br>1.content-type 指示响应内容的格式<br>2.content-disposition 指示如何处理响应内容。<br>一般有两种方式：<br>·inline：直接在页面显示<br>·attchment：以附件形式下载</T></p><h2 id="SpringMVC文件上传"><a href="#SpringMVC文件上传" class="headerlink" title="SpringMVC文件上传"></a>SpringMVC文件上传</h2><p>1.SpringMVC为文件上传提供了直接的支持,这种支持是通过即插即用的MultipartResolver实现的Spring用<br>Jakarta Commons FileUpload 技 术 实 现 了 一 个MultipartResolver 实现类：CommonsMultipartResovler<br>2.SpringMVC上下文中默认没有装配MultipartResovler,因此默认情况下不能处理文件的上传工作,如果想使用Spring的文件上传<br>功能,需在上下文中配置MultipartResolver。<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span> id<span class="token operator">=</span><span class="token string">"multipartResolver"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="文件上传演示"><a href="#文件上传演示" class="headerlink" title="文件上传演示"></a>文件上传演示</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileUpload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    文件介绍:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>introduce<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    选择文件:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>上传文件<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUploadHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//编写方法，处理文件上传的请求</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/fileUpload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">fileUpload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span><span class="token class-name">String</span> introduce <span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//接收到提交的文件名</span>        <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你上传的文件名是"</span><span class="token operator">+</span>originalFilename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件的介绍"</span><span class="token operator">+</span>introduce<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到要把上传文件保存到那个路径</span>        <span class="token class-name">String</span> fileFullPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/img/"</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建文件</span>        <span class="token class-name">File</span> saveToFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将上传的文件，转存到saveToFile</span>        file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>saveToFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·关键地方:将上传的MultipartFile.transferTo到要保存的地址中</p><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><h3 id="什么是拦截器"><a href="#什么是拦截器" class="headerlink" title="什么是拦截器"></a>什么是拦截器</h3><p>·Spring MVC 也可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器来实现特定的功能.<br>·自定义的拦截器必须实现 HandlerInterceptor 接口<br>·自定义拦截器的三个方法<br>1.preHandle()：这个方法在业务处理器处理请求之前被调用，在该方法中对用户请求request 进行处理。<br>2.postHandle()：这个方法在目标方法处理完请求后执行<br>3.afterCompletion()：这个方法在完全处理完请求后被调用，可以在该方法中进行一些资源清理的操作</p><h3 id="自定义拦截器执行流程分析图"><a href="#自定义拦截器执行流程分析图" class="headerlink" title="自定义拦截器执行流程分析图"></a>自定义拦截器执行流程分析图</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/55ad232c87405828af5a922eee19c2bb.png"></div></div><h3 id="自定义拦截器流程说明"><a href="#自定义拦截器流程说明" class="headerlink" title="自定义拦截器流程说明"></a>自定义拦截器流程说明</h3><p>·如果 preHandle 方法 返回 false, 则不再执行目标方法, 可以在此指定返回页面<br>·postHandle 在目标方法被执行后执行. 可以在方法中访问到目标方法返回的ModelAndView 对象<br>·若 preHandle 返回 true, 则 afterCompletion 方法 在渲染视图之后<br>·若 preHandle 返回 false, 则 afterCompletion 方法不会被调用<br>·在配置拦截器时，可以指定该拦截器对哪些请求生效，哪些请求不生效</p><h3 id="如何配置自定义拦截器"><a href="#如何配置自定义拦截器" class="headerlink" title="如何配置自定义拦截器"></a>如何配置自定义拦截器</h3><p>·在配置.xml里面配置<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--       1.第一种配置方式                  2.使用ref应用到对应的myInterceptor01                  3.这种方式会拦截所有的目标方法       --></span>       <span class="token comment">&lt;!--        &lt;ref bean="myInterceptor01">&lt;/ref>--></span>       <span class="token comment">&lt;!--       1.第二种方式配置拦截器       --></span>       <span class="token comment">&lt;!--        &lt;mvc:interceptor>--></span>       <span class="token comment">&lt;!--            &lt;mvc:mapping path="/hi">&lt;/mvc:mapping>--></span>       <span class="token comment">&lt;!--            &lt;ref bean="myInterceptor01">&lt;/ref>--></span>       <span class="token comment">&lt;!--        &lt;/mvc:interceptor>--></span>       <span class="token comment">&lt;!--       1.第三种方式配置拦截器[通配符]        --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/h*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myInterceptor01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="多个拦截器"><a href="#多个拦截器" class="headerlink" title="多个拦截器"></a>多个拦截器</h3><p>·如果第 1 个拦截器的 preHandle() 返回 false , 后面都不在执<br>·如果第2个拦截器的preHandle()返回false,就直接执行第一个拦截器的afterCompletion()方法, 如果拦截器更多，规则类似</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>·局部异常<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 解读     * 1.localException 方法处理局部异常     * 2.这里处理ArithmeticException.class, NullPointerException.class     * 3.Exception ex:生成的异常对象，会传递给ex，通过ex可以得到相关的信息     *   ，这里可以加入自己的业务逻辑     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">localException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部异常信息是~"</span><span class="token operator">+</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"reason"</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"exception_mes"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 解读     * 1.编写方法，模拟异常，算术异常     * 2.如果我们不做异常处理，是由tomcat默认显示     * @param num     * @return     */</span>    <span class="token comment">//编写方法，模拟异常</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testException01"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">9</span><span class="token operator">/</span>num<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testGlobalException"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//1.这里我们模拟了一个异常NumberFormatException</span>        <span class="token comment">//2.该异常没有在局部异常处理，按照异常处理机制，就会交给全局异常处理类处理</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testException02"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AgeException</span><span class="token punctuation">(</span><span class="token string">"年龄必须在1-120之间~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testException03"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ints<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testException04"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string">"aksn"</span><span class="token punctuation">;</span>        <span class="token comment">//这里会抛出StringIndexOutOfBoundsException</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>·全局异常<br>内部若找不到@ExceptionHandler 注解的话，会找 @ControllerAdvice 类的@ExceptionHandler 注解方法,<br>这样就相当于一个全局异常处理器<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 如果在垒上标注了@ControllerAdvice，就是一个全局异常处理类 */</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGlobalException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 解读     * 1.全局异常就不管是那个Handler抛出的异常，都可以捕获，@ExceptionHandler(&#123;异常类型&#125;)     * 22.这里处理的全局异常是NumberFormatException.class,ClassCastException.class     * 3.Exception ex 接收抛出的异常对象     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ClassCastException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">AgeException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">globalException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局异常处理"</span><span class="token operator">+</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"reason"</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"exception_mes"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>·自定义异常<br>通过@ResponseStatus 注解, 可以自定义异常的说明<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//reason = "年龄需要在1-120之间"这个信息是给tomcat显示的</span><span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>reason <span class="token operator">=</span> <span class="token string">"年龄需要在1-120之间"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgeException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">AgeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AgeException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testException02"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AgeException</span><span class="token punctuation">(</span><span class="token string">"年龄必须在1-120之间~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>·统一异常<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exceptionMappings<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ArrayIndexOutOfBoundsException<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>arrEx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.Exception<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>arrEx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>·对未知异常进行统一处理，使用 SimpleMappingExceptionResolver</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;SpringMVC-基本介绍 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;SpringMVC-特点</summary>
      
    
    
    
    <category term="主流框架" scheme="https://100qin10086.github.io/categories/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="框架" scheme="https://100qin10086.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Java" scheme="https://100qin10086.github.io/tags/Java/"/>
    
    <category term="SpringMVC" scheme="https://100qin10086.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring复习</title>
    <link href="https://100qin10086.github.io/posts/d639ad3c.html"/>
    <id>https://100qin10086.github.io/posts/d639ad3c.html</id>
    <published>2024-03-24T09:47:42.000Z</published>
    <updated>2024-04-02T07:07:50.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>Spring(轻量级容器框架)复习 </p></div></h1><h2 id="Spring学习的核心内容"><a href="#Spring学习的核心内容" class="headerlink" title="Spring学习的核心内容"></a>Spring学习的核心内容</h2><p>·IOC(控制反转) spring通过ioc技术管理各种对象<br>·AOP(切面变成) spring支持切面编程,方式有基于注解,基于xml配置<br>·JdbcTemplate spring提供的访问数据库的技术<br>·声明式事务 基于ioc/aop实现事务管理</p><h2 id="ioc的开发模式"><a href="#ioc的开发模式" class="headerlink" title="ioc的开发模式"></a>ioc的开发模式</h2><p>程序&lt;—-容器 容器创建好对象,程序直接使用</p><h2 id="ioc-控制反转"><a href="#ioc-控制反转" class="headerlink" title="ioc(控制反转)"></a>ioc(控制反转)</h2><p>1.spring根据配置文件 xml/注解,创建对象,并放入到容器(ConcurrentHashMap)中,并且可以完成对象之间的依赖’<br>2.当需要使用某个对象实例的时候,就直接从容器中获取即可<br>3.程序员可以更加关注如何使用对象完成相应的业务(以前是new ==&gt;现在是注解/配置方式)</p><h2 id="类加载路径"><a href="#类加载路径" class="headerlink" title="类加载路径"></a>类加载路径</h2><p>·我的理解就是编译后的路径</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">URL</span> resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>file<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">D</span><span class="token operator">:</span><span class="token operator">/</span>proj<span class="token operator">/</span>daimasuixianglu<span class="token operator">/</span>out<span class="token operator">/</span>production<span class="token operator">/</span>daimasuixianglu<span class="token operator">/</span><span class="token operator">/</span><span class="token class-name">D</span><span class="token operator">:</span><span class="token operator">/</span>proj<span class="token operator">/</span>daimasuixianglu<span class="token operator">/</span>out<span class="token operator">/</span>production<span class="token operator">/</span>daimasuixianglu<span class="token operator">/</span><span class="token class-name">D</span><span class="token operator">:</span>\proj\daimasuixianglu\out\production\daimasuixianglu    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring原生容器底层结构"><a href="#Spring原生容器底层结构" class="headerlink" title="Spring原生容器底层结构"></a>Spring原生容器底层结构</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/%7BB50EA099-DAF5-4043-845D-6AA4A62D0964%7D.png"></div></div><h2 id="引用-注入其它-bean-对象"><a href="#引用-注入其它-bean-对象" class="headerlink" title="引用/注入其它 bean 对象"></a>引用/注入其它 bean 对象</h2><p>·在spring的ioc容器,可以通过ref实现bean对象的相互引用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.service.MemberServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberDAO<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberDAOImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberDAOImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.dao.MemberDAOImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·在spring的ioc容器,可以直接配置内部bean对象</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberServiceImpl02<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.service.MemberServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memberDAO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.dao.MemberDAOImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·引用/注入集合/数组类型</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>master01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.beans.Master<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>太上老君<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 给 bean 对象的 list 集合赋值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster03<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster02<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 给 bean 对象的 map 集合赋值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>monsterKey01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>monsterKey02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster02<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 给 bean 对象的 properties 集合赋值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pros<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>k1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Java 工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>k2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前端工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>k3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大数据工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 给 bean 对象的数组属性注入值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>银角大王<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>金角大王<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 给 bean 对象的 set 属性注入值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterSet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.beans.Monster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>玉兔精<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>钻地洞<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="级联属性赋值"><a href="#级联属性赋值" class="headerlink" title="级联属性赋值"></a>级联属性赋值</h2><p>·spring的ioc容器,可以直接给对象属性的属性赋值,即级联属性</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.beans.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jack<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept.name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java 开发部<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.beans.Dept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过静态共厂获取对象"><a href="#通过静态共厂获取对象" class="headerlink" title="通过静态共厂获取对象"></a>通过静态共厂获取对象</h2><p>·在spring的ioc容器,可以通过静态工厂获取bean对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStaticFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">></span></span> monsterMap<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>      monsterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      monsterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"monster_01"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"黄袍怪"</span><span class="token punctuation">,</span> <span class="token string">"一阳指"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      monsterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"monster_02"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"九头金雕"</span><span class="token punctuation">,</span> <span class="token string">"如来神掌"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Monster</span> <span class="token function">getMonster</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> monsterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my_monster<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qgq.spring.factory.MyStaticFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getMonster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster_01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过实例工厂获取对象"><a href="#通过实例工厂获取对象" class="headerlink" title="通过实例工厂获取对象"></a>通过实例工厂获取对象</h2><p>·在spring的ioc容器,可以通过实例工厂获取bean对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInstanceFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span> monster_map<span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        monster_map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        monster_map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"monster_01"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"猴子精"</span><span class="token punctuation">,</span> <span class="token string">"吃人"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        monster_map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"monster_02"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"九头金雕"</span><span class="token punctuation">,</span> <span class="token string">"如来神掌"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Monster</span> <span class="token function">getMonster</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> monster_map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myInstanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qgq.spring.factory.MyInstanceFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my_monster02<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myInstanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getMonster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster_01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过FactoryBean获取对象-重点"><a href="#通过FactoryBean获取对象-重点" class="headerlink" title="通过FactoryBean获取对象(重点)"></a>通过FactoryBean获取对象(重点)</h2><p>·在spring的ioc容器,通过FactoryBean获取bean对象(重点)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> keyVal<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">></span></span> monster_map<span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        monster_map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Monster</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        monster_map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"monster_01"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"黄袍怪"</span><span class="token punctuation">,</span> <span class="token string">"一阳指"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        monster_map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"monster_02"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"九头金雕"</span><span class="token punctuation">,</span> <span class="token string">"如来神掌"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setKeyVal</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keyVal <span class="token operator">=</span> keyVal<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Monster</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>monster_map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>keyVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qgq.spring.factory.MyFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keyVal<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster_01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bean配置信息重用"><a href="#bean配置信息重用" class="headerlink" title="bean配置信息重用"></a>bean配置信息重用</h2><p>·在spring的ioc容器,提供了一种继承的方式来实现bean配置信息的重用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster10<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.beans.Monster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>蜈蚣精<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>蜇人<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster11<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qgq.spring.beans.Monster<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--当我们把某个bean设置为abstract="true"这个bean只能被继承,而不能被实例化了--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster12<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.beans.Monster<span class="token punctuation">"</span></span> <span class="token attr-name">abstract</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>美女蛇<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skill<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>吃人<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster13<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.beans.Monster<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster12<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bean创建顺序"><a href="#bean创建顺序" class="headerlink" title="bean创建顺序"></a>bean创建顺序</h2><p>·说明<br>1.在spring的ioc容器,默认是按照配置的顺序创建bean对象<br>2.先会创建student01这个bean对象,然后创建department01这个对象</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.bean.Student<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>department01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.bean.Department<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.如果这样配置,先会创建department01,<br>·补充 depends-on 被依赖项先于依赖项进行初始化，而后于依赖项被销毁<br>·会先创建 department01 对象，再创建 student01</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.bean.Student<span class="token punctuation">"</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>department01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>department01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.bean.Department<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bean对象的单例和多利"><a href="#bean对象的单例和多利" class="headerlink" title="bean对象的单例和多利"></a>bean对象的单例和多利</h2><p>·说明<br>1.在spring的ioc容器,在默认是按照单例创建的,即配置一个bean对象后,ioc容器只会创建一个bean实例。<br>2.如果,我们希望ioc容器配置的某个bean对象,是以多个实例形式创建的则可以通过配置scope=”prototype”来指定</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.beans.Car<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><p>1.默认是单例singleton,在启动容器时,默认就会创建,并放入到singletonObjects集合<br>2.当<bean scope="prototype">设置为多实例机制后,该bean是在getBean()时才创建<br>3.如果是单例singleton,同时希望在getBean时才创建,可以指定懒加载lazy-init=”true”(注意默认是false)<br>4.通常情况下, lazy-init 就使用默认值 false , 在开发看来, 用空间换时间是值得的, 除非有特殊的要求.<br>5.如果scope=”prototype”这时你的lazy-init属性的值不管是true,还是false都是在getBean时候,才创建对象</bean></p><h2 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h2><p>·说明:bean对象创建是由JVM完成的,然后执行如下方法<br>1.执行构造器<br>2.执行set相关方法<br>3.调用bean的初始化的方法(需要配置)<br>4.使用bean<br>5.当容器关闭时候,调用bean的销毁方法(需要配置)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"House() 构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"House setName()..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"House init().."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"House destory().."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h3><p>1.初始化init方法和destroy方法,是程序员来指定。<br>2.销毁方法就是当关闭容器时,才会被调用。</p><h2 id="配置bean的后置处理器"><a href="#配置bean的后置处理器" class="headerlink" title="配置bean的后置处理器"></a>配置bean的后置处理器</h2><p>1.在spring的ioc容器,可以配置bean的后置处理器<br>2.该处理器/对象会在bean初始化方法调用前和初始化方法调用后被调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 在 bean 初始化之前完成某些任务     * @param bean : 就是 ioc 容器返回的 bean 对象, 如果这里被替换会修改，则返     * 回的 bean 对象也会被修改     * @param beanName: 就是 ioc 容器配置的 bean 的名称     * @return Object: 就是返回的 bean 对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postProcessBeforeInitialization 被调用"</span><span class="token operator">+</span>beanName<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 在 bean 初始化之后完成某些任务     * @param bean : 就是 ioc 容器返回的 bean 对象, 如果这里被替换会修改，则返       回的 bean 对象也会被修改     * @param beanName: 就是 ioc 容器配置的 bean 的名称     * @return Object: 就是返回的 bean 对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postProcessAfterInitialization 被调用"</span><span class="token operator">+</span>beanName<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>house<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.beans.House<span class="token punctuation">"</span></span>          <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京豪宅<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myBeanPostProcessor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.beans.MyBeanPostProcessor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><p>1.怎么执行到这个方法?=&gt;使用AOP(反射+动态代理+IO+容器+注解)<br>2.有什么用?=&gt;可以对IOC容器中所有的对象进行统一处理,比如 日志处理/权限的校验/安全的验证/事务管理<br>3.针对容器的所有对象?是的=&gt;切面编程特点</p><h2 id="通过属性文件给bean注入值"><a href="#通过属性文件给bean注入值" class="headerlink" title="通过属性文件给bean注入值"></a>通过属性文件给bean注入值</h2><p>·在spring的ioc容器,通过属性文件给bean注入值<br>·应用实例<br>·在src/创建my.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">name</span><span class="token punctuation">=</span><span class="token value attr-value">\u9EC4\u888D\u602A</span><span class="token key attr-name">id</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token key attr-name">skill</span><span class="token punctuation">=</span><span class="token value attr-value">\u72EE\u5B50\u543C</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;!--1.通过属性文件给bean注入值2.需要导入:xmlns:context 名字空间,并指定属性文件路径--&gt;&lt;context:property-placeholder location&#x3D;&quot;classpath:my.properties&quot;&#x2F;&gt;&lt;bean id&#x3D;&quot;monster100&quot; class&#x3D;&quot;com.hspedu.spring.beans.Monster&quot;&gt;     &lt;property name&#x3D;&quot;monsterId&quot; value&#x3D;&quot;$&#123;id&#125;&quot;&#x2F;&gt;     &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;$&#123;name&#125;&quot;&#x2F;&gt;     &lt;property name&#x3D;&quot;skill&quot; value&#x3D;&quot;$&#123;skill&#125;&quot;&#x2F;&gt;&lt;&#x2F;bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于XML的bean的自动装配"><a href="#基于XML的bean的自动装配" class="headerlink" title="基于XML的bean的自动装配"></a>基于XML的bean的自动装配</h2><p>·在spring的ioc容器,可以实现自动装配bean<br>·应用实例<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存一个订单。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">OrderDao</span> orderDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OrderDao</span> <span class="token function">getOrderDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> orderDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderDao</span><span class="token punctuation">(</span><span class="token class-name">OrderDao</span> orderDao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderDao <span class="token operator">=</span> orderDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderAction</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OrderService</span> <span class="token function">getOrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> orderService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderService</span><span class="token punctuation">(</span><span class="token class-name">OrderService</span> orderService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderService <span class="token operator">=</span> orderService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    分析    1.autowire="byType"表示在创建orderService时,通过类型的方式,给对象的属性自动完成赋值/引用    2.比如OrderService对象有private OrderDao OrderDao    3.就会在容器中去找没有OrderDao类型的对象    4.如果有,就会自动的装配,如果按照byType方式来装配,这个容器中,不能有两个OrderDao类型的对象    5.如果设置的时autowire="byName",表示通过名字完成自动装配    6.比如下面的autowire="byName" class="com.qgq.spring.service.OrderService" id="orderService"        1）先看OrderService 属性private OrderDao orderDao，        2）在根据这个属性的setXXX()方法的xxx来找对象的id        3） public void setOrderDao()就会找id=orderDao对象来进行自动装配        4）如果没有就装配失败    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qgq.spring.dao.OrderDao<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--基于xml的bean的自动装配,演示autowire="byType",表示根据类型进行自动组装--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qgq.spring.service.OrderService<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置OrderAction对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qgq.spring.web.OrderAction<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderAction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>·这个知识点作为了解即可,后面我们主要还是基于注解的方式(重点.)</p><h2 id="spring-el表达式【知道即可】"><a href="#spring-el表达式【知道即可】" class="headerlink" title="spring el表达式【知道即可】"></a>spring el表达式【知道即可】</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- spring el 表达式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spELBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.beans.SpELBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- sp el 给字面量 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#&#123;'韩顺平教育'&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- sp el 引用其它 bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#&#123;monster01&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- sp el 引用其它 bean 的属性值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monsterName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#&#123;monster02.name&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- sp el 调用普通方法 赋值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>crySound<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#&#123;spELBean.cry('喵喵的..')&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- sp el 调用静态方法 赋值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#&#123;T(com.hspedu.spring.beans.SpELBean).read(' 天龙八部')&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- sp el 通过运算赋值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#&#123;89*1.2&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于注解配置bean"><a href="#基于注解配置bean" class="headerlink" title="基于注解配置bean"></a>基于注解配置bean</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>·基于注解的方式配置bean,主要是项目开发中的组件,比如Controller,Service,和Dao<br>·组件的注解的形式有<br>1.@Component 表示当前注解标识的是一个组件<br>2.@Controller 表示当前注解标识的是一个控制器,通常用于Servlet<br>3.@Service 表示当前注解标识的是一个处理业务逻辑的类,通常用于Service类<br>4.@Repository标识当前注解标识的是一个持久化层的lei,通常用于Dao类<br>5.在使用时要配置自动扫描的包,注意需要加入context名称空间<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.component<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>6.Spring的IOC容器不能检测一个使用了@Controller注解的类到底是不是一个真正的控制器。注解的名称是用于程序员自己识别当前<br>标识的是什么组件,其他的@Service,@Repository也是一样的道理。<br>7.排除那些类,以注解为例<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.component<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 排除哪些类 , 以 annotaion 注解为例 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h4><p>·<context:exclude-filter> 放在<context:component-scan>内，表示扫描过滤掉当前包的某些类<br>·type=”annotation” 按照注解类型进行过滤. 3) expression :就是注解的全类名，比如 org.springframework.stereotype.Service 就是<br>·Service 注解的全类名,其它比@Controller @Repository 等 依次类推<br>·上面表示过滤掉 com.hspedu.spring.component 包下，加入了@Service 注解的类<br>·完成测试， 修改 beans.xml, 增加 exclude-filter , 发现 UserService, 不会注入到容器.<br>8.指定自动扫描那些注解类<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.component<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>9.默认情况:标记注解后,类名首字母小写作为id的值,也可以使用注解value属性指定id值,并且value可以省略</context:component-scan></context:exclude-filter></p><h2 id="简单的spring基于注解的开发程序"><a href="#简单的spring基于注解的开发程序" class="headerlink" title="简单的spring基于注解的开发程序"></a>简单的spring基于注解的开发程序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.qgq.spring.component"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QgqSpringConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Annotation</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2024/3/25 0025 18:42 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QgqSpringApplicationContext</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Class</span> configClass<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> ioc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getIoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ioc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">QgqSpringApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">Class</span> configClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>configClass <span class="token operator">=</span> configClass<span class="token punctuation">;</span>        <span class="token class-name">ComponentScan</span> componentScan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ComponentScan</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configClass<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ComponentScan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> path<span class="token operator">=</span>componentScan<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">QgqSpringApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//目的是扫描该路径下的类</span>        <span class="token class-name">URL</span> resource <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> fileAbsolutePath <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fileAbsolutePath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//D:\proj\qgq_spring\MySpring\target\classes\com\qgq\spring\component\MonsterService.class</span>                    <span class="token comment">//得到类的类名</span>                    <span class="token class-name">String</span> className<span class="token operator">=</span>fileAbsolutePath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileAbsolutePath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>fileAbsolutePath<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> classFullPath<span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>className<span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>classFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是一个 bean = "</span> <span class="token operator">+</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                <span class="token class-name">Object</span> instance <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                ioc<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是一个 bean = "</span> <span class="token operator">+</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ioc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><p>1.基于注解配置bean,也可以实现自动装配,使用的注解是:@AutoWired或者@Resource<br>2.@AutoWired的规则说明<br>·在ioc容器中查找待装配的组件的类型,如果有唯一的bean匹配,则使用该bean装配<br>·如待装配的类型对应的bean在ioc容器中有多个,则使用待装配的属性的属性名作为id值再进行查找,找到就装配,找不到就抛异常<br>·@Resource 有两个属性是比较重要的,分是 name 和 type,Spring 将@Resource 注解的name属性解析为bean的名字,<br>而type属性则解析为bean的类型.所以如果使用name属性,则使用byName的自动注入策略,而使用type属性时则使用byType自动注<br>·如果@Resource 没有指定 name 和 type ,则先使用byName注入策略, 如果匹配不上,再使用byType策略,如果都不成功，就会报错</p><h3 id="Qualifier注解"><a href="#Qualifier注解" class="headerlink" title="Qualifier注解"></a>Qualifier注解</h3><p>·Qualifier注解与@Autowired配合使用,如果再一个容器中如果待装配的组件的bean不唯一,并且要制定某个bean,<br>可以使用Qualifier注解注解<br>·如下例,虽然@AutoWired默认情况下会按照类型匹配,如果匹配不到会按照属性名为id匹配(bean往容器中放的时候会按照类名首字母小写作为id的值)<br>但是遇到这种情况就会报错NoUniqueBeanDefinitionException,所以需要使用@Qualifier配合使用<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"fooFormatter"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooFormatter</span> <span class="token keyword">implements</span> <span class="token class-name">Formatter</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"barFormatter"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BarFormatter</span> <span class="token keyword">implements</span> <span class="token class-name">Formatter</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token string">"bar"</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Component</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooService</span> <span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Autowired</span>       <span class="token keyword">private</span> <span class="token class-name">Formatter</span> formatter<span class="token punctuation">;</span>              <span class="token comment">//todo </span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Component</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooService</span> <span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Autowired</span>       <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"fooFormatter"</span><span class="token punctuation">)</span>       <span class="token keyword">private</span> <span class="token class-name">Formatter</span> formatter<span class="token punctuation">;</span>              <span class="token comment">//todo </span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="泛型依赖注入"><a href="#泛型依赖注入" class="headerlink" title="泛型依赖注入"></a>泛型依赖注入</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseDao</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDao</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在保存用户..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDao</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDao</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在保存图书..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">BaseDao</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> baseDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自动注入的dao"</span><span class="token operator">+</span>baseDao<span class="token punctuation">)</span><span class="token punctuation">;</span>        baseDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·我的理解,它们的父类存在依赖注入,子类自动依赖注入</p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Vehicle</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小汽车在公路 running.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VehicleProxyProvider</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Vehicle</span> target_vehicle<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">VehicleProxyProvider</span><span class="token punctuation">(</span><span class="token class-name">Vehicle</span> target_vehicle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target_vehicle <span class="token operator">=</span> target_vehicle<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Vehicle</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ClassLoader</span> loader <span class="token operator">=</span> target_vehicle<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> target_vehicle<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这个对象有一个方法是 invoke 到时可以通过反射，动态调用目标对象的方法</span>        <span class="token class-name">InvocationHandler</span> invocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"交通工具开始运行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target_vehicle<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"交通工具开始运行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//将上面的 loader, interfaces, invocationHandler 构建一个 Vehicle</span>        <span class="token comment">//的代理对象</span>        <span class="token class-name">Vehicle</span> vehicle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Vehicle</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> vehicle<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AOP的基本介绍"><a href="#AOP的基本介绍" class="headerlink" title="AOP的基本介绍"></a>AOP的基本介绍</h2><p>·什么是AOP<br>1.AOP的全程(aspect oriented programming) 面向切面编程<br>2.一张简易图说明AOP<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/2889a9ac95a42e25aff1297b2b62fae7.png"></div></div><br>3.一张详细图说明AOP<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/462a3e661315ecace1b373f2a35bec7c.png"></div></div></p><h3 id="AOP实现方式"><a href="#AOP实现方式" class="headerlink" title="AOP实现方式"></a>AOP实现方式</h3><p>1.基于动态代理的方式[内置aop实现]<br>2.使用框架aspectj来实现</p><h3 id="AOP编程快速入门"><a href="#AOP编程快速入门" class="headerlink" title="AOP编程快速入门"></a>AOP编程快速入门</h3><p>·说明<br>1.需要引入核心的aspect包<br>2.再切面类中声明通知方法<br>3.前置通知:@Before<br>4.返回通知:@AfterReturning<br>5.异常通知:@AfterThrowing<br>6.后置通知:@After<br>7.环绕通知@Around<br>·版本一<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span>  <span class="token comment">//表示是一个切面类</span><span class="token annotation punctuation">@Component</span>  <span class="token comment">//会注入SmartAnimalAspect到容器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmartAnimalAspect</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public float com.qgq.spring.AOP.aspectj.SmartDog.*(float, float))"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到的是方法签名com.qgq.spring.AOP.aspectj.SmartDog.getSum</span>        <span class="token comment">//横切关注点，前置通知</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面类-方法执行前-日志-方法名-"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-参数"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution( public float com.qgq.spring.AOP.aspectj.SmartDog.getSum(float, float))"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"res"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span><span class="token class-name">Object</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//横切关注点，返回通知</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面类-日志-方法名-"</span> <span class="token operator">+</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-结果result="</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution( public float com.qgq.spring.AOP.aspectj.SmartDog.getSum(float, float))"</span><span class="token punctuation">,</span>throwing <span class="token operator">=</span> <span class="token string">"thrown"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span><span class="token class-name">Throwable</span> thrown<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//横切关注点，返回通知</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面类-日志-方法出现异常-方法名-"</span> <span class="token operator">+</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-异常信息="</span><span class="token operator">+</span>thrown<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution( public float com.qgq.spring.AOP.aspectj.SmartDog.getSum(float, float))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//横切关注点，返回通知</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面类最总通知-日志-方法名-"</span> <span class="token operator">+</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-结果result="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>·上面的每一个切入的方法都需要写切入表达式<br>·定义一个切入点,在后面使用的时候可以直接使用,提高了复用行<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public float com.qgq.spring.AOP.aspectj.SmartDog.*(float ,float ))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"myPointCut()"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>·可以使用@Around注解完成切入,但是不常用<br>·它相当于将五个切入方法通过try-catch-finally合并在一块<br>·执行目标方法的方法为 result=joinPoint.proceed();<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span>  <span class="token comment">//表示是一个切面类</span><span class="token annotation punctuation">@Component</span>  <span class="token comment">//会注入SmartAnimalAspect到容器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmartAnimalAspect2</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public float SmartDog.*(float, float) )"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> result<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.相当于前置通知完成的事情</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> objects <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AOP环绕通知--"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"方法参数"</span><span class="token operator">+</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token operator">=</span>joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.相当于返回通知完成的事情</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AOP环绕通知--"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"方法参数"</span><span class="token operator">+</span>objects<span class="token operator">+</span><span class="token string">"返回的结果"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AOP环绕通知--"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"方法异常了"</span><span class="token operator">+</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AOP环绕通知--"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"最终通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h3><p>1.当spring容器开启了基于注解的AOP的功能<aop:aspectj-autoproxy>,我们获取注入的对象,需要以接口的类型来获取,<br>因为你注入的对象.getClass()已经是代理类型了。<br>·例如SmartAnimalable bean = ioc.getBean(SmartAnimalable.class);<br>@Component  //使用@Component 当spring容器启动时，将smartDog注入到容器<br>public class SmartDog implements SmartAnimalable<br>1.当spring容器开启了基于注解的AOP的功能<aop:aspectj-autoproxy>,我们获取注入的对象,也可以通过id来获取,但是也要<br>转成接口类型。</aop:aspectj-autoproxy></aop:aspectj-autoproxy></p><h3 id="切入表达式的注意事项和细节"><a href="#切入表达式的注意事项和细节" class="headerlink" title="切入表达式的注意事项和细节"></a>切入表达式的注意事项和细节</h3><p>1.切入表达式也可以指向类的方法,这时表达式会对该类/对象生效<br>2切入表达式也可以指向接口的方法,这时切入表达式会对是按了接口的类/对象生效<br>3.切入表达式也可以对没有实现接口的类,进行切入</p><h3 id="AOP-JoinPoint"><a href="#AOP-JoinPoint" class="headerlink" title="AOP-JoinPoint"></a>AOP-JoinPoint</h3><p>·通过JoinPoint可以获取到调用方法的签名<br>·常用方法一览<br><pre class="line-numbers language-java" data-language="java"><code class="language-java">joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取目标方法名</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取目标方法所属类的简单类名</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取目标方法所属类的类名</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取目标方法声明类型(public、private、protected)</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取传入目标方法的参数，返回一个数组</span>joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取被代理的对象</span>joinPoint<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取代理对象自己</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>·AOP返回结果通知<br>在@AfterReturning中有returning属性=”res”<br>在@AfterThrowing中有throwing=”throwable”</p><h3 id="AOP切面优先级问题"><a href="#AOP切面优先级问题" class="headerlink" title="AOP切面优先级问题"></a>AOP切面优先级问题</h3><p>·切面优先级<br>1.如果同一个方法,有多个切面在通一个切入点切入,执行的哟许欸年纪是由@Order(value=n)控制,n值越小,优先级值越高<br>2.不能理解成优先级高的每个消息通知都先执行,这个和方法调用机制(和Filter过滤器链式调用类似)、<br>3.图例<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/14d14944d82ba02d23de501f9cf98b29.png"></div></div></p><h2 id="AOP-基于XML配置AOP"><a href="#AOP-基于XML配置AOP" class="headerlink" title="AOP-基于XML配置AOP"></a>AOP-基于XML配置AOP</h2><h3 id="基本说明-前面我们是通过注解来配置aop的-在spring中-我们也可以通过xml的方来配置AOP"><a href="#基本说明-前面我们是通过注解来配置aop的-在spring中-我们也可以通过xml的方来配置AOP" class="headerlink" title="基本说明:前面我们是通过注解来配置aop的,在spring中,我们也可以通过xml的方来配置AOP"></a>基本说明:前面我们是通过注解来配置aop的,在spring中,我们也可以通过xml的方来配置AOP</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmartAnimalAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//希望将before方法切入到SmartDog-getSum前执行-前置通知</span>    <span class="token comment">/**     * 解读     * 1.@Before 表示前置通知：即在我们的目标对象执行的方法前执行     * 2.value = "execution(public float com.qgq.spring.AOP.aspectj.SmartDog.getSum(float, float))指定切入到哪个类的那个方法 形式是 访问修饰符 返回类型 全类名.方法名(形参列表)     * 3.before方法可以理解为就是一个切入方法，这个方法名是可以程序员指定     * 4.JoinPoint joinPoint在底层执行时,由Aspectj切面框架，会给该切入方法传入joinPoint对象，通过该方法，可以获取到相关信息     * @param joinPoint     */</span><span class="token comment">//    @Before(value = "execution(public float com.qgq.spring.AOP.aspectj.SmartDog.*(float, float))")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到的是方法签名com.qgq.spring.AOP.aspectj.SmartDog.getSum</span>        <span class="token comment">//横切关注点，前置通知</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面类-方法执行前-日志-方法名-"</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-参数"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回通知</span><span class="token comment">//    @AfterReturning(value = "execution( public float com.qgq.spring.AOP.aspectj.SmartDog.getSum(float, float))",returning = "res")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span><span class="token class-name">Object</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//横切关注点，返回通知</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面类-日志-方法名-"</span> <span class="token operator">+</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-结果result="</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//    @AfterThrowing(value = "execution( public float com.qgq.spring.AOP.aspectj.SmartDog.getSum(float, float))",throwing = "thrown")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterThrowing</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span><span class="token class-name">Throwable</span> thrown<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//横切关注点，返回通知</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面类-日志-方法出现异常-方法名-"</span> <span class="token operator">+</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-异常信息="</span><span class="token operator">+</span>thrown<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//    @After(value = "execution( public float com.qgq.spring.AOP.aspectj.SmartDog.getSum(float, float))")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">After</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//横切关注点，返回通知</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面类最总通知-日志-方法名-"</span> <span class="token operator">+</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-结果result="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 配置自动扫描的包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.aop.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 开启基于注解的 AOP 功能 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qgq.spring.AOP.xml.SmartAnimalAspect<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>animalAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qgq.spring.AOP.xml.SmartDog<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myPointCut<span class="token punctuation">"</span></span>                      <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(public float com.qgq.spring.AOP.xml.SmartDog.*(float, float))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>animalAspect<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myPointCut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AfterReturning<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myPointCut<span class="token punctuation">"</span></span>                                 <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>res<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-returning</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AfterThrowing<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myPointCut<span class="token punctuation">"</span></span> <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thrown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-throwing</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>After<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myPointCut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解读:<br>1.先配置自动扫描的包和开启基于注解AOP功能<br>2.在aop:config中先加入切面表达式,然后配置被切入的方法,然后配置要切入的五个方法</p><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><h3 id="如果程序员就希望使用spring框架来做项目-spring框架如何处理对数据库的操作呢"><a href="#如果程序员就希望使用spring框架来做项目-spring框架如何处理对数据库的操作呢" class="headerlink" title="如果程序员就希望使用spring框架来做项目,spring框架如何处理对数据库的操作呢"></a>如果程序员就希望使用spring框架来做项目,spring框架如何处理对数据库的操作呢</h3><p>·spring提供了了一个操作数据库功能强大的类JdbcTemplate。我们可以同ioc容器配置一个jdbcTemplate对象,使用它来完成对数据<br>库表的各种操作</p><h3 id="JdbcTemplate-基本介绍"><a href="#JdbcTemplate-基本介绍" class="headerlink" title="JdbcTemplate-基本介绍"></a>JdbcTemplate-基本介绍</h3><p>·通过spring可以配置数据源,从而完成对数据表的操作<br>·JdbcTemplate是Spring提供的访问数据库的技术,可以将JDBC的常用操作封装为模板方法</p><h3 id="JdbcTemplate使用"><a href="#JdbcTemplate使用" class="headerlink" title="JdbcTemplate使用"></a>JdbcTemplate使用</h3><pre class="line-numbers language-propertise" data-language="propertise"><code class="language-propertise">jdbc.userName&#x3D;rootjdbc.password&#x3D;qgqjdbc.driverClass&#x3D;com.mysql.jdbc.Driverjdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;spring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 引入外部属性文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 配置数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.userName&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driverClass&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 配置 JdbcTemplate --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 将上面的数据源分配给 jdbcTemplate --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·一些操作实例<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"JdbcTemplate_ioc.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到 JdbcTemplate bean</span><span class="token class-name">JdbcTemplate</span> bean <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"INSERT INTO monster VALUES(?, ?, ?)"</span><span class="token punctuation">;</span><span class="token keyword">int</span> affected <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token string">"红孩儿 2"</span><span class="token punctuation">,</span> <span class="token string">"枪法厉害 2"</span><span class="token punctuation">)</span><span class="token comment">//批量添加</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"INSERT INTO monster VALUES(?, ?, ?)"</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> param_list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>param_list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"白蛇精"</span><span class="token punctuation">,</span> <span class="token string">"吃人"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>param_list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token string">"青蛇精"</span><span class="token punctuation">,</span> <span class="token string">"吃小孩"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean<span class="token punctuation">.</span><span class="token function">batchUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> param_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"batch add ok"</span><span class="token comment">//查询并封装</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT id as monsterId,name,skill FROM monster WHERE id =?"</span><span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span> rowMapper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Monster</span> monster <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> rowMapper<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用Map传入具名参数</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"INSERT INTO monster VALUES(:my_id, :name, :skill)"</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map_parameter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map_parameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"my_id"</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map_parameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"螃蟹精"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map_parameter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"skill"</span><span class="token punctuation">,</span> <span class="token string">"钳子无敌大法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>namedParameterJdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> map_parameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><h3 id="事务分类"><a href="#事务分类" class="headerlink" title="事务分类"></a>事务分类</h3><p>1.编程式事务<br>代码示例<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">//1. 先设置事务不要自动提交</span>connection<span class="token punctuation">.</span><span class="token function">setAutoCommint</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 进行各种 crud</span><span class="token comment">//多个表的修改，添加 ，删除</span><span class="token comment">//3. 提交</span>connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//4. 回滚</span>conection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>2.声明式事务<br>·以用户购买商品举例<br>我们需要去处理用户购买商品的业务逻辑:分析: 当一个用户要去购买商品应该包含三个步骤<br>1)通过商品 id 获取价格.<br>2)购买商品(某人购买商品，修改用户的余额.)<br>3)修改库存量<br>·如果使用传统的编程事务来处理,将代码写在一起【缺点:代码冗余,效率低,不利于发展,优先简单,好理解】<br>·用 Spring 的声明式事务处理， 可以将上面三个子步骤分别写成一个方法,然后统一管理<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsDao</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Float</span> <span class="token function">queryPriceById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT price From goods Where goods_id=?"</span><span class="token punctuation">;</span>            <span class="token class-name">Float</span> price <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> price<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBalance</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> user_id<span class="token punctuation">,</span> <span class="token class-name">Float</span> money<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"UPDATE user_account SET money=money-? Where user_id=?"</span><span class="token punctuation">;</span>            jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> money<span class="token punctuation">,</span> user_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAmount</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> goods_id<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> "<span class="token constant">UPDATE</span> goods_amount <span class="token class-name">SET</span> goods_num<span class="token operator">=</span>goods_num<span class="token operator">-</span><span class="token operator">?</span> <span class="token class-name">Where</span>        goods_id<span class="token operator">=</span><span class="token operator">?</span>"<span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> amount <span class="token punctuation">,</span> goods_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 引入外部属性文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 配置数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.userName&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driverClass&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 配置 JdbcTemplate --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 将上面的数据源分配给 jdbcTemplate --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 配置事务管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSourceTransactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 开启基于注解的声明式事务功能 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 加入自动扫描包 dao --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hspedu.spring.tx.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyGoodsByTx</span><span class="token punctuation">(</span><span class="token keyword">int</span> user_id<span class="token punctuation">,</span> <span class="token keyword">int</span> goods_id<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//查询到商品价格</span>        <span class="token class-name">Float</span> goods_price <span class="token operator">=</span> goodsDao<span class="token punctuation">.</span><span class="token function">queryPriceById</span><span class="token punctuation">(</span>goods_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//购买商品，减去余额</span>        goodsDao<span class="token punctuation">.</span><span class="token function">updateBalance</span><span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> goods_price <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// //老韩: 模拟一个异常, 会发生数据库数据不一致现象</span><span class="token comment">// int i = 10 / 0;</span><span class="token comment">//更新库存</span>        goodsDao<span class="token punctuation">.</span><span class="token function">updateAmount</span><span class="token punctuation">(</span>goods_id<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="事务的传播机制"><a href="#事务的传播机制" class="headerlink" title="事务的传播机制"></a>事务的传播机制</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transaction</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span><span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES_NEW</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multiTxTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//2 号用户购买 2 号商品，购买数量是 1 个. goodService.buyGoodsByTx(2, 2, 1);</span><span class="token comment">//1 号用用户 1 号商品，购买数量是 1 个. goodService.buyGoodsByTx02(1, 1, 1);</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.如果设置为 REQUIRES_NEWbuyGoods2 如果错误，不会影响到 buyGoods()反之亦然，即它们的事务是独立的.<br>2.如果设置为 REQUIRED buyGoods2 和 buyGoods 是一个整体，只要有方法的事务错误，那么两个方法都不</p><h2 id="事务超时回滚"><a href="#事务超时回滚" class="headerlink" title="事务超时回滚"></a>事务超时回滚</h2><p>1.如果一个事务执行的时间超过某个时间限制，就让该事务回滚。<br>2.可以通过设置事务超时回顾来实现<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><h1 id="spring的底层实现关键代码"><a href="#spring的底层实现关键代码" class="headerlink" title="spring的底层实现关键代码"></a>spring的底层实现关键代码</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>ioc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ComponentScan</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Scope</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>processor<span class="token punctuation">.</span></span><span class="token class-name">BeanPostProcessor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>processor<span class="token punctuation">.</span></span><span class="token class-name">InitializingBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Enumeration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2023/1/14 5:22 * @Version 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QgqSpringApplicationContext</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Class</span> configClass<span class="token punctuation">;</span>    <span class="token comment">//定义属性BeanDefinitionMap->存放BeanDefinition</span>    <span class="token keyword">private</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">></span></span> <span class="token class-name">BeanDefinitionMap</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//定义属性SingletonObjects->存放单例对象</span>    <span class="token keyword">private</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token class-name">SingletonObjects</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//定义一个属性=>存放后置处理器</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> beanPostProcessorList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">QgqSpringApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">Class</span> configClass<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">beanDefinitionByScan</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历BeanDefinitionMap对象</span>        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> <span class="token class-name">BeanDefinitionMap</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> beanName <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token class-name">BeanDefinitionMap</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">SingletonObjects</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span><span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BeanDefinitionMap"</span><span class="token operator">+</span><span class="token class-name">BeanDefinitionMap</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SingletonObjects"</span><span class="token operator">+</span><span class="token class-name">SingletonObjects</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//该方法完成对指定包的扫描，将bean信息封装到beanDefinition对象中，返回放入到BeanDefinitionMap</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beanDefinitionByScan</span><span class="token punctuation">(</span><span class="token class-name">Class</span> configClass<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>configClass <span class="token operator">=</span> configClass<span class="token punctuation">;</span><span class="token comment">//        System.out.println("this.configClass="+configClass);</span>        <span class="token comment">//获取要扫描的包</span>        <span class="token comment">//1.先得到QGQSpringConfig配置的@ComponentScan(value = "com.qgq.spring.component")</span>        <span class="token class-name">ComponentScan</span> componentScan <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">ComponentScan</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>configClass<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ComponentScan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.通过componentScan的value=>要扫描的包</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"要扫描的包="</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到要扫描的包下的所有资源(类，class)</span>        <span class="token comment">//1.得到类的加载器（才能得到out路径下的），app类加载器</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">QgqSpringApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"classLoader="</span><span class="token operator">+</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.通过类的加载器获取到要扫描包的资源url</span>        path<span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一定要吧.替换成/</span>        <span class="token class-name">URL</span> resource <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resource="</span><span class="token operator">+</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.将要加载的资源(.class)路径下的文件进行遍历</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//                System.out.println("f="+f);</span>                <span class="token comment">//System.out.println("=========================");</span>                <span class="token comment">//System.out.println("f.getAbsolutePath"+f.getAbsolutePath());</span>                <span class="token comment">//D:\proj\qgq_spring\spring\out\production\spring\com\qgq\spring\component\MyComponent.class</span>                <span class="token comment">//获取到com\qgq\spring\component\MyComponent.class</span>                <span class="token class-name">String</span> fileAbsolutePath <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//这里我们只处理.class文件</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fileAbsolutePath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> className <span class="token operator">=</span> fileAbsolutePath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileAbsolutePath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> fileAbsolutePath<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                    System.out.println("className=" + className);</span>                    <span class="token comment">//2.获取类的完整的路径(全类名)</span>                    <span class="token class-name">String</span> classFullname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> className<span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"classFullname="</span><span class="token operator">+</span>classFullname<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//3.判断该类是不是需要注入容器，就看该类是不是有注解@Component，@Service...</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//这时我们就得到了该类的Class对象</span>                        <span class="token comment">//Class.forName(classFullname) 可以反射加载类</span>                        <span class="token comment">//classLoader.loadClass(classFullname);可以反射类的Class</span>                        <span class="token comment">//区别上面的方式会调用该类的静态方法，下面方法不会</span>                        <span class="token comment">//4.判断该类是否有以下的注解</span>                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>classFullname<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            <span class="token comment">//1.为了方便，这里将后置处理器放入到一个ArrayList</span>                            <span class="token comment">//2.如果发现是一个后置处理器，放入到beanPostProcessorList</span>                            <span class="token comment">//3.在原生Spring容器中，对后置处理器还是走的getBean，createBean，但是需要我们在singletonObjects加入相应的业务逻辑</span>                            <span class="token comment">//4.因为这里我们是为了讲解后置处理器的机制，所以就简化了</span>                            <span class="token comment">//判断当前的这个aClass有没有实现BeanPostProcessor</span>                            <span class="token comment">//说明，这里我们不能使用instanceof 来判断aClass是否实现了BeanPostProcessor（instanceof是判断运行类型的）</span>                            <span class="token comment">//原因是aClass不是一个实例对象，而不是一个类对象/aClass，使用isAssignableFrom</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                <span class="token class-name">BeanPostProcessor</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">)</span>aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//放入到beanPostProcessorList</span>                                beanPostProcessorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">continue</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token comment">//先得到beanName</span>                            <span class="token class-name">Component</span> declaredAnnotation <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">String</span> beanName <span class="token operator">=</span> declaredAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                beanName<span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">uncapitalize</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token comment">//将bean信息封装到beanDefinition对象中，返回放入到BeanDefinitionMap</span>                            <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            beanDefinition<span class="token punctuation">.</span><span class="token function">setClazz</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Scope</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                <span class="token class-name">String</span> scope <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Scope</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                beanDefinition<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                beanDefinition<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token class-name">BeanDefinitionMap</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是一个spring bean="</span><span class="token operator">+</span>aClass<span class="token operator">+</span><span class="token string">"类名"</span><span class="token operator">+</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是一个spring bean="</span><span class="token operator">+</span>aClass<span class="token operator">+</span><span class="token string">"类名"</span><span class="token operator">+</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//完成createBean(BeanDefinition beanDefinition)方法</span>    <span class="token comment">//在创建好bean实例后，判断是否需要进行初始化[心得：容器中常用的一个方法是，根据该类是否实现了某个接口，老判断是否要执行某个业务逻辑，这里其实就是接口编程]</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span><span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> instance <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> declaredField <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>declaredField<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Autowired</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//得到字段名</span>                    <span class="token class-name">String</span> name <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//得到组装的对象</span>                    <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//组装对象,反射</span>                    declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//私有，爆破，关闭安全检查来提升反射速度</span>                    declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====创建好实例====="</span><span class="token operator">+</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//我们在Bean的初始化方法前，调用后置处理器的before方法</span>            <span class="token comment">//后置处理器会对容器中的所有的bean生效</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> beanPostProcessor <span class="token operator">:</span> beanPostProcessorList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">Object</span>  instance1 <span class="token operator">=</span> beanPostProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>instance1<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  instance<span class="token operator">=</span>instance1<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//这里判断是否要执行Bean初始化方法</span>            <span class="token comment">//1.判断当前创建的Bean对象是否实现了InitializingBean</span>            <span class="token comment">//2.instanceof java基础中讲过 表判断某个对象的运行类型是不是某个类型或者某个类型的子类型</span>            <span class="token comment">//这里就使用到了接口编程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//3.将instance转成InitializingBean类型</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">InitializingBean</span><span class="token punctuation">)</span>instance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//我们在Bean的初始化后，调用后置处理器的after方法</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> beanPostProcessor <span class="token operator">:</span> beanPostProcessorList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">Object</span> instance1<span class="token operator">=</span>beanPostProcessor<span class="token punctuation">.</span><span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance1<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    instance<span class="token operator">=</span>instance1<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionMap</span><span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token class-name">BeanDefinitionMap</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> scope <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">SingletonObjects</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"该bean不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;Spring(轻量级容器框架)复习 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;Spring学习的</summary>
      
    
    
    
    <category term="主流框架" scheme="https://100qin10086.github.io/categories/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring" scheme="https://100qin10086.github.io/tags/Spring/"/>
    
    <category term="框架" scheme="https://100qin10086.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Java" scheme="https://100qin10086.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>手撕集合源码</title>
    <link href="https://100qin10086.github.io/posts/4183b029.html"/>
    <id>https://100qin10086.github.io/posts/4183b029.html</id>
    <published>2024-03-21T08:33:22.000Z</published>
    <updated>2024-04-02T07:07:50.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>集合源码分析</p></div></h1><h2 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a>ArrayList源码分析</h2><p>·在ArrayList中有六个属性<br>1.int DEFAULT_CAPACITY = 10;数组的默认初始容量<br>2.Object[] EMPTY_ELEMENTDATA = {};空实例的共享数组实例。我的理解就是当初始化ArrayList的时,指定了初始容量,但是初始<br>容量为0时,elementData会等于该空数组<br>3.Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};用于默认大小的空实例的共享空数组实例。我的理解是当初始化ArrayList的时，<br>没有指定初始容量,在调用ArrayList的无参构造器时,elementData会等于该空数组<br>4.Object[] elementData;因为ArrayList的底层就是数组的实现,所以该数组用于存放数据,添加第一个元素时,任何带有<br>elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA的空ArrayList都将扩展到DEFAULT_CAPACITY大小。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8683452581122892189L</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CAPACITY</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">EMPTY_ELEMENTDATA</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment">// non-private to simplify nested class access</span><span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·ArrayList的三个构造器分析<br>1.第一个构造器和第二个构造器都很容易理解,所见即所得<br>2.第三个构造器,在初始化ArrayList是同时给其传入一个Collection类型的对象c<br>3.将传入的集合 c 转换为数组，并将该数组赋值给 ArrayList 的成员变量 elementData<br>4.先将数组的长度赋值给 size 变量，然后进行判断<br>4.1.如果数组长度不为0,进入if分支<br>4.1.1.如果数组长度不为0,判断elementData的类是否是Object数组,如果不是则将elementData转为Object数组<br>4.1.2.如果数组长度为0,则将elementData设置为ArrayList的内部数据结构是Object类型的数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token constant">EMPTY_ELEMENTDATA</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                            initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token constant">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>             elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// replace with empty array.</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token constant">EMPTY_ELEMENTDATA</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·ArrayList的两个add方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断需不需要扩容</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**1.首先判断elementData是否等于ArrayList内部的默认空实例数组2.如果等于说明是第一次扩容,默认大小为DEFAULT_CAPACITY=103.然后执行确保容器具有至少minCapacity的容量,这可能会触发容器扩容的操作,以确保可以容纳所需的元素数量*/</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> <span class="token constant">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            minCapacity <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/**1.modCount,这个值用于对容器进行结构性修改时,来追踪修改次数2.然后进行比较,如果所需的最小容量大于当前容器的长度,进行扩容*/</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// overflow-conscious code</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/**1.首先得到容器的长度,并且将其扩容1.5倍2.检查计算出来的新容量是否小于指定的最小容量minCapacity,如果是,则将新容量设置为minCapacity3.检查新容量是否超出了数组最大容量 MAX_ARRAY_SIZE,如果超出,调用hugeCapacity(minCapacity)获取一个足够大的容量4.使用Arrays.copyOf方法创建一个新的数组,将旧数组elementData中的元素复制到新数组中,并将新数组赋值给elementData*/</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> <span class="token constant">MAX_ARRAY_SIZE</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// minCapacity is usually close to size, so this is a win:</span>        elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>1.vector底层也是一个对象数组<br>2.vector是线程同步的,即线程安全,Vector类的操作方法带有synchronized<br>3.vector初始化时,如果是无参,默认10,满后,就按2倍扩容,如果指定大小,则每次直接按2倍扩容</p><h2 id="Set接口基本介绍"><a href="#Set接口基本介绍" class="headerlink" title="Set接口基本介绍"></a>Set接口基本介绍</h2><p>1.无序(添加和取出的顺序不一致),没有索引<br>2.不允许重复元素,所以最多包含一个null<br>3.HashSet的底层其实就是HashMap(数组+链表+红黑树)</p><h2 id="HashSet底层介绍"><a href="#HashSet底层介绍" class="headerlink" title="HashSet底层介绍"></a>HashSet底层介绍</h2><p>1.添加一个元素时,先得到hash值,会转成-&gt;索引值<br>2.找到存储数据表table,看这个索引位置是否已经存放的有元素<br>3.如果没有,直接加入<br>4.如果有,调用equals比较,如果相同,就放弃添加,如果不同,则添加到最后<br>5.在java8中,如果一条链表的元素个数超过TREEIFY_THRESHOLD(默认是8),并且table的大小&gt;=MIN_TREEIFY_CAPACITY(默认64)<br>就会进行树化(红黑树),否则依然采用数组扩容机制。<br>6.HashSet的底层是HashMap,第一次添加时,table数组扩容到16,临界值是16<em>加载因子(0.75)=12。<br>7.如果table数组使用到了临界值12,就会扩容到16</em>2=32,新的临界值就是32*0.75=24,依次类推</p><h3 id="HashSet底层细节"><a href="#HashSet底层细节" class="headerlink" title="HashSet底层细节"></a>HashSet底层细节</h3><p>1.求hash值: return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);<br>·解析当前值的hash值异或于当前值的hashCode值无符号右移16位<br>2.因为hashSet的底层是hashMap,所以</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.hashSet相当于在hashMap中只放了key,所以在v处放了一个占位符</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token constant">PRESENT</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token comment">//判断在table中第i个位置有没有元素,i=n-1,n=table.length</span> <span class="token comment">//如果没有直接就放到table表的第i个位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>     tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">//p = tab[i = (n - 1) &amp; hash])根据hash算得索引</span>        <span class="token comment">//当前索引位置对应的链表的第一个元素和准备添加的key的hash值一样</span>        <span class="token comment">//hash值相等并且节点的key相等或者key.equals(k),</span>        <span class="token comment">//这个if语句说来说去就一句话,如果准备添加的Node和当前索引位置对应链表的第一个元素Node一样,就不能加入</span>        e <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>    <span class="token comment">//再判断p是不是一颗红黑树</span>    <span class="token comment">//如果是红黑树就按红黑树的方法来</span>        e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//循环比较当前索引位置对应链表的Node,因为再数组与链表重合的位置以及比较了,我的理解是从链表的第二个元素开始比较</span>        <span class="token comment">//这个循环是死循环,只有两个退出条件  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//将准备加入的Node放入链表的最后</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//如果链表的长度到达8就对当前链表进行树化</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>                    <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY),数组的大小小于64,还不会树化</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;集合源码分析&lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;ArrayList源码分析&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="java" scheme="https://100qin10086.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>vue2复习</title>
    <link href="https://100qin10086.github.io/posts/94391273.html"/>
    <id>https://100qin10086.github.io/posts/94391273.html</id>
    <published>2024-03-21T00:59:59.000Z</published>
    <updated>2024-04-02T07:07:50.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>Vue2复习and预习 </p></div></h1><h2 id="VUE的MVVM"><a href="#VUE的MVVM" class="headerlink" title="VUE的MVVM"></a>VUE的MVVM</h2><p>·一图胜千言<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/7e8025b3fac9caa67c605889f258aa81.png"></div></div></p><h3 id="解读MVVM思想"><a href="#解读MVVM思想" class="headerlink" title="解读MVVM思想"></a>解读MVVM思想</h3><p>·M:即Model,模型,包括数据和一些基本操作<br>·V:即View,视图,页面渲染结果<br>·VM:即View-Model,模型与视图的双向操作(无需开发人员干涉)<br>·在 MVVM之前，开发人员从后端获取需要的数据模型，然后要通过 DOM 操作 Model渲染到View中。而后当用户操作视图，<br>我们还需要通过 DOM获取 View 中的数据,然后同步到Model 中。<br>·而 MVVM中的VM 要做的事情就是把DOM 操作完全封装起来，开发人员不用再关心Model和View之间是如何互相。<br>·只要我们 Model 发生了改变，View上自然就会表现出来<br>·当用户修改了View，Model 中的数据也会跟着改变。<br>·结果：把开发人员从繁琐的 DOM操作中解放出来，把关注点放在如何操作 Model上, 大大提高开发效率</p><h3 id="数据绑定实例"><a href="#数据绑定实例" class="headerlink" title="数据绑定实例"></a>数据绑定实例</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;&lt;!--老师解读1. div 元素不是必须的，也可以是其它元素，比如 span,但是约定都是将 vue 实例挂载到 div2. 因为 div 更加适合做布局3. id 不是必须为 app , 是程序员指定,一般我们就使用 app--&gt;&lt;div id&#x3D;&quot;app&quot;&gt;  &lt;!--老师解读  1. &#123;&#123;message&#125;&#125; : 插值表达式  2. message 就是从 model 的 data 数据池来设置  3. 当我们的代码执行时，会到 data&#123;&#125; 数据池中去匹配数据, 如果匹配上, 就进行替换  , 如果没有匹配上, 就是输出空  --&gt;  &lt;h1&gt;欢迎你&#123;&#123;message&#125;&#125;-&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&lt;!--引入 vue.js--&gt;&lt;script src&#x3D;&quot;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;  &#x2F;&#x2F;创建 Vue 对象  &#x2F;**   韩顺平 Java 工程师   * 老韩解读   * 1. 创建 Vue 对象实例   * 2. 我们在控制台输出 vm 对象，看看该对象的结构！(data&#x2F;listeners) *   *&#x2F;  let vm &#x3D; new Vue(&#123;    el: &quot;#app&quot;, &#x2F;&#x2F;创建的 vue 实例挂载到 id&#x3D;app 的 div    data: &#123; &#x2F;&#x2F;data&#123;&#125; 表示数据池(model 的有了数据), 有很多数据 ,以 k-v 形式设置(根据业务需要来设置)      message: &quot;Hello-Vue!&quot;,      name: &quot;秦三顺&quot;    &#125;  &#125;)&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·注意:代码顺序，要求 div 在前，script 在后，否则无法绑定数</p><h3 id="数据单向渲染"><a href="#数据单向渲染" class="headerlink" title="数据单向渲染"></a>数据单向渲染</h3><p>· v-bind 指令可以完成基本数据渲染/绑定<br>· v-bind 简写形式就是一个冒号（:）</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!--解读   1.适用插值表达式引用data数据池数据在标签体内   2.如果是在标签&#x2F;元素的属性上去引用data数据池数据时,不能适用插值表达式--&gt;&lt;img v-bind:src&#x3D;&quot;img_src&quot; v-bind:width&#x3D;&quot;img_width&quot;&gt;&lt;script&gt;let vm &#x3D; new Vue(&#123;  el: &quot;#app&quot;, &#x2F;&#x2F;创建的 vue 实例挂载到 id&#x3D;app 的 div  data: &#123; &#x2F;&#x2F;data&#123;&#125; 表示数据池(model 的有了数据), 有很多数据 ,以 k-v 形式设置(根据业务需要来设置)    message: &quot;hello, 耗子精&quot;,    img_src: &quot;1.jpg&quot;,    img_width: &quot;200px&quot;  &#125;&#125;)console.log(&quot;vm&#x3D;&gt;&quot;, vm);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h3><p>·v-model 可以完成双向数据绑定</p><h3 id="事件绑定后"><a href="#事件绑定后" class="headerlink" title="事件绑定后"></a>事件绑定后</h3><p>·使用 v-on 进行事件处理，比如: v-on:click 表示处理鼠标点击事件<br>·v-on 指令的简写形式 @ [需要浏览器支持]</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;&lt;!--视图--&gt;&lt;div id&#x3D;&quot;app&quot;&gt;  &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h1&gt;  &lt;!--老韩解读  1. v-on:click 表示我们要给 button 元素绑定一个 click 的事件  2. sayHi() 表示绑定的方法, 在方法池 methods&#123;&#125; 定义的  3. 底层仍然是 dom 处理  4. 如果方法不需要传递参数，可以省略()  5. v-on:click 可以简写@, 但是需要浏览器支持  --&gt;  &lt;button v-on:click&#x3D;&quot;sayHi()&quot;&gt;点击输出&lt;&#x2F;button&gt;  &lt;button v-on:click&#x3D;&quot;sayOk()&quot;&gt;点击输出&lt;&#x2F;button&gt;  &lt;button v-on:click&#x3D;&quot;sayHi&quot;&gt;点击输出&lt;&#x2F;button&gt;  &lt;button @click&#x3D;&quot;sayOk&quot;&gt;点击输出&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;&lt;!--引入我们的 vue.js--&gt;&lt;script src&#x3D;&quot;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;!--创建一个 vue 实例,并挂载到 id&#x3D;app 的 div--&gt;&lt;script&gt;  &#x2F;&#x2F;老师说明:这里创建的 Vue 实例, 你可以不去接收, 也可以接收  &#x2F;&#x2F;方便我们调试信息  let vm &#x3D; new Vue(&#123;    el: &quot;#app&quot;, &#x2F;&#x2F;创建的 vue 实例挂载到 id&#x3D;app 的 div, el 就是 element 的简写    data: &#123; &#x2F;&#x2F;data&#123;&#125; 表示数据池(model 中的数据), 有很多数据 ,以 k-v 形式设置(根据业务需要来设置)      message: &quot;Vue 事件处理的案例&quot;, name: &quot;韩顺平教育&quot;    &#125;,&#x2F;&#x2F;老师解读:&#x2F;&#x2F; 1. 是一个 methods 属性, 对应的值是对象&#123;&#125;&#x2F;&#x2F; 2. 在&#123;&#125; 中, 可以写很多的方法, 你可以这里理解是一个方法池&#x2F;&#x2F; 3. 这里需要小伙伴有 js 的基础&#x3D;&gt;java web 第 4 章    methods: &#123;      sayHi() &#123;        console.log(&quot;hi, 银角大王~&quot;);      &#125;, sayOk() &#123;        console.log(&quot;ok, 金角大王~&quot;);      &#125;    &#125;  &#125;) &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件渲染-控制-v-if-v-show"><a href="#条件渲染-控制-v-if-v-show" class="headerlink" title="条件渲染/控制: v-if v-show"></a>条件渲染/控制: v-if v-show</h3><h4 id="v-if-介绍"><a href="#v-if-介绍" class="headerlink" title="v-if 介绍"></a>v-if 介绍</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;&lt;div id&#x3D;&quot;app&quot;&gt;  &lt;!--这里小伙伴还可以看到 checkbox 的 checked 属性的值--&gt;  &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;sel&quot;&gt;是否同意条款[v-if 实现]  &lt;!-- 老师解读 v-if&#x2F;v-else 会根据 返回的值,来决定是否动态创建对应的子组件 &lt;h1&gt;  --&gt;  &lt;h1 v-if&#x3D;&quot;sel&quot;&gt;你同意条款&lt;&#x2F;h1&gt;  &lt;h1 v-else&gt;你不同意条款&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;  &#x2F;&#x2F;为了调试方便, 使用 vm 接收 Vue 实例  let vm &#x3D; new Vue(&#123;    el: &#39;#app&#39;, data: &#123;&#x2F;&#x2F;data 数据池      sel: false    &#125;  &#125;)&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-show-介绍"><a href="#v-show-介绍" class="headerlink" title="v-show 介绍"></a>v-show 介绍</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;&lt;div id&#x3D;&quot;app&quot;&gt;  &lt;!--这里小伙伴还可以看到 checkbox 的 checked 属性的值--&gt;  &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;sel&quot;&gt;是否同意条款[v-show 实现]  &lt;h1 v-show&#x3D;&quot;sel&quot;&gt;你同意条款&lt;&#x2F;h1&gt;  &lt;h1 v-show&#x3D;&quot;!sel&quot;&gt;你不同意条款&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;  &#x2F;&#x2F;为了调试方便, 使用 vm 接收 Vue 实例  let vm &#x3D; new Vue(&#123;    el: &#39;#app&#39;, data: &#123;&#x2F;&#x2F;data 数据池      sel: false    &#125;  &#125;)&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-if-VS-v-show"><a href="#v-if-VS-v-show" class="headerlink" title="v-if VS v-show"></a>v-if VS v-show</h3><p>1.v-if会确保在切换过程中,条件块内的事件监听器和子组件销毁和重建<br>2.v-show机制相对简单,不管初始条件是什么,元素总会被渲染,并且只是对CSS进行切换<br>3.使用建议：如果要频繁地切换，建议使用 v-show ；如果运行时条件很少改变，使用 v-if 较好</p><h3 id="列表循环渲染-v-for"><a href="#列表循环渲染-v-for" class="headerlink" title="列表循环渲染:v-for"></a>列表循环渲染:v-for</h3><p>1.对数组进行遍历<br>·v-for指令需要适用item in items 形式的特殊语法,其中items是源数据数组,而item则是被迭代的数组元素的别名</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;li v-for&#x3D;&quot;item in items&quot; :key&#x3D;&quot;item.message&quot;&gt;&#123;&#123;item.message&#125;&#125;&lt;&#x2F;li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.用 v-for 来遍历一个对象的 property</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;li v-for&#x3D;&quot;value in object&quot;&gt;&#123;&#123;value&#125;&#125;&lt;&#x2F;li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件化编程"><a href="#组件化编程" class="headerlink" title="组件化编程"></a>组件化编程</h2><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><p>1.在大型应用开发的时候,页面可以划分成很多部分,往往不同的页面,也会有相同的部分。例如可能会有相同的头部导航<br>2.但是如果每个页面都独自开发,这无疑增加了我们开发的成本,所以我们会把页面的不同部分拆分成独立的组件,然后在不同页面就可以<br>共享这些组件,避免重复开发。</p><h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>·直接Vue.component</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;&lt;div id&#x3D;&quot;app&quot;&gt;  &lt;h1&gt;组件化编程-全局组件&lt;&#x2F;h1&gt;  &lt;!--使用全局组件--&gt;  &lt;counter&gt;&lt;&#x2F;counter&gt;  &lt;br&#x2F;&gt;  &lt;counter&gt;&lt;&#x2F;counter&gt;  &lt;counter&gt;&lt;&#x2F;counter&gt;  &lt;counter&gt;&lt;&#x2F;counter&gt;  &lt;counter&gt;&lt;&#x2F;counter&gt;&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;app2&quot;&gt;  &lt;h1&gt;组件化编程-全局组件-app2&lt;&#x2F;h1&gt;  &lt;!--使用全局组件--&gt;  &lt;counter&gt;&lt;&#x2F;counter&gt;  &lt;counter&gt;&lt;&#x2F;counter&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;  &#x2F;&#x2F;1、定义一个全局组件, 名称为 counter  &#x2F;&#x2F;2. &#123;&#125; 表示就是我们的组件相关的内容  &#x2F;&#x2F;3. template 指定该组件的界面, 因为会引用到数据池的数据，所以需要是模板字符串  &#x2F;&#x2F;4. 这里说明: 要把组件视为一个Vue实例，也有自己的数据池和methods  &#x2F;&#x2F;5. 这里说明: 对于组件，我们的数据池的数据，是使用函数&#x2F;方法返回[目的是为了保证每个组件的数据是独立], 不能使用原来的方式  &#x2F;&#x2F;6. 这时我们达到目前，界面通过template实现共享,业务处理也复用  &#x2F;&#x2F;7. 全局组件是属于所有vue实例，因此，可以在所有的vue实例使用  Vue.component(&quot;counter&quot;, &#123;    template: &#96;&lt;button v-on:click&#x3D;&quot;click()&quot;&gt;点击次数&#x3D; &#123;&#123;count&#125;&#125; 次【全局组件化】&lt;&#x2F;button&gt;&#96;,    data() &#123;&#x2F;&#x2F;这里需要注意，和原来的方式不一样!!!!      return &#123;        count: 10      &#125;    &#125;,    methods: &#123;      click() &#123;        this.count++;      &#125;    &#125;  &#125;)  &#x2F;&#x2F;创建Vue实例，必须有  let vm &#x3D; new Vue(&#123;    el: &quot;#app&quot;&#x2F;&#x2F;Vue实例的挂载点  &#125;)  let vm2 &#x3D; new Vue(&#123;    el: &quot;#app2&quot;&#x2F;&#x2F;Vue实例的挂载点  &#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="局部组件的方式"><a href="#局部组件的方式" class="headerlink" title="局部组件的方式"></a>局部组件的方式</h3><p>·定义一个组件,然后将其放入Vue对象的components属性中</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;&lt;div id&#x3D;&quot;app&quot;&gt;  &lt;h1&gt;组件化编程-局部组件&lt;&#x2F;h1&gt;  &lt;!--使用局部组件 ,该组件是从挂载到app的vue中的--&gt;  &lt;my_counter&gt;&lt;&#x2F;my_counter&gt;  &lt;br&#x2F;&gt;  &lt;my_counter&gt;&lt;&#x2F;my_counter&gt;  &lt;br&#x2F;&gt;  &lt;my_counter&gt;&lt;&#x2F;my_counter&gt;  &lt;br&#x2F;&gt;&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;app2&quot;&gt;  &lt;h1&gt;组件化编程-局部组件-app2&lt;&#x2F;h1&gt;  &lt;!--使用局部组件 --&gt;  &lt;hsp_counter&gt;&lt;&#x2F;hsp_counter&gt;  &lt;br&#x2F;&gt;  &lt;hsp_counter&gt;&lt;&#x2F;hsp_counter&gt;  &lt;br&#x2F;&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;  &#x2F;&#x2F;定义一个组件, 组件的名称为 buttonCounter  &#x2F;&#x2F;老韩扩展  &#x2F;&#x2F;1. 可以把常用的组件，定义在某个commons.js中 export  &#x2F;&#x2F;2. 如果某个页面需要使用， 直接import  const buttonCounter &#x3D; &#123;    template: &#96;&lt;button v-on:click&#x3D;&quot;click()&quot;&gt;点击次数&#x3D; &#123;&#123;count&#125;&#125; 次【局部组件化】&lt;&#x2F;button&gt;&#96;,    data() &#123;&#x2F;&#x2F;这里需要注意，和原来的方式不一样!!!!      return &#123;        count: 10      &#125;    &#125;,    methods: &#123;      click() &#123;        this.count++;      &#125;    &#125;  &#125;  &#x2F;&#x2F;创建Vue实例，必须有  let vm &#x3D; new Vue(&#123;    el: &quot;#app&quot;,&#x2F;&#x2F;Vue实例的挂载点    components: &#123; &#x2F;&#x2F;引入&#x2F;注册某个组件, 此时my_counter就是一个组件, 是一个局部组件,他的使用范围在当前vue      &#39;my_counter&#39;: buttonCounter    &#125;  &#125;)  let vm2 &#x3D; new Vue(&#123;    el: &quot;#app2&quot;,&#x2F;&#x2F;Vue实例的挂载点    components: &#123;&#x2F;&#x2F;引入&#x2F;注册组件buttonCounter      &#39;hsp_counter&#39;: buttonCounter    &#125;  &#125;)&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生命周期和监听函数-钩子函数"><a href="#生命周期和监听函数-钩子函数" class="headerlink" title="生命周期和监听函数(钩子函数)"></a>生命周期和监听函数(钩子函数)</h2><h3 id="基本说明-1"><a href="#基本说明-1" class="headerlink" title="基本说明"></a>基本说明</h3><p>1.Vue实例有一个完整的生命周期,也就是说从开始创建,初始化数据,编译模板,挂载DOM,渲染-更新-渲染,卸载等一系列过程<br>2.钩子函数(监听函数): Vue 实例在完整的生命周期过程中(比如设置数据监听、编译模板、将实例挂载到 DOM 、在数据变化时更新 DOM<br>等),<br>也会运行叫做生命周期钩子的函数。<br>3.钩子函数的 作用就是在某个阶段, 给程序员一个做某些处理的机会</p><h3 id="一图胜千言"><a href="#一图胜千言" class="headerlink" title="一图胜千言"></a>一图胜千言</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/7caac0ab30865c9307c95a4f81289af6.png"></div></div><p>1.new Vue()<br>new 了一个 Vue 的实例对象，此时就会进入组件的创建过程<br>2.beforeCreate<br>组件创建之后遇到的第一个生命周期函数，这个阶段 data 和 methods 以及dom结构都未被初始化，也就是获取不到 data 的值，<br>不能调用 methods 中的函<br>3.created<br>这个阶段组件的 data 和 methods 中的方法已初始化结束，可以访问，但是 dom 结构未初始化，页面未渲染<br>说明：在这个阶段，经常会发起 Ajax 请求<br>4.beforeMount<br>当模板在内存中编译完成，此时内存中的模板结构还未渲染至页面上，看不到真实的数据<br>5.mounted<br>此时，页面渲染好，用户看到的是真实的页面数据， 生命周期创建阶段完毕，进入到了运行中的阶段<br>6.beforeUpdate<br>当执行此函数，数据池的数据新的，但是页面是旧<br>7.updated<br>页面已经完成了更新，此时，data 数据和页面的数据都是新的</p><h2 id="Vue2脚手架模块化开发"><a href="#Vue2脚手架模块化开发" class="headerlink" title="Vue2脚手架模块化开发"></a>Vue2脚手架模块化开发</h2><h3 id="为什么需要-Vue-Cli-脚手架"><a href="#为什么需要-Vue-Cli-脚手架" class="headerlink" title="为什么需要 Vue Cli 脚手架"></a>为什么需要 Vue Cli 脚手架</h3><p>·开发效率低<br>·不够规范<br>·维护和升级, 可读性比较差</p><h3 id="Vue项目结果分析"><a href="#Vue项目结果分析" class="headerlink" title="Vue项目结果分析"></a>Vue项目结果分析</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/0b8f221e94cb4845d5760dd747e42332.png"></div></div><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;new Vue(&#123;  el: &quot;#app&quot;,  data: &#123;    msg: &quot;妖怪信息列表&quot;,    monsterList: [] &#x2F;&#x2F;表示妖怪的信息数组  &#125;,  methods: &#123;&#x2F;&#x2F;自定义方法    list() &#123;&#x2F;&#x2F;发送ajax请求,获取数据 axios      &#x2F;*          解读          1. axios.get() 表示发出ajax请求          2. http:&#x2F;&#x2F;localhost:63342&#x2F;axios&#x2F;data&#x2F;response.data.json 表示请求的url             要根据实际情况来填写          3. axios发出ajax请求的基本语法             axios.get(url).then(箭头函数).then(箭头函数)...catch(箭头函数)             (1) 如果get请求成功就进入到第一个then()             (2) 可以再 第一个then()中继续发出axios的ajax请求             (3) 如果有异常, 会进入到 catch(箭头函数)          4. list在生命周期函数created() 中调用-自己去回顾vue的生命周期函数       *&#x2F;      axios.get(&quot;http:&#x2F;&#x2F;localhost:63342&#x2F;axios&#x2F;data&#x2F;response.data.json&quot;)          .then(responseData &#x3D;&gt; &#123;            console.log(&quot;responseData&#x3D; &quot;, responseData)            &#x2F;&#x2F;使用JSON.stringify(json) 把json对象转成一个字符串,方便观察            console.log(&quot;responseData&#x3D; &quot;, JSON.stringify(responseData));            &#x2F;&#x2F; console.log(&quot;responseData.data&#x3D; &quot;, responseData.data)            &#x2F;&#x2F; console.log(&quot;responseData.data.data&#x3D; &quot;, responseData.data.data)            console.log(&quot;responseData.data.data.item&#x3D; &quot;, responseData.data.data.items)            &#x2F;&#x2F;将妖怪列表数组信息, 绑定到 data数据池的 monsterList            &#x2F;&#x2F;老师小技巧，一定要学会看返回的数据格式!!!            this.monsterList &#x3D; responseData.data.data.items;            &#x2F;&#x2F;可以再次发出ajax请求, 老师故意发出了第二次ajax请求， 回顾老师讲过的promise发出多次请求            &#x2F;&#x2F; return axios.get(&quot;http:&#x2F;&#x2F;localhost:63342&#x2F;axios&#x2F;data&#x2F;response.data.json&quot;)          &#125;)          &#x2F;&#x2F; .then(responseData &#x3D;&gt; &#123;          &#x2F;&#x2F;     console.log(&quot;第二次axios发出 ajax请求responseData&#x3D; &quot;, responseData)          &#x2F;&#x2F; &#125;)          .catch(err &#x3D;&gt; &#123;            console.log(&quot;异常&#x3D;&quot;, err)          &#125;)    &#125;  &#125;,  created() &#123;    this.list();  &#125;&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;Vue2复习and预习 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;VUE的MVVM&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="Vue框架" scheme="https://100qin10086.github.io/categories/Vue%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="VUE" scheme="https://100qin10086.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb复习6</title>
    <link href="https://100qin10086.github.io/posts/b1a728b5.html"/>
    <id>https://100qin10086.github.io/posts/b1a728b5.html</id>
    <published>2024-03-19T03:25:47.000Z</published>
    <updated>2024-04-02T07:07:50.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>javaWeb复习 </p></div></h1><h2 id="数据交换和异步请求-JSON-amp-Ajax"><a href="#数据交换和异步请求-JSON-amp-Ajax" class="headerlink" title="数据交换和异步请求 -JSON &amp; Ajax"></a>数据交换和异步请求 -JSON &amp; Ajax</h2><h3 id="JSON介绍"><a href="#JSON介绍" class="headerlink" title="JSON介绍"></a>JSON介绍</h3><p>1.JSON指地是JavaScript对象表示法<br>2.JSON是轻量级地文本数据交换格式<br>3.JSON独立于语言<br>4.JSON具有自我描述性</p><h3 id="JSON快速入门"><a href="#JSON快速入门" class="headerlink" title="JSON快速入门"></a>JSON快速入门</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myJson <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"key1"</span><span class="token operator">:</span> <span class="token string">"韩顺平教育"</span><span class="token punctuation">,</span> <span class="token comment">// 字符串</span>    <span class="token string-property property">"key2"</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token comment">// Number "key3":[1,"hello", 2.3], // 数组</span>    <span class="token string-property property">"key4"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"age"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"jack"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">//json 对象</span>    <span class="token string-property property">"key5"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">//json 数组</span>        <span class="token punctuation">&#123;</span><span class="token string-property property">"k1"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string-property property">"k2"</span><span class="token operator">:</span> <span class="token string">"milan"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token string-property property">"k3"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string-property property">"k4"</span><span class="token operator">:</span> <span class="token string">"smith"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.映射地集合(对象)用大括号{}表示。<br>2.并列地数据地集合(数组)用方括号[]表示</p><h3 id="JSON对象和字符串对象转换"><a href="#JSON对象和字符串对象转换" class="headerlink" title="JSON对象和字符串对象转换"></a>JSON对象和字符串对象转换</h3><p>1.JSON.stringify(json)功能:将一个json对象转换成为json字符串<br>2.JSON.parse(jsonString)功能:将一个json字符串转换为json对象</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> jsonObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"秦国强"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span>        <span class="token keyword">var</span> jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span>        <span class="token keyword">var</span> jsonObj2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonObj2<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>// Object &#123; name: "秦国强", age: 10 &#125;//&#123;"name":"秦国强","age":10&#125;// Object &#123; name: "秦国强", age: 10 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON在Java中的使用"><a href="#JSON在Java中的使用" class="headerlink" title="JSON在Java中的使用"></a>JSON在Java中的使用</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>1.java 中使用 json，需要引入到第 3 方的包 gson.jar。<br>2.Gson 是 Google 提供的用来在 Java 对象和 JSON 数据之间进行映射的 Java 类库。<br>3.可以对 JSON 字符串 和 Java 对象相互转换</p><h4 id="JSON在Java中应用场景"><a href="#JSON在Java中应用场景" class="headerlink" title="JSON在Java中应用场景"></a>JSON在Java中应用场景</h4><p>1.JavaBean对象和json字符串地转换<br>2.List对象和json字符串地转换<br>3.map对象和json字符串地转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"西游记"</span><span class="token punctuation">)</span><span class="token class-name">String</span> bookStr <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bookStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Book</span> book2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>bookStr<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//List 集合和 json 的转换</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> bookList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bookList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"天龙八部"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bookList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token string">"神雕侠侣"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 list 转成 json 字符串</span><span class="token class-name">String</span> bookListStr <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>bookList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 json 字符串转成 List 集合方式 2- 使用 匿名内部类</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> bookList3 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>bookListStr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3. map 集合和 json 的转换</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n====3. map 集合和 json 的转换====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">></span></span> bookMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bookMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sn1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"射雕英雄传"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bookMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sn2"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"碧血剑"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把 map 转换成为 json</span><span class="token class-name">String</span> bookMapStr <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>bookMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">></span></span> bookMap2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>bookMapStr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HashMap</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Book</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="Ajax基本介绍"><a href="#Ajax基本介绍" class="headerlink" title="Ajax基本介绍"></a>Ajax基本介绍</h3><p>1.Ajax是一种浏览器异步发起请求(指定发那些数据),局部更新页面地技术</p><h3 id="原理示意图"><a href="#原理示意图" class="headerlink" title="原理示意图"></a>原理示意图</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1710844435346.jpg"></div></div><h3 id="javascript原生Ajax请求"><a href="#javascript原生Ajax请求" class="headerlink" title="javascript原生Ajax请求"></a>javascript原生Ajax请求</h3><p>1.创建XMLHttpRequest对象【ajax引擎对象】<br>2.通过XMLHttpRequest对象发送指定数据(异步)<br>3.XMLHttpRequest指定当数据返回时,由那个函数来处理<br>4.得到返回数据后,可以进行dom操作,完成局部刷新/页面/数据<br>5.原生Ajax代码演示<br>·关键地几步<br>·创建XMLHttpRequest<br>·xmlHttpRequest.open(“method”,”url”,”true/false”)<br>·xmlHttpRequest.onreadystatechange=function(){},当数据发生变化时,会调用该方法<br>·xmlHttpRequest.send()真正的发送ajax请求[http请求]<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//页面加载后执行function</span>            <span class="token keyword">var</span> checkButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"checkButton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//给checkButton绑定onclick</span>            checkButton<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//1. 创建XMLHttpRequest对象(!!!) [ajax引擎对象]</span>                <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//   获取用户填写的用户名</span>                <span class="token keyword">var</span> uname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token comment">//2. 准备发送指定数据 open, send</span>                <span class="token comment">//老韩解读</span>                <span class="token comment">//(1)"GET" 请求方式可以 GET/POST</span>                <span class="token comment">//(2)"/ajax/checkUserServlet?username=" + uname 就是 url</span>                <span class="token comment">//(3)true , 表示异步发送</span>                xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/ajax/checkUserServlet?uname="</span> <span class="token operator">+</span> uname<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//老师说明，在send函数调用前，给XMLHttpRequest 绑定一个事件onreadystatechange</span>                <span class="token comment">//该事件表示，可以去指定一个函数，当数据变化，会触发onreadystatechange</span>                <span class="token comment">// 每当 xhr对象readyState 改变时，就会触发 onreadystatechange 事件</span>                xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//如果请求已完成，且响应已就绪, 并且状态码是200</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//把返回的jon数据,显示在div</span>                        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>                        <span class="token comment">//console.log("xhr=", xhr)</span>                        <span class="token keyword">var</span> responseText <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>                        <span class="token comment">//console.log("返回的信息=" + responseText);</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>responseText <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myres"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"用户名不可用"</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myres"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"用户名可用"</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//3. 真正的发送ajax请求[http请求]</span>                <span class="token comment">// 再说明如果你POST 请求，再send("发送的数据")</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="原生Ajax请求问题分析"><a href="#原生Ajax请求问题分析" class="headerlink" title="原生Ajax请求问题分析"></a>原生Ajax请求问题分析</h3><p>1.编写原生的Ajax要写很多的代码,还要考虑浏览器兼容问题,使用很不方便<br>2.在实际工作中,一般使用JavaScript的库发送Ajax请求,从而解决这个问题</p><h3 id="JQuery的Ajax请求-代码演示"><a href="#JQuery的Ajax请求-代码演示" class="headerlink" title="JQuery的Ajax请求-代码演示"></a>JQuery的Ajax请求-代码演示</h3><p>·解读<br>1.指定参数时,需要在{}<br>2.给参数时,前面需要指定参数名<br>3.dataType: “json” 要求服务器返回的数据格式是json/text<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"/xxxxx"</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>            <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#uname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>status<span class="token punctuation">,</span>xhr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"data="</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"status="</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xhr="</span><span class="token punctuation">,</span> xhr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//对返回的结果进行处理</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">==</span> data<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myres"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"该用户名可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myres"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"该用户名不可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="线程数据共享和安全-ThreadLocal"><a href="#线程数据共享和安全-ThreadLocal" class="headerlink" title="线程数据共享和安全-ThreadLocal"></a>线程数据共享和安全-ThreadLocal</h2><h3 id="什么是ThreadLocal"><a href="#什么是ThreadLocal" class="headerlink" title="什么是ThreadLocal"></a>什么是ThreadLocal</h3><p>1.ThreadLocal的作用,可以实现在同一个线程数据共享,从而解决多线程数据安全问题。<br>2.ThreadLocal可以给当前线程关联一个数据(普通变量,对象,数组)set方法<br>3.ThreadLocal可以像Map一样存取数据,key是当前线程,get方法<br>4.每一个ThreadLocal对象,只能为当前线程关联一个数据,如果要为当前线程关联多个数据,就需要使用多个ThreadLocal对象实例。<br>5.每个ThreadLocal对象实例定义的时候,一般为static类型<br>6.ThreadLocal中保存数据,在线程销毁后,会自动释放。</p><h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//set方法的源码</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.获取当前线程,关联到当前线程</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.通过线程对象,获取到ThreadLocalMap</span>        <span class="token comment">//ThreadLocalMap 类型ThreadLocal.ThreadLocalMap</span>        <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token comment">//3.如果map不为null,将数据(dog，pig..)放入map-key:threadLocal value:存放的数据</span>        <span class="token comment">//  从这个源码我们看出一个threadlocal只能关联一个数据</span>        <span class="token comment">//4.如果map为null,就创建一个和当前线程关联的ThreadLocalMap,并且该数据放入</span>            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//get方法的源码</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1.获取当前线程,关联到当前线程</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过线程获取到对应的ThreadLocalMap</span>        <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3.如果map不为空,就根据当前的ThreadLocal对象,得到对应的Entry</span>            <span class="token class-name">ThreadLocalMap<span class="token punctuation">.</span>Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.如果e不为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                <span class="token comment">//返回当前ThreadLocal对应的value</span>                <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件的上传下载"><a href="#文件的上传下载" class="headerlink" title="文件的上传下载"></a>文件的上传下载</h2><h3 id="文件上传注意"><a href="#文件上传注意" class="headerlink" title="文件上传注意"></a>文件上传注意</h3><p>1.文件上传还是按照表单提交<br>2.action还是不变<br>3.method指定为post<br>4.enctype:enctype编码类型默认是application/x-www-urlencoded即url编码,这种编码不适用二进制文件数据的提交,一般适用文本<br>5.如果要提交二进制文件enctype要指定multipart/form-data<br>·后端代码部分<br>1.首先用ServletFileUpload.isMultipartContent通过传入的request判断传入的是不是文件表单<br>2.然后创建DiskFileItemFactory对象,用于构建一个解析上传数据的工具对象<br>3.ServletFileUpload servletFileUpload = new ServletFileUpload(diskFileItemFactory);<br>4.通过servletFileUpload.parseRequest(request)得到传入的对象<br>5.找目录,修改文件名最后保存<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUploadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//System.out.println("FileUploadServlet 被调用...");</span>        <span class="token comment">//1. 判断是不是文件表单(enctype="multipart/form-data")</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ServletFileUpload</span><span class="token punctuation">.</span><span class="token function">isMultipartContent</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//System.out.println("OK");</span>            <span class="token comment">//2. 创建 DiskFileItemFactory 对象, 用于构建一个解析上传数据的工具对象</span>            <span class="token class-name">DiskFileItemFactory</span> diskFileItemFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3. 创建一个解析上传数据的工具对象</span>            <span class="token comment">/**             *     表单提交的数据就是 input 元素             *     &lt;input type="file" name="pic" id="" value="2xxx.jpg" onchange="prev(this)"/>             *     家居名: &lt;input type="text" name="name">&lt;br/>             *     &lt;input type="submit" value="上传"/>             */</span>            <span class="token class-name">ServletFileUpload</span> servletFileUpload <span class="token operator">=</span>                    <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>diskFileItemFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//解决接收到文件名是中文乱码问题</span>            servletFileUpload<span class="token punctuation">.</span><span class="token function">setHeaderEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4. 关键的地方, servletFileUpload 对象可以把表单提交的数据text / 文件</span>            <span class="token comment">//   将其封装到 FileItem 文件项中</span>            <span class="token comment">//   编程心得体会: 如果我们不知道一个对象是什么结构[1.输出 2.debug 3. 底层自动看到]</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileItem</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> servletFileUpload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/*                list==>                [name=3.jpg, StoreLocation=D:\hspedu_javaweb\apache-tomcat-8.0.50-windows-x64\apache-tomcat-8.0.50\temp\xupload__7e34374f_17fce4168b1__7f4b_00000000.tmp, size=106398bytes, isFormField=false, FieldName=pic,                name=null, StoreLocation=D:\hspedu_javaweb\apache-tomcat-8.0.50-windows-x64\apache-tomcat-8.0.50\temp\xupload__7e34374f_17fce4168b1__7f4b_00000001.tmp, size=6bytes, isFormField=true, FieldName=name]                 */</span>                <span class="token comment">//System.out.println("list==>" + list);</span>                <span class="token comment">//遍历，并分别处理=> 自然思路</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileItem</span> fileItem <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//System.out.println("fileItem=" + fileItem);</span>                    <span class="token comment">//判断是不是一个文件=> 你是OOP程序员</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileItem<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果是true就是文本 input text</span>                        <span class="token class-name">String</span> name <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"家具名="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//是一个文件</span>                        <span class="token comment">//用一个方法</span>                        <span class="token comment">//获取上传的文件的名字</span>                        <span class="token class-name">String</span> name <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的文件名="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//把这个上传到 服务器的 temp下的文件保存到你指定的目录</span>                        <span class="token comment">//1.指定一个目录 , 就是我们网站工作目录下</span>                        <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">"/upload/"</span><span class="token punctuation">;</span>                        <span class="token comment">//2. 获取到完整目录 [io/servlet基础]</span>                        <span class="token comment">//  这个目录是和你的web项目运行环境绑定的. 是动态.</span>                        <span class="token comment">//fileRealPath=D:\hspedu_javaweb\fileupdown\out\artifacts\fileupdown_war_exploded\xupload\</span>                        <span class="token class-name">String</span> fileRealPath <span class="token operator">=</span>                                request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fileRealPath="</span> <span class="token operator">+</span> fileRealPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//3. 创建这个上传的目录=> 创建目录?=> Java基础</span>                        <span class="token comment">//   我们也一个工具类，可以返回 /2024/11/11 字符串</span>                        <span class="token class-name">File</span> fileRealPathDirectory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileRealPath <span class="token operator">+</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getYearMonthDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileRealPathDirectory<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//不存在，就创建</span>                            fileRealPathDirectory<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">//4. 将文件拷贝到fileRealPathDirectory目录</span>                        <span class="token comment">//   构建一个上传文件的完整路径 ：目录+文件名</span>                        <span class="token comment">//   对上传的文件名进行处理, 前面增加一个前缀，保证是唯一即可, 不错</span>                        name <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>                        <span class="token class-name">String</span> fileFullPath <span class="token operator">=</span> fileRealPathDirectory <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span>name<span class="token punctuation">;</span>                        fileItem<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileFullPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//5. 提示信息</span>                        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"上传成功~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是文件表单..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="文件下载代码"><a href="#文件下载代码" class="headerlink" title="文件下载代码"></a>文件下载代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDownloadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FileDownloadServlet 被调用..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1. 先准备要下载的文件[假定这些文件是公共的资源]</span>        <span class="token comment">//   重要: 保证当我们的tomcat启动后，在工作目录out下有download文件夹, 并且有可供下载的文件!!</span>        <span class="token comment">//   老师再次说明，如果你没有看到你创建的download在工作目录out下 rebuild project -> restart, 就OK</span>        <span class="token comment">//2. 获取到要下载的文件的名字</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> downLoadFileName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println("downLoadFileName= " + downLoadFileName);</span>        <span class="token comment">//3. 给http响应，设置响应头 Content-Type , 就是文件的MIME</span>        <span class="token comment">//   通过servletContext 来获取</span>        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> downLoadPath <span class="token operator">=</span> <span class="token string">"/download/"</span><span class="token punctuation">;</span> <span class="token comment">//下载目录从 web工程根目录计算 /download/1.jpg</span>        <span class="token class-name">String</span> downLoadFileFullPath <span class="token operator">=</span> downLoadPath <span class="token operator">+</span> downLoadFileName<span class="token punctuation">;</span>        <span class="token class-name">String</span> mimeType <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>downLoadFileFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mimeType= "</span> <span class="token operator">+</span> mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4. 给http响应，设置响应头 Content-Disposition</span>        <span class="token comment">//   这里考虑的细节比较多，比如不同的浏览器写法不一样，考虑编码</span>        <span class="token comment">//   ff 是 文件名中文需要 base64, 而 ie/chrome 是 URL编码</span>        <span class="token comment">//   这里我们不需要同学们记住，只需知道原理</span>        <span class="token comment">//(1)如果是Firefox 则中文编码需要 base64</span>        <span class="token comment">//(2)Content-Disposition 是指定下载的数据的展示形式 , 如果attachment 则使用文件下载方式</span>        <span class="token comment">//(3)如果是其他(主流ie/chrome) 中文编码使用URL编码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Firefox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 火狐 Base64编码</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename==?UTF-8?B?"</span> <span class="token operator">+</span>                    <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>downLoadFileName<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"?="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 其他(主流ie/chrome)使用URL编码操作</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename="</span> <span class="token operator">+</span>                    <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>downLoadFileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//5. 读取下载的文件数据，返回给客户端/浏览器</span>        <span class="token comment">//(1) 创建一个和要下载的文件，关联的输入流</span>        <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span>                servletContext<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>downLoadFileFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//(2) 得到返回数据的输出流 [因为返回文件大多数是二进制(字节), IO java基础]</span>        <span class="token class-name">ServletOutputStream</span> outputStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//(3) 使用工具类，将输入流关联的文件，对拷到输出流，并返回给客户端/浏览器</span>        <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;javaWeb复习 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;数据交换和异步请求-JSON-am</summary>
      
    
    
    
    <category term="javaWeb" scheme="https://100qin10086.github.io/categories/javaWeb/"/>
    
    
    <category term="javaWeb" scheme="https://100qin10086.github.io/tags/javaWeb/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb复习5</title>
    <link href="https://100qin10086.github.io/posts/28ae790f.html"/>
    <id>https://100qin10086.github.io/posts/28ae790f.html</id>
    <published>2024-03-18T08:03:17.000Z</published>
    <updated>2024-04-02T07:07:50.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>javaWeb复习 </p></div></h1><h2 id="JavaWeb三大组件之监听器-Listener"><a href="#JavaWeb三大组件之监听器-Listener" class="headerlink" title="JavaWeb三大组件之监听器 Listener"></a>JavaWeb三大组件之监听器 Listener</h2><h3 id="Listener监听器介绍"><a href="#Listener监听器介绍" class="headerlink" title="Listener监听器介绍"></a>Listener监听器介绍</h3><p>·监听器的作用是,监听某种变化(一般就是对象创建/销毁,属性变化),触发对应方法完成相应的任务<br>·JavaWeb中的监听器(共八个),目前最常用的是ServletContextListener。</p><h3 id="JavaWeb监听器"><a href="#JavaWeb监听器" class="headerlink" title="JavaWeb监听器"></a>JavaWeb监听器</h3><p>·ServletContextListener监听器<br>1.作用:监听ServletContext创建和销毁(当我们Web应用启动时,就会创建ServletContext),即生命周期监听<br>2.相关方法:<br>void contextInitialized(ServletContextEvent sce) 创建ServletContext时触发<br>void contextDestroyed(ServletContextEvent sce) 销毁ServletContext时触发<br>3.实例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletContextListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ServletContext 创建，完成 WEB 项目初始化的工作.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ServletContext 销毁, 完成资源回收工作.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>配置web<span class="token punctuation">.</span>xml<span class="token generics"><span class="token punctuation">&lt;</span>linstener<span class="token punctuation">></span></span>      <span class="token operator">&lt;</span>linstener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>linstener<span class="token punctuation">.</span></span>MyServletContextListener</span><span class="token operator">&lt;</span><span class="token operator">/</span>linstener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>linstener<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·ServletContextAttributeListener监听器<br>1.作用:监听ServletContext属性变化<br>2.相关方法<br>void attributeAdded(ServletContextAttributeEvent event) 添加属性时调用<br>void attributeReplaced(ServletContextAttributeEvent event) 替换属性时调用<br>void attributeRemoved(ServletContextAttributeEvent event) 移除属性时调用<br>3.实例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletContextAttributeListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextAttributeListener</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span><span class="token class-name">ServletContextAttributeEvent</span> servletContextAttributeEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加了 servletContext 属性名= "</span> <span class="token operator">+</span> servletContextAttributeEvent<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 属 性 值 ="</span> <span class="token operator">+</span>servletContextAttributeEvent<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span><span class="token class-name">ServletContextAttributeEvent</span> servletContextAttributeEvent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了 servletContext属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span><span class="token class-name">ServletContextAttributeEvent</span> servletContextAttributeEvent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"替换了 servletContext 属性 "</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>     <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>     <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>     <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token string">"k1_value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·HttpSessionListener 监听器<br>1.作用：监听 Session 创建或销毁，即生命周期监听<br>2.相关方法<br>void sessionCreated(HttpSessionEvent se)创建session时调用<br>void sessionDestroyed(HttpSessionEvent se) 销毁session时调用<br>3.使用方法和前面一样,可以用于监控用户上线,离线<br>·HttpSessionAttributeListener<br>1.作用:监听Request创建或销毁,即Request生命周期监听<br>2.相关方法<br>·void requestInitialized(ServletRequestEvent sre) 创建 request 时<br>·void requestDestroyed(ServletRequestEvent sre) 销毁 request 时<br>3.可以用来监控,某个IP访问我们网站的频率,日志记录,访问资源的情况<br>·ServletRequestAttributeListener 监听器<br>1.作用:监听Request属性变化<br>2.相关方法<br>·void attributeAdded(ServletRequestAttributeEvent srae) 添加属性时<br>·void attributeReplaced(ServletRequestAttributeEvent srae) 替换属性时<br>·void attributeRemoved(ServletRequestAttributeEvent srae)移除属性时</p><h2 id="JavaWeb三大组件之过滤器Filter"><a href="#JavaWeb三大组件之过滤器Filter" class="headerlink" title="JavaWeb三大组件之过滤器Filter"></a>JavaWeb三大组件之过滤器Filter</h2><h3 id="过滤器介绍"><a href="#过滤器介绍" class="headerlink" title="过滤器介绍"></a>过滤器介绍</h3><p>1.Filter过滤器它的作用是:拦截请求,过滤响应<br>2.应用场景<br>·权限检查<br>·日记操作<br>·事务管理</p><h3 id="Filter过滤器基本原理"><a href="#Filter过滤器基本原理" class="headerlink" title="Filter过滤器基本原理"></a>Filter过滤器基本原理</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/e80e1db130b5e0343c540b585b9ee0d2.png"></div></div><h3 id="Filter过滤器基本实例"><a href="#Filter过滤器基本实例" class="headerlink" title="Filter过滤器基本实例"></a>Filter过滤器基本实例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ManageFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filte</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====ManageFilter init()被调用..===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====ManageFilter doFilter()被调用===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpServletRequest</span> httpServletRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>    <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取 session 对象的 user 属性</span>    <span class="token class-name">Object</span> user <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         servletRequest<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>          <span class="token comment">// 通过了, 继续</span>         filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在web.xml配置过滤器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filters</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>ManageFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.qgq.servlet.ManageFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>ManageFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 老韩解读(重要)        1. url-pattern 配置拦截路径 /manage/*        2. 第 1 个 / 被服务器解析为：http://ip:port/工程路径/        3. /manage/* 表示：http://ip:port/工程路径/manage/* 所有资源请求都经过该过        滤器        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/manage/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filters</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Filter过滤器url-pattern"><a href="#Filter过滤器url-pattern" class="headerlink" title="Filter过滤器url-pattern"></a>Filter过滤器url-pattern</h3><p>1.url-pattern:Filter的拦截路径,即浏览器在请求生命位置的资源时,过滤器会进行拦截过滤<br>2.精确匹配 <url-pattern>/a.jsp&lt;/url-pattern&gt; 对应的 请求地址 <a href="http://ip[域名]:port/工程路径/a.jsp会拦截">http://ip[域名]:port/工程路径/a.jsp会拦截</a><br>3.目录匹配目录匹配 <url-pattern>/manage/*&lt;/url-pattern&gt;对应的 请求地址 <a href="http://ip[域名]:port/工程路径/manage/xx,即">http://ip[域名]:port/工程路径/manage/xx,即</a><br>web工程manage目录下所有资源会拦截。<br>4.Filter 过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在</url-pattern></url-pattern></p><h3 id="Filter过滤器生命周期"><a href="#Filter过滤器生命周期" class="headerlink" title="Filter过滤器生命周期"></a>Filter过滤器生命周期</h3><p>1.当web工程启动时,会执行构造器和init方法<br>2.如果匹配到Filter的url-pattern<br>3.doFilter()方法就会被调用<br>4.停止web工程时,销毁Filter实例,会调用destory()</p><h3 id="FilterConfig说明"><a href="#FilterConfig说明" class="headerlink" title="FilterConfig说明"></a>FilterConfig说明</h3><p>1.FilterConfig是Filter过滤器的配置类<br>2.Tomcat每次创建Filter的时候,也会创建一个FilterConfig对象,这里包含了Filter配置文件的配置信息<br>3.FilterConfig对象作用是获取filter过滤器的配置内容<br>4.实例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filters</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>FilterConfig_<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.hspedu.servlet.FilterConfig_<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 封杀 ip 段 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>ip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>128.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>port<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>8888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>FilterConfig_<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/abc/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filters</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfig_</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器名= "</span> <span class="token operator">+</span> filterConfig<span class="token punctuation">.</span><span class="token function">getFilterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器 ip= "</span> <span class="token operator">+</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到 servletContext= "</span> <span class="token operator">+</span> filterConfig<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FilterChain"><a href="#FilterChain" class="headerlink" title="FilterChain"></a>FilterChain</h3><p>1.一句话:FilterChain:在处理某些复杂业务时,一个过滤器不够,可以设计多个过滤器共同完成过滤任务,形成过滤链</p><h4 id="FilterChain注意事项和细节"><a href="#FilterChain注意事项和细节" class="headerlink" title="FilterChain注意事项和细节"></a>FilterChain注意事项和细节</h4><p>1.多个filter和目标资源在一次http请求,在同一个线程<br>2.当一个请求url和filter的url-pattern匹配时,才会被执行,如果有多个匹配上,就会顺序执行,形成一个filter调用链(<br>底层可以使用一个数据结构搞定)<br>3.多个filter共同执行时,因为是一次http请求,使用同一个request对象<br>4.多个filter执行顺序,和web.xml配置顺序保存一致<br>5.chain.doFilter(req,resp)方法,将执行下一个过滤器的doFilter方法,如果后面没有过滤器,则执行目标资源</p><h2 id="JavaScript开发利器之Jquery"><a href="#JavaScript开发利器之Jquery" class="headerlink" title="JavaScript开发利器之Jquery"></a>JavaScript开发利器之Jquery</h2><h3 id="Jquery基本介绍"><a href="#Jquery基本介绍" class="headerlink" title="Jquery基本介绍"></a>Jquery基本介绍</h3><p>1.jQuery是一个快速的,简洁的javaScript库,使用户能更方便处理HTML,CSS,dom<br>2.提供方法,events,选择器,并且方便地为网站提供AJAX交互</p><h3 id="JQuery基本开发步骤"><a href="#JQuery基本开发步骤" class="headerlink" title="JQuery基本开发步骤"></a>JQuery基本开发步骤</h3><p>·使用script引入jQuery库文件即可使用<br>·<script type="text/javascript" src="./script/jquery-3.6.0.min.js"></script></p><h3 id="jQuery对象和DOM对象"><a href="#jQuery对象和DOM对象" class="headerlink" title="jQuery对象和DOM对象"></a>jQuery对象和DOM对象</h3><p>1.jQuery对象就是对DOM对象进行包装后产生地对象<br>·比如:$(“#test”).html() 意思是指:获取ID为test地元素内地html代码,其中html()是jQuery里地方法<br>·这段代码等同于用DOM实现代码:document.getElementById(“id”).innerHTML;<br>2.约定：如果获取的是 jQuery 对象, 那么要在变量前面加上 $ , 比如:<br>·var $variable :jQuery 对象<br>·var variable : DOM对象</p><h3 id="jQuery和DOM相互转换"><a href="#jQuery和DOM相互转换" class="headerlink" title="jQuery和DOM相互转换"></a>jQuery和DOM相互转换</h3><p>1.将DOM对象用$()包裹后就成为了jQuery<br>2.对于jQuery对象使用get(index)来得到响应地DOM对象,因为jQuery对象是一个数组对象</p><h3 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h3><p>1.jQuery选择器是核心,在jQuery中,对事件处理,遍历DMO和Ajax操作都依赖于选择器</p><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><p>1.#id 用法: $(“#myDiv”);返回值单个元素的组成的集合,这个就是直接选择 html 中的 id=”myDiv”<br>2.Element 用法:$(“div”)返回值集合元素,所以 element 其实就是 html 已经定义地标签元素<br>3.class 用法: $(“.myClass”)返回值集合元素,这个标签是直接选择 html 代码中 class=”myClass”的元素或元素组</p><h4 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h4><p>1.用法:$(”form input”);返回值集合元素,在给定的祖先元素下匹配所有后代元素<br>2.用法:$(”form &gt; input”);返回值集合元素,在给定的父元素下匹配所有子元素<br>3.用法: $(”label + input”);返回值集合元素 说明: 匹配所有紧接在 prev 元素后的 next 元素</p><h4 id="由于jQuery地选择器太多了-就不一一写了-只需要能认识就行"><a href="#由于jQuery地选择器太多了-就不一一写了-只需要能认识就行" class="headerlink" title="由于jQuery地选择器太多了,就不一一写了,只需要能认识就行"></a>由于jQuery地选择器太多了,就不一一写了,只需要能认识就行</h4><h3 id="jQuery地DOM操作"><a href="#jQuery地DOM操作" class="headerlink" title="jQuery地DOM操作"></a>jQuery地DOM操作</h3><h4 id="查找节点-修改属性"><a href="#查找节点-修改属性" class="headerlink" title="查找节点,修改属性"></a>查找节点,修改属性</h4><p>1.查找属性节点: 查找到所需要的元素之后, 可以调用 jQuery 对象的 attr() 方法来获取它的各种属性值<br><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//给 button 绑定一个 click 事件</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"../image/1.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"height"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><p>1.创建节点:使用jQuery的工厂函数$():$(html标签);会根据传入的 html标记字符串创建一个jQuery对象,并返回。<br>2.动态创建的新元素节点不会被自动添加到文档中, 而是需要使用其他方法将其插入到文档中<br>3.当创建单个元素时, 需注意闭合标签和使用标准的 XHTML 格式. 例如创建一个</p><p>元素, 可以使用 $("</p><p>") 或 $("</p><p></p>“), 但不能使用 $(“<p>“) 或 $(“&lt;/P&gt;”)。<br><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//*****添加重庆 li 到 上海下</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//jquery 方法</span><span class="token comment">//有两种方法 ： 一步到位********</span><span class="token comment">// $myli = $("&lt;li id='cq' name='chongqing'>重庆&lt;/li>");</span><span class="token comment">// //先使用内部插入</span><span class="token comment">// //$('#id').append($myli) :表示 在 $('#id')对象内部后面添加一个 $myli 对象</span><span class="token comment">// $('#sh').append($myli);</span>        $myli <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;li>&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $myli<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"重庆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;li>重庆&lt;/li></span>        $myli<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"cq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&lt;li id='cq'>重庆&lt;/li></span>        $myli<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"chongqing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把$myli 添加到上海</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$myli<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 表示 在 $('#sh')对象内部后面添加一个 $myli 对象</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//jqury 方法</span>        $myli <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;li id='cd' name='chengdu'>成都&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#city'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span>$myli<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//$myli.prependTo($('#city'));</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#b4'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//使用外部插入</span><span class="token comment">//一步到位</span><span class="token comment">//$("#bj").after("&lt;li id='cd' name='chengdu '>成都&lt;/li>");</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;li id='cd' name='chengdu '>成都&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#bj'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#b5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//使用外部插入, 一步到位</span><span class="token comment">//$("#jl") 对象前面添加 "&lt;li id='cd' name='chengdu '>成都&lt;/li>";</span>        <span class="token keyword">var</span> $cd <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;li id='cd' name='chengdu'>成都&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//$("#jl").before($cd);</span>        $cd<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#jl'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>1.remove(): 从 DOM 中删除所有匹配的元素, 传入的参数用于根据jQuery表达式来筛选元素,当某个节点用 remove() 方法删除后,<br>该节点所包含的所有后代节点将被同时删除，这个方法的返回值是一个指向已被删除的节点的引用。<br>2.empty(): 清空节点 – 清空元素中的所有后代节点(不包含属性节点)。</p><h4 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h4><p>1.attr(): 获取属性和设置属性<br>2.attr()传递一个参数时, 即为某元素的获取指定属性<br>3.attr()传递两个参数时, 即为某元素设置指定属性的值<br>4.jQuery 中有很多方法都是一个函数实现获取和设置.如:attr(),html(),text(),val(),height(),width(),css()等<br>5.removeAttr(): 删除指定元素的指定属性<br>6.设置或返回所选元素的内容（包括 HTML 标记）: html()<br>7.读取和设置某个元素中的文本内容: text(). 该方法既可以用于 HTML 也可以用于 XML文档.<br>8.读取和设置某个元素中的值:val()该方法类似JavaScript中的value属性.对于文本框,下拉列表框,单选框该方法可返回元素的值</p><h4 id="常用遍历节点方法"><a href="#常用遍历节点方法" class="headerlink" title="常用遍历节点方法"></a>常用遍历节点方法</h4><p>1、取得匹配元素的所有子元素组成的集合: children()该方法只考虑子元素而不考虑任何后代元素;<br>2、取得匹配元素后面的同辈元素的集合:next()/nextAll();<br>3、取得匹配元素前面的同辈元素的集合:prev()/prevAll();<br>4、取得匹配元素前后所有的同辈元素: siblings();<br>5、获取指定的第几个元素: nextAll().eq(index);</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;javaWeb复习 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;JavaWeb三大组件之监听器-L</summary>
      
    
    
    
    <category term="javaWeb" scheme="https://100qin10086.github.io/categories/javaWeb/"/>
    
    
    <category term="javaWeb" scheme="https://100qin10086.github.io/tags/javaWeb/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb复习4</title>
    <link href="https://100qin10086.github.io/posts/5fa94999.html"/>
    <id>https://100qin10086.github.io/posts/5fa94999.html</id>
    <published>2024-03-14T08:12:17.000Z</published>
    <updated>2024-04-02T07:07:50.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>javaWeb复习 </p></div></h1><h2 id="WEB工程路径"><a href="#WEB工程路径" class="headerlink" title="WEB工程路径"></a>WEB工程路径</h2><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:10000/hspedu_servlet/ok<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    u: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>注册用户<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.根据上面的代码,怎么解决访问资源的问题</p><h4 id="解决方案-相对路径"><a href="#解决方案-相对路径" class="headerlink" title="解决方案:相对路径"></a>解决方案:相对路径</h4><p>1.说明:使用相对路径来解决,一个非常重要的规则:页面所有的相对路径,在默认情况下,都会参考当前浏览器地址栏的路径<a href="http://ip">http://ip</a>:<br>port/工程名/+资源<br>来进行跳转,所以我们可以直接这样写</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    u: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>注册用户<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解决方案-base标签"><a href="#解决方案-base标签" class="headerlink" title="解决方案:base标签"></a>解决方案:base标签</h4><h5 id="base基本介绍"><a href="#base基本介绍" class="headerlink" title="base基本介绍"></a>base基本介绍</h5><p>1.base 标签是 HTML 语言中的基准网址标记，它是一个单标签，位于网页头部文件的 head标签内<br>2.一个页面最多只能使用一个 base 元素，用来提供一个指定的默认目标，是一种表达路径和连接网址的标记<br>3.常见的url路径形式分别有相对路径与绝对路径,如果base标签指定了目标,浏览器将通过这个目标来解析当前文档中的所有相对路径<br>包括的标签有(a,img,link,form)</p><h4 id="WEB工程路径注意事项和细节"><a href="#WEB工程路径注意事项和细节" class="headerlink" title="WEB工程路径注意事项和细节"></a>WEB工程路径注意事项和细节</h4><p>1.在实际开发中,路径都使用绝对路径,而不是相对路径<br>2.在web中/斜杠如果被浏览器解析,得到的地址是:<a href="http://ip[域名]:port/">http://ip[域名]:port/</a><br>3.在web中/斜杠如果被服务器解析,得到的地址是:<a href="http://ip[域名]:port/工程路径/">http://ip[域名]:port/工程路径/</a><br>4.在javaWeb中路径最后带/和不带/含义不同,一定要小心<br>5.特别说明：重定向 response.sendRediect(“/“); 这条语句虽然是在服务器执行的，但是,服务器是把斜杠/发送给浏览器解析。</p><h2 id="WEB开发会话技术-Cookie-amp-Session"><a href="#WEB开发会话技术-Cookie-amp-Session" class="headerlink" title="WEB开发会话技术-Cookie&amp;Session"></a>WEB开发会话技术-Cookie&amp;Session</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>·什么是会话<br>会话可简单理解为:用户开一个浏览器,点击多个超链接,访问服务器多个web资源,然后关闭浏览器,整个过程称之为一个会话<br>·会话过程中要解决的一些问题<br>每个用户在使用浏览器与服务器进行会话的过程中,不可避免各自会产生一些数据,服务器要想办法为每个用户保存这些数据</p><h3 id="会话的两种技术"><a href="#会话的两种技术" class="headerlink" title="会话的两种技术"></a>会话的两种技术</h3><p>·Session<br>·Cookie</p><h3 id="Cookie技术"><a href="#Cookie技术" class="headerlink" title="Cookie技术"></a>Cookie技术</h3><p>·Cookie是客户端技术,服务器把每个用户的数据以cookie的形式写给用户各自的浏览器,当用户使用浏览器再去访问服务器中的web<br>资源时,就会带着各自的数据去,这样,web资源处理的就是用户各自的数据了。<br>·Cookie是服务器在客户端保存用户的信息,比如登录名,浏览历史等<br>·Cookie信息数据量并不大,服务器端在需要的时候可以从客户端/浏览器读取(http协议)<br>·Cookie数据是保存在浏览器的</p><h4 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/278faeb04750246bd5d32f1d1ba4a4ec.png"></div></div><h4 id="cookie-生命周期"><a href="#cookie-生命周期" class="headerlink" title="cookie 生命周期"></a>cookie 生命周期</h4><p>1.Cookie的生命周期指的是如何管理Cookie什么时候被销毁(删除)<br>2.setMaxAge()<br>·正数,表示在指定的秒数后过期<br>·负数,表示浏览器关闭,Cookie就会被删除<br>·0,表示马上删除Cookie</p><h4 id="cookie有效路径Path的设置"><a href="#cookie有效路径Path的设置" class="headerlink" title="cookie有效路径Path的设置"></a>cookie有效路径Path的设置</h4><p>1.Cookie的path属性可以有效的过滤那些Cookie可以发送给服务器,那些不发。path属性是通过请求的地址来进行有效的过滤<br>2.规则如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">cookie1<span class="token punctuation">.</span>setPath<span class="token operator">=</span><span class="token operator">/</span>工程路径cookie1<span class="token punctuation">.</span>setPath<span class="token operator">=</span><span class="token operator">/</span>工程路径<span class="token operator">/</span>aaa请求的地址<span class="token operator">:</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ip<span class="token operator">:</span>端口<span class="token operator">/</span>工程路径<span class="token operator">/</span>资源cookie1会发给服务器cookie2不会发给服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Cookie经典案例-自动填写登录账号"><a href="#Cookie经典案例-自动填写登录账号" class="headerlink" title="Cookie经典案例-自动填写登录账号"></a>Cookie经典案例-自动填写登录账号</h4><p>·要求:需求: 完成自动填写登录账户应用案例 , 如果用户登录成功，则下次登录自动填写登录</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>登录页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>用户登录界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/loginServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    u:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;cookie.get(<span class="token punctuation">"</span></span> <span class="token attr-name">username").value&#125;"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    p:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;cookie.get(<span class="token punctuation">"</span></span> <span class="token attr-name">pwd").value&#125;"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 秦家大胖 * @Date 2024/3/14 0014 17:33 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> pwd <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>login-ok&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Cookie</span> cookieusername <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Cookie</span> cookiepwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>            cookieusername<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cookiepwd<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookieusername<span class="token punctuation">)</span><span class="token punctuation">;</span>            resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookiepwd<span class="token punctuation">)</span><span class="token punctuation">;</span>            resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Session技术"><a href="#Session技术" class="headerlink" title="Session技术"></a>Session技术</h3><p>·Session是服务器端技术,服务器在运行时为每一个用户的浏览器创建一个其独享的session对象/集合<br>·由于session为各个用户浏览器独享,所以用户在访问服务器的不同页面时,可以从各自的session中读取/添加元素,从而完成<br>相应任务</p><h4 id="session基本原理示意图"><a href="#session基本原理示意图" class="headerlink" title="session基本原理示意图"></a>session基本原理示意图</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/0ca682a0a28e381d6613c8076ce68f0d.png"></div></div><p>1.当用户打开浏览器,访问某个网站,操作session,服务器就会在内存(在服务端)为该浏览器分配一个session对象,该session<br>对象被这个浏览器独占。<br>2.这个session对象也可看做是一个容器/集合,session对象默认存在时间为30min,这是在tomcat/conf/web.xml,也可以修改</p><h4 id="session常用方法"><a href="#session常用方法" class="headerlink" title="session常用方法"></a>session常用方法</h4><p>1.创建和获取 Session，API一样<br>HttpSession hs=request.getSession();<br>第1次调用是创建Session会话,之后调用是获取创建好的Session对象<br>2.向session添加属性<br>hs.setAttribute(String name,Object val);<br>3.从session得到某个属性<br>Object obj=hs.getAttribute(String name);<br>4.从 session 删除调某个属性<br>hs.removeAttribute(String name);<br>5.每个Session都有一个唯一表示Id值,通过getId()得到Session的会话id值</p><h4 id="原理分析图"><a href="#原理分析图" class="headerlink" title="原理分析图"></a>原理分析图</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/4271c34589640519fe7021cf5b6b49b7.png"></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/af6b421258bf48a92e108926341bcc17.png"></div></div><h4 id="session生命周期"><a href="#session生命周期" class="headerlink" title="session生命周期"></a>session生命周期</h4><p>1.public void setMaxInactiveInterval(int interval)设置Session的超时时间(以秒为单位),超过指定的时长,Session<br>就会被销毁。<br>·值为正数的时候,设定Session的超时时长<br>·负数表示永不超时<br>2.public void invalidate() 让当前Session会话立即无效<br>3.没有没有调用setMaxInactiveInterval()来指定Session的生命时长,Tomcat会以Session默认时长为准,Session默认的超时为30分<br>4.Session的生命周期指的是:客户端/浏览器两次请求的最大间隔时长,而不是累积时长。即当客户端访问了自己的session,session<br>的生命周期将从0开始重新计算(解读:指的是同一个会话两次请求之间的间隔时间)</p><h4 id="Session经典案例-防止非法进入管理页面"><a href="#Session经典案例-防止非法进入管理页面" class="headerlink" title="Session经典案例-防止非法进入管理页面"></a>Session经典案例-防止非法进入管理页面</h4><p>·需求说明: 完成防止用户登录管理页面应用案例<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>登录页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>用户登录界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/loginCheckServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    u:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;cookie.get(<span class="token punctuation">"</span></span><span class="token attr-name">username").value&#125;"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    p:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;cookie.get(<span class="token punctuation">"</span></span><span class="token attr-name">pwd").value&#125;"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 秦家大胖 * @Date 2024/3/14 0014 18:41 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginCheckServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> pwd <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/manageServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 秦家大胖 * @Date 2024/3/14 0014 18:43 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ManageServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token operator">==</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"管理员登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"禁止直接访问管理员界面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="服务器渲染技术-JSP"><a href="#服务器渲染技术-JSP" class="headerlink" title="服务器渲染技术-JSP"></a>服务器渲染技术-JSP</h2><p>1.目前主流的技术是前后端分离(比如:Spring Boot+Vue/React)<br>2.JSP技术的使用在逐渐减少,但使用少和没有使用是两个意思,一些老项目和中小公司还在使用</p><h3 id="为什么需要jsp"><a href="#为什么需要jsp" class="headerlink" title="为什么需要jsp"></a>为什么需要jsp</h3><p>·程序在开发过程中,发现servlet做界面非常不方便,Servlet动态输入HTML很麻烦<br>·为什么不使用HTML做界面,应为HTML有部分数据需要动态得到</p><h3 id="JSP公式"><a href="#JSP公式" class="headerlink" title="JSP公式"></a>JSP公式</h3><p>jsp=html+java 片段+标签+javascript+css</p><h3 id="JSP基本介绍"><a href="#JSP基本介绍" class="headerlink" title="JSP基本介绍"></a>JSP基本介绍</h3><p>1.JSP全称是Java Servlet Page Java的服务器界面<br>2.JSP 这门技术的最大的特点在于，写 JSP 就像在写 HTML<br>3.相比 html 而言，html 只能为用户提供静态数据，而 JSP 技术允许在页面中嵌套 java 代码,为用户提供动态数据<br>4.相比 Servlet 而言，Servlet 很难对数据进行排版，而 jsp 除了可以用 java 代码产生动态数据的同时，也很容易对数据进行排版。<br>5.jsp 技术基于 Servlet, 你可以理解成 JSP 就是对 Servlet 的包装</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>·jsp页面不能像HTML页面,直接用浏览器运行,只能通过浏览器访问Tomcat来访问jsp页面</p><h3 id="JSP运行原理"><a href="#JSP运行原理" class="headerlink" title="JSP运行原理"></a>JSP运行原理</h3><p>1.jsp页面本质是一个Servlet程序,其性能是和Java关联的。<br>2.第一次访问jsp页面的时候,Tomcat服务器会把jsp页面解析成为一个java源文件。并且对它进行编译成为.class字节码程序</p><h3 id="JSP的三种常用脚本-声明脚本-表达式脚本-代码脚本"><a href="#JSP的三种常用脚本-声明脚本-表达式脚本-代码脚本" class="headerlink" title="JSP的三种常用脚本 声明脚本,表达式脚本,代码脚本"></a>JSP的三种常用脚本 声明脚本,表达式脚本,代码脚本</h3><h4 id="声明脚本"><a href="#声明脚本" class="headerlink" title="声明脚本"></a>声明脚本</h4><p>·声明脚本的格式是:&lt;%!声明Java代码%&gt;<br>·作用:定义jsp的需要属性,方法,静态代码块和内部类等<br>·例<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%!private Integer id;private String name = "老韩同学";private String job;private static String company;private Double sal;//静态代码块static &#123;company = "字节跳动";&#125;//声明方法public String getName() &#123;return name;&#125;%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="表达式脚本"><a href="#表达式脚本" class="headerlink" title="表达式脚本"></a>表达式脚本</h4><p>·基本语法&lt;%=表达式%&gt;<br>·表达式脚本的作用是:在jsp页面上输出数据<br>·表达式脚本中的表达式不能以分号结束<br>·例<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%!String name = "韩顺平教育";%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>个人信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>用户名=&lt;%=name%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>工作是:&lt;%="Java工程师"%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>得到参数:&lt;%=request.getParameter("sex")%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="代码脚本"><a href="#代码脚本" class="headerlink" title="代码脚本"></a>代码脚本</h4><p>·基本语法:&lt;%java代码%&gt;<br>·代码脚本的作用是:可以在jsp页面中,编写我们需要的功能(使用Java)<br>·可以由多个代码脚本块组合完成一个完整的Java语句<br>·代码脚本还可以和表达式脚本一起组合使用,在jsp页面上输出数据<br>·例<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>计算结果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>&lt;%ArrayList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Monster</span><span class="token punctuation">></span></span> list = new ArrayList&lt;>();list.add(new Monster(1, "牛魔王", "芭蕉扇"));list.add(new Monster(2, "蜘蛛精", "吐口水"));%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#f0f8ff<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>skill<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span> &lt;%    for(int i=0;i<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list.size();i++)&#123;</span>       <span class="token attr-name">Monster</span> <span class="token attr-name">monster</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>list.get(i);</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&lt;%=monster.getId()%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&lt;%=monster.getName()%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&lt;%=monster.getSkill()%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span> &lt;%    &#125; %>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h3><h4 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>1.JSP内置对象,是指Tomcat在翻译jsp页面成为Servlet后,内部提供的九大对象,叫内置对象<br>2.内置对象,可以直接使用,不需要手动定义</p><h4 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h4><p>1.out香科短输出数据,out.println(“”);<br>2.request客户端的http请求<br>3.response响应对象<br>4.session会话对象<br>5.application对应ServletContext<br>6.pageContext jsp页面的上下文,是一个域对象,可以setAttribute(),作用范围只是本页面<br>7.exception异常对象<br>8.page 代表jsp这个实例本身<br>9.config 对应ServletConfig<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%//jsp 中可以使用的内置对象:不用创建,直接使用out.println("out 对象..");String age = request.getParameter("age");//response.sendRedirect("http://www.baidu.com");session.setAttribute("name", "jack");//application 等价 servlet 的 servletContextapplication.setAttribute("company", "北京韩顺平教育");//本页面有效pageContext.setAttribute("num1", 900);//pageout.println("page= " + page);//使用 configString pwd = config.getInitParameter("pwd");%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="JSP四大域对象【作用存取数据】"><a href="#JSP四大域对象【作用存取数据】" class="headerlink" title="JSP四大域对象【作用存取数据】"></a>JSP四大域对象【作用存取数据】</h3><p>1.pageContext(域对象,存放的数据只能在当前的页面使用);<br>2.request(域对象,存放的数据在一次request请求有效);<br>·在一次http请求有效,如果request对象没有变化,则可以一直取。<br>3.session(域对象,存放的数据在一次会话有效);<br>·在多次http请求有效,只要会话没有变,则可以一直取。<br>4.application(域对象,存放的数据在整个web应用运行期间有效,范围更大);</p><h4 id="JSP四大与对象注意事项和细节"><a href="#JSP四大与对象注意事项和细节" class="headerlink" title="JSP四大与对象注意事项和细节"></a>JSP四大与对象注意事项和细节</h4><p>1.域对象是可以像Map一样存取数据的对象,四个域对象功能一样。不同的是它们对数据的存储范围<br>2.从存储范围(作用域范围看)pageContext&lt;request&lt;session&lt;application</p><h4 id="JSP请求转发标签"><a href="#JSP请求转发标签" class="headerlink" title="JSP请求转发标签"></a>JSP请求转发标签</h4><p><jsp:forward page="/bb.jsp">&lt;/jsp:forward&gt;</jsp:forward></p><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><h4 id="EL表达式介绍"><a href="#EL表达式介绍" class="headerlink" title="EL表达式介绍"></a>EL表达式介绍</h4><p>1.EL表达式主要是代替jsp页面的表达式脚本&lt;%=request.getAttribute(“xx””)%&gt;<br>2.EL表达式输出数据的时候,比jsp的表达式脚本简洁<br>3.EL表达式基本语法:${key1}。<br>4.EL表达式常用输出Bean的普通属性,数组属性,List集合和map集合属性<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%Book book=new Book();book.setName("昆虫总动员");book.setWriter(new String[]&#123;"jack", "tom", "terry"&#125;);pageContext.setAttribute("book", book);ArrayList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span> readers = new ArrayList&lt;>();    readers.add("汤姆");    readers.add("玛丽");    readers.add("米兰");    book.setReader(readers);    HashMap    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span> <span class="token attr-name">,</span> <span class="token attr-name">Object</span><span class="token punctuation">></span></span> topics = new HashMap&lt;>();        topics.put("key1", "这是我看过的最好的动画片");        topics.put("key2", "昆虫总动员 2，非常期待..");        topics.put("3", "昆虫总动员 3，非常期待..");        book.setTopics(topics);        %>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>EL输出数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        book信息:$&#123;book&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--$&#123;book.name&#125;调用的就是getName()--></span>        book.name:$&#123;book.name&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        book.writer的第一个元素:$&#123;book.writer[0]&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        book.reader 集合：$&#123;book.reader&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        book.reader 集合第三个元素：$&#123;book.reader[2]&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        book 的 Map 集合: $&#123;book.topics&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        book 的 Map 集合 key1 的值: $&#123;book.topics.key1&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        &lt;%-- map 特殊字符 key 可以用[]方式来读取,比如就 book.topics['1'] --%>        book 的 Map 集合 key2 的值: $&#123;book.topics['key2']&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        book 的 Map 集合 key=3 的值: $&#123;book.topics['3']&#125;&lt;br<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="EL的11个隐含对象"><a href="#EL的11个隐含对象" class="headerlink" title="EL的11个隐含对象"></a>EL的11个隐含对象</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/0a71a49efb765608f0da0ffe0e4c7b09.png"></div></div><h4 id="EL表达式域对象的注意事项"><a href="#EL表达式域对象的注意事项" class="headerlink" title="EL表达式域对象的注意事项"></a>EL表达式域对象的注意事项</h4><p>作用域优先级：pageScope &gt; requestScope &gt; sessionScope &gt; applicationScope<br>如果没有给定取值作用域,则默认从pageScope来时查找,找到则返回,没有找到则按照上述顺序继续查找,直到找到为止</p><h3 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h3><h4 id="JSTL标签库的介绍"><a href="#JSTL标签库的介绍" class="headerlink" title="JSTL标签库的介绍"></a>JSTL标签库的介绍</h4><p>1.EL表达式是为了替换jsp中的表达式脚本,JSTL是为了替换代码脚本,这样jsp页面变得更加简洁<br>2.使用JSTL,需要导入相关的jar包</p><h4 id="core核心库"><a href="#core核心库" class="headerlink" title="core核心库"></a>core核心库</h4><p>1.&lt; c:set/ &gt;介绍</p><p><c:set scope="request" var="username" value="秦三顺"><br>&lt; c:set/ &gt;set标签可以往域中保存数据<br>·等价于域对象.setAttribute(key,value)<br>·scope 属性设置保存到那个域:page,request,session,application<br>·var 属性设置key是什么<br>·value 属性设置值<br>2.&lt; c:if/ &gt;介绍</c:set></p><p><c:if test="${ 10 > 2 }">hello&lt;/c:if&gt;<br>·if标签用来做if判断<br>·test属性表示判断的条件(用EL表达式输出)<br>3.&lt; c:choose  &lt; :when &gt; &lt; c:otherwise &gt;标签<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123; requestScope.money > 20000 &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        有钱人    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123; requestScope.money > 15000 &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        比较有钱    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123; requestScope.money > 10000 &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                没啥钱            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> $&#123;requestScope.money> 5000&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                只够温饱了            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">></span></span>吃了饭，没钱租房了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>4.&lt; c:forEach/&gt;标签<br>c:forEach 标签用来遍历输出,主要有四种形式<br>·普通遍历输出i到j<br>·遍历数组<br>·遍历Map<br>·遍历List<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--这里的items使用EL表达式,直接从后端取--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;monsters&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;monster.id >= 200&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;monster.id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;monster.name&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;monster.skill&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></c:if></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;javaWeb复习 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;WEB工程路径&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="javaWeb" scheme="https://100qin10086.github.io/categories/javaWeb/"/>
    
    
    <category term="javaWeb" scheme="https://100qin10086.github.io/tags/javaWeb/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb复习3</title>
    <link href="https://100qin10086.github.io/posts/c1cddc3a.html"/>
    <id>https://100qin10086.github.io/posts/c1cddc3a.html</id>
    <published>2024-03-13T08:09:58.000Z</published>
    <updated>2024-04-02T07:07:50.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>javaWeb复习 </p></div></h1><h2 id="手动实现Tomcat底层机制-自己设计Servlet"><a href="#手动实现Tomcat底层机制-自己设计Servlet" class="headerlink" title="手动实现Tomcat底层机制+自己设计Servlet"></a>手动实现Tomcat底层机制+自己设计Servlet</h2><h3 id="实现阶段1-编写自己的Tomcat-能给浏览器返回Hi-Hello"><a href="#实现阶段1-编写自己的Tomcat-能给浏览器返回Hi-Hello" class="headerlink" title="实现阶段1-编写自己的Tomcat,能给浏览器返回Hi,Hello"></a>实现阶段1-编写自己的Tomcat,能给浏览器返回Hi,Hello</h3><h4 id="分析示意图"><a href="#分析示意图" class="headerlink" title="分析示意图"></a>分析示意图</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/e59687a970dedfb08a6805b1d50ef400.png"></div></div><h4 id="基于socket开发服务端流程"><a href="#基于socket开发服务端流程" class="headerlink" title="基于socket开发服务端流程"></a>基于socket开发服务端流程</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/6b150300e8ed7cbac3edbf01f930a760.png"></div></div><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QgqTomcatV1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//在9999端口监听</span>        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果serverSocket没有关闭,就等待连接，不停的等待</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>serverSocket<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====我的 web 服务在 9999 端口监听====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2. 等待浏览器/客户端连接, 得到 socket</span>            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3。通过socket得到输出流</span>            <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"this a web server"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>·没有示意BIO线程模型,没有实现多线程,性能差</p><h3 id="使用BIO线程模型-支持多线程"><a href="#使用BIO线程模型-支持多线程" class="headerlink" title="使用BIO线程模型,支持多线程"></a>使用BIO线程模型,支持多线程</h3><h4 id="BIO线程模型介绍"><a href="#BIO线程模型介绍" class="headerlink" title="BIO线程模型介绍"></a>BIO线程模型介绍</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/9c33b5a73c230d62b4dbc97d588c1ff6.png"></div></div><h4 id="分析示意图-1"><a href="#分析示意图-1" class="headerlink" title="分析示意图"></a>分析示意图</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/605d126e8cc3cd2fb07c1aa9aa5d30e3.png"></div></div><h4 id="代码实现见最后"><a href="#代码实现见最后" class="headerlink" title="代码实现见最后"></a>代码实现见最后</h4><h4 id="问题分析-MyTomcat只是简单的返回结果-没有和Servlet-web-xml关联"><a href="#问题分析-MyTomcat只是简单的返回结果-没有和Servlet-web-xml关联" class="headerlink" title="问题分析:MyTomcat只是简单的返回结果,没有和Servlet,web.xml关联"></a>问题分析:MyTomcat只是简单的返回结果,没有和Servlet,web.xml关联</h4><h3 id="实现任务阶段-3-处理-Servlet"><a href="#实现任务阶段-3-处理-Servlet" class="headerlink" title="实现任务阶段 3- 处理 Servlet"></a>实现任务阶段 3- 处理 Servlet</h3><h4 id="分析示意图-2"><a href="#分析示意图-2" class="headerlink" title="分析示意图"></a>分析示意图</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/395789cd99475692c7aca0da8dd9303f.png"></div></div><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><div class="tabs" id><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">QgqRequestHandler</button></li><li class="tab"><button type="button" data-href="#-2">QgqRequest</button></li><li class="tab"><button type="button" data-href="#-3">QgqResponse</button></li><li class="tab"><button type="button" data-href="#-4">QgqCalServlet</button></li><li class="tab"><button type="button" data-href="#-5">QgqHttpServlet</button></li><li class="tab"><button type="button" data-href="#-6">QgqServlet</button></li><li class="tab"><button type="button" data-href="#-7">QgqTomcatV3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 秦家大胖 * @Date 2024/3/13 0013 16:16 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span></span><span class="token class-name">QgqTomcatV3</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">QgqRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">QgqResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">QgqCalServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">QgqHttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span><span class="token comment">/** * 解读 * 1.QgqRequestHandler对象是一个线程对象 * 2.处理一个http请求的 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QgqRequestHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token comment">//定义Socket</span>    <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">QgqRequestHandler</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这里我们可以对客户端/浏览器进行IO编程/交互</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//InputStream inputStream = socket.getInputStream();</span>            <span class="token comment">//把inputStream->BufferedReader->方便进行按行读取</span>            <span class="token comment">//BufferedReader bufferedReader =</span>            <span class="token comment">//        new BufferedReader(new InputStreamReader(inputStream,"utf-8"));</span>            <span class="token comment">//System.out.println("=====qgqtomcatv2接收的数据如下=====");</span>            <span class="token comment">//String mes=null;</span>            <span class="token comment">//while((mes=bufferedReader.readLine())!=null)&#123;</span>            <span class="token comment">//    //如果长度为0</span>            <span class="token comment">//    if (mes.length()==0)&#123;</span>            <span class="token comment">//        break;//退出</span>            <span class="token comment">//    &#125;</span>            <span class="token comment">//    System.out.println(mes);</span>            <span class="token comment">//&#125;</span>            <span class="token class-name">QgqRequest</span> qgqRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QgqRequest</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//String num1 = qgqRequest.getParameter("num1");</span>            <span class="token comment">//String num2 = qgqRequest.getParameter("num2");</span>            <span class="token comment">//System.out.println("num1"+num1);</span>            <span class="token comment">//System.out.println("num2"+num2);</span>            <span class="token comment">////返回数据给浏览器->封装成http响应</span>            <span class="token class-name">QgqResponse</span> qgqResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QgqResponse</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//String resp=QgqResponse.respHeader+"&lt;h1>hi qgq 手写tomcat&lt;/h1>";</span>            <span class="token comment">//outputStream.write(resp.getBytes());</span>            <span class="token comment">//outputStream.flush();</span>            <span class="token comment">//outputStream.close();</span>            <span class="token comment">//QgqCalServlet qgqCalServlet = new QgqCalServlet();</span>            <span class="token comment">//qgqCalServlet.doGet(qgqRequest,qgqResponse);</span>            <span class="token class-name">String</span> uri <span class="token operator">=</span> qgqRequest<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> servletName <span class="token operator">=</span> <span class="token class-name">QgqTomcatV3</span><span class="token punctuation">.</span>servletUrlMapping<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">QgqHttpServlet</span> qgqHttpServlet <span class="token operator">=</span> <span class="token class-name">QgqTomcatV3</span><span class="token punctuation">.</span>servletMapping<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>servletName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>qgqHttpServlet<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                qgqHttpServlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>qgqRequest<span class="token punctuation">,</span> qgqResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> resp<span class="token operator">=</span><span class="token class-name">QgqResponse</span><span class="token punctuation">.</span>respHeader<span class="token operator">+</span><span class="token string">"&lt;h1>404&lt;/h1>"</span><span class="token punctuation">;</span>                <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> qgqResponse<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">////构建http响应头</span>            <span class="token comment">//String respHeader="HTTP/1.1 200 OK \r\n"+</span>            <span class="token comment">//        "Content-Type: text/html;charset=utf-8\r\n\r\n";</span>            <span class="token comment">//String resp=respHeader+"&lt;h1>hi qgq 手写tomcat&lt;/h1>";</span>            <span class="token comment">//System.out.println("=====qgqtomcatv2返回的数据如下=====");</span>            <span class="token comment">//System.out.println(resp);</span>            <span class="token comment">//outputStream.write(resp.getBytes());</span>            <span class="token comment">//outputStream.flush();</span>            <span class="token comment">//outputStream.close();</span>            <span class="token comment">//inputStream.close();</span>            <span class="token comment">//socket.close();</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2024/3/13 0013 17:20 * @Version 1.0 * 我亦无他，惟手熟尔 * 1.QgqRequest 作用是封装http请求的数据 * 2.比如method get/post  uri 参数列表 * 3.QgqRequest作用就等价原生的servlet中的HttpServletRequest */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QgqRequest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> method<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uri<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> parametersMapping<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">InputStream</span> inputStream<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">QgqRequest</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inputStream<span class="token operator">=</span>inputStream<span class="token punctuation">;</span>       <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//读取第一行</span>            <span class="token class-name">String</span> requestLine <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> requestLine<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//分割得到method</span>            method<span class="token operator">=</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//解析得到/qgqCalServlet</span>            <span class="token comment">//1.先看看uri有木有参数列表</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//说明没有参数列表</span>                uri<span class="token operator">=</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                uri<span class="token operator">=</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取参数列表->parametersMapping</span>                <span class="token class-name">String</span> parameters <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterPairs <span class="token operator">=</span> parameters<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">!=</span>parameterPairs<span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>parameterPairs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> parameterPair <span class="token operator">:</span> parameterPairs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split2 <span class="token operator">=</span> parameterPair<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>split2<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            parametersMapping<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>split2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> split2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//request对象有一个特别重要的方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parametersMapping<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> parametersMapping<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> method<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> uri<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUri</span><span class="token punctuation">(</span><span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uri <span class="token operator">=</span> uri<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 秦家大胖 * @Date 2024/3/13 0013 17:23 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * 1.QgqResponse对象可以封装OutputStream(是socket关联) * 2.即可以通过QgqResponse对象返回Http响应给浏览器/客户端 * 3.QgqResponse对象的作用等价于原生的servlet的HttpServletResponse */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QgqResponse</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">OutputStream</span> outputStream<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//写一个http的响应头</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> respHeader<span class="token operator">=</span><span class="token string">"HTTP/1.1 200 OK \r\n"</span><span class="token operator">+</span>            <span class="token string">"Content-Type: text/html;charset=utf-8\r\n\r\n"</span><span class="token punctuation">;</span>    <span class="token comment">//在创建QgqResponse对象时,传入的OutputStream是和Socket关联的</span>    <span class="token keyword">public</span> <span class="token class-name">QgqResponse</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>outputStream<span class="token operator">=</span>outputStream<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//当我们需要给浏览器返回数据时,可以通过QgqResponse的输出流来完成</span>    <span class="token keyword">public</span> <span class="token class-name">OutputStream</span> <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> outputStream<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">QgqRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">QgqResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">WebUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2024/3/13 0013 17:16 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QgqCalServlet</span> <span class="token keyword">extends</span> <span class="token class-name">QgqHttpServlet</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">QgqRequest</span> qgqRequest<span class="token punctuation">,</span> <span class="token class-name">QgqResponse</span> qgqResponse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> num1 <span class="token operator">=</span> qgqRequest<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"num1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> num2 <span class="token operator">=</span> qgqRequest<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"num2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num11 <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num22 <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span>num11<span class="token operator">+</span>num22<span class="token punctuation">;</span>        <span class="token comment">//返回计算结果给浏览器</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> qgqResponse<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> respMes<span class="token operator">=</span><span class="token class-name">QgqResponse</span><span class="token punctuation">.</span>respHeader<span class="token operator">+</span><span class="token string">"&lt;h1>"</span><span class="token operator">+</span>num11<span class="token operator">+</span><span class="token string">"+"</span><span class="token operator">+</span>num22<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>sum<span class="token operator">+</span><span class="token string">"&lt;/h1>"</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>respMes<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">QgqRequest</span> qgqRequest<span class="token punctuation">,</span> <span class="token class-name">QgqResponse</span> qgqResponse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>qgqRequest<span class="token punctuation">,</span>qgqResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">QgqRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">QgqResponse</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2024/3/13 0013 17:16 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">QgqHttpServlet</span> <span class="token keyword">implements</span> <span class="token class-name">QgqServlet</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">QgqRequest</span> qgqRequest<span class="token punctuation">,</span> <span class="token class-name">QgqResponse</span> qgqResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>qgqRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"到get"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>qgqRequest<span class="token punctuation">,</span>qgqResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>qgqRequest<span class="token punctuation">,</span>qgqResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//这里使用了抽象模板设计模式</span>    <span class="token comment">//让QgqHttpServlet子类QgqCalServlet去实现</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">QgqRequest</span> qgqRequest<span class="token punctuation">,</span> <span class="token class-name">QgqResponse</span> qgqResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">QgqRequest</span> qgqRequest<span class="token punctuation">,</span> <span class="token class-name">QgqResponse</span> qgqResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-6"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">QgqRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">QgqResponse</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2024/3/13 0013 17:15 * @Version 1.0 * 我亦无他，惟手熟尔 * 先搭建结构,后面再写内容 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QgqServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">QgqRequest</span> qgqRequest<span class="token punctuation">,</span> <span class="token class-name">QgqResponse</span> qgqResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-7"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span><span class="token class-name">QgqRequestHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">QgqHttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">DocumentException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">Element</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">SAXReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2024/3/13 0013 19:05 * @Version 1.0 * 我亦无他，惟手熟尔 * 实现xml+反射来初始化容器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QgqTomcatV3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">QgqHttpServlet</span><span class="token punctuation">></span></span> servletMapping<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> servletUrlMapping<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">QgqTomcatV3</span> qgqTomcatV3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">QgqTomcatV3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        qgqTomcatV3<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        qgqTomcatV3<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====hsptomcatv3在8080监听======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>serverSocket<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">QgqRequestHandler</span> hspRequestHandler <span class="token operator">=</span>                        <span class="token keyword">new</span> <span class="token class-name">QgqRequestHandler</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>hspRequestHandler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//直接对两个容器进行初始化</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//读取web.xml=>dom4j=></span>        <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">QgqTomcatV3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Document</span> document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">"web.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Element</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> elements <span class="token operator">=</span> rootElement<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> element <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"servlet"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//这是一个servlet配置</span>                    <span class="token class-name">Element</span> element1 <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"servlet-name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Element</span> element2 <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"servlet-class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    servletMapping<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>element1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">QgqHttpServlet</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>element2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"servlet-mapping"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">Element</span> element1 <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"servlet-name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Element</span> element2 <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"url-pattern"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    servletUrlMapping<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>element2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>element1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servletMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servletUrlMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="阶段三所遵循的设计模式"><a href="#阶段三所遵循的设计模式" class="headerlink" title="阶段三所遵循的设计模式"></a>阶段三所遵循的设计模式</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/2db9c44c9b11cc1a1e3b28924fc05171.png"></div></div><h4 id="这三个阶段的各个区别"><a href="#这三个阶段的各个区别" class="headerlink" title="这三个阶段的各个区别"></a>这三个阶段的各个区别</h4><p>1.第一阶段在Tomcat就进行了IO操作<br>2.第二阶段,Tomcat阶段起到了分发的作用具体的IO操作在QgqRequestHandler,同时加入了多线程操作,就是每一个请求对应一个<br>QgqRequestHandler进行相应的操作<br>3.第三阶段,在第二阶段的基础上加上了对Servlet和web.xml的关联,主要用到的操作是反射和dom4j<br>·通过手动实现tomcat可以更加了解Tomcat的底层工作机制</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;javaWeb复习 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;手动实现Tomcat底层机制-自己</summary>
      
    
    
    
    <category term="javaWeb" scheme="https://100qin10086.github.io/categories/javaWeb/"/>
    
    
    <category term="javaWeb" scheme="https://100qin10086.github.io/tags/javaWeb/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb复习2</title>
    <link href="https://100qin10086.github.io/posts/b6caecac.html"/>
    <id>https://100qin10086.github.io/posts/b6caecac.html</id>
    <published>2024-03-08T00:56:42.000Z</published>
    <updated>2024-04-02T07:07:50.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>javaWeb复习 </p></div></h1><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h2><h3 id="ServletConfig-基本介绍"><a href="#ServletConfig-基本介绍" class="headerlink" title="ServletConfig 基本介绍"></a>ServletConfig 基本介绍</h3><p>1.ServletConfig 类是为 Servlet 程序的配置信息的类<br>2.Servlet 程序和 ServletConfig 对象都是由 Tomcat 负责创建<br>3.Servlet 程序默认是第 1 次访问的时候创建，ServletConfig 在 Servlet 程序创建时，就创建一个对应的 ServletConfig 对象</p><h4 id="ServletConfig-类能干什么"><a href="#ServletConfig-类能干什么" class="headerlink" title="ServletConfig 类能干什么"></a>ServletConfig 类能干什么</h4><p>1.获取 Servlet 程序的 servlet-name 的值<br>2.获取初始化参数 init-param<br>3.获取 ServletContext 对象</p><h3 id="ServletContext基本介绍"><a href="#ServletContext基本介绍" class="headerlink" title="ServletContext基本介绍"></a>ServletContext基本介绍</h3><p>1.ServletContext 是一个接口，它表示 Servlet 上下文对象<br>2.一个 web 工程，只有一个 ServletContext 对象实例<br>3.ServletContext 对象 是在 web 工程启动的时候创建，在 web 工程停止的时销毁<br>4.ServletContext 对象可以通过 ServletConfig.getServletContext 方法获得对 ServletContext<br>对象的引用，也可以通过 this.getServletContext()来获得其对象的引用。<br>5.由于一个 WEB 应用中的所有 Servlet 共享同一个 ServletContext 对象，因此 Servlet 对象之间可以通过 ServletContext 对象来实现多个<br>Servlet 间通讯。ServletContext 对象通常也被 称之为域对象<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/4a15998091fd8149cfb3ef28e1dcb72c.png"></div></div></p><h4 id="ServletContext可以干什么"><a href="#ServletContext可以干什么" class="headerlink" title="ServletContext可以干什么"></a>ServletContext可以干什么</h4><p>1.获取 web.xml 中配置的上下文参数 context-param 【信息和整个 web 应用相关，而不是属于某个 Servlet】<br>2.像Map一样存取数据,多个Servlet共享数据</p><h3 id="HttpServletRequest介绍"><a href="#HttpServletRequest介绍" class="headerlink" title="HttpServletRequest介绍"></a>HttpServletRequest介绍</h3><p>1.HttpServletRequest代表客户端的请求<br>2.当客户端/浏览器通过Http协议访问服务器时,HTTP请求头中的所有信息都封装在这个对象中<br>3.通过这个对象方法,可以获得客户端这写信息</p><h4 id="HttpServletRequest常用方法"><a href="#HttpServletRequest常用方法" class="headerlink" title="HttpServletRequest常用方法"></a>HttpServletRequest常用方法</h4><p>1.getRequestURI() 获取请求的资源路径 <a href="http://localhost:8080/servlet/loginServlet">http://localhost:8080/servlet/loginServlet</a><br>2.getRequestURL() 获 取 请 求 的 统 一 资 源 定 位 符 （ 绝 对 路 径 ）<a href="http://localhost:8080/servlet/loginServlet">http://localhost:8080/servlet/loginServlet</a><br>3.getRemoteHost() 获取客户端的 主机, getRemoteAddr()<br>4.getHeader() 获取请求头<br>5.getParameter() 获取请求的参数<br>6.getParameterValues() 获取请求的参数（多个值的时候使用） , 比如 checkbox, 返回的数组<br>7.getMethod() 获取请求的方式 GET 或 POST<br>8.setAttribute(key, value); 设置域数据<br>9.getAttribute(key); 获取域数据<br>10.getRequestDispatcher() 获取请求转发对象, 请求转发的核心对象</p><h4 id="HttpServletRequest注意事项和细节"><a href="#HttpServletRequest注意事项和细节" class="headerlink" title="HttpServletRequest注意事项和细节"></a>HttpServletRequest注意事项和细节</h4><p>1.获取doPost参数中文乱码解决方案,注意setCharacterEncoding(“utf-8”)要写在request.getParameter()前</p><h4 id="请求转发说明"><a href="#请求转发说明" class="headerlink" title="请求转发说明"></a>请求转发说明</h4><p>1.实现请求转发:请求转发指一个web资源收到客户端请求后,通知服务器去调用另外一个web资源进行处理<br>2.HttpServletRequest对象提供了一个getRequestDispatcher方法,该方法返回一个RequestDispatcher对象,调用这个对象<br>的forward方法可以实现请求转发<br>3.request对象同时也是一个域对象,开发人员通过request对象在实现转发时,把数据通过request对象带给其他web资源处理<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/161470ac25bfab5c6e801dbb5859f8bb.png"></div></div></p><h4 id="请求转发注意事项"><a href="#请求转发注意事项" class="headerlink" title="请求转发注意事项"></a>请求转发注意事项</h4><p>1.浏览器地址不会变化(地址会保留在第1个servlet的url)<br>2.在同一次HTTP请求中,进行多次转发,仍然是一次HTTP请求<br>3.在同一次 HTTP 请求中，进行多次转发，多个 Servlet 可以共享 request 域/对象的数据(因为始终是同一个 request 对象)</p><h3 id="HttpServletResponse-介绍"><a href="#HttpServletResponse-介绍" class="headerlink" title="HttpServletResponse 介绍"></a>HttpServletResponse 介绍</h3><p>1.每次 HTTP 请求，Tomcat 会创建一个 HttpServletResponse 对象传递给 Servlet 程序去使用。<br>2.HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息,如果需要设置返回给客户端的信息，通过<br>HttpServletResponse 对象来进行设置即</p><h4 id="向客户端返回数据方法"><a href="#向客户端返回数据方法" class="headerlink" title="向客户端返回数据方法"></a>向客户端返回数据方法</h4><p>1.字节流 getOutputStream;常用于下载(处理二进制数据)<br>2.字符流 getWriter();常用于回传字符串<br>3.两个流同时只能使用一个,使用了字节流,就不能再使用字符流,反之亦然</p><h4 id="请求重定向说明"><a href="#请求重定向说明" class="headerlink" title="请求重定向说明"></a>请求重定向说明</h4><p>1.请求重定向指:一个web资源收到客户端请求后,通知客户端去访问另外一个web资源,这称之为请求重定向<br>2.请求重定向示意原理图<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/ad69bb182c3008385da87050dc5d1bdf.png"></div></div></p><h4 id="请求重定向注意事项和细节"><a href="#请求重定向注意事项和细节" class="headerlink" title="请求重定向注意事项和细节"></a>请求重定向注意事项和细节</h4><p>1.浏览器地址会发生变化,本质是两次http请求<br>2.不能共享request域中的数据,本质是两次http请求,会生成两个HttpServletRequest对象<br>3.不能重定向到/WEB-INF下的资源<br>4.可以重定向到 Web 工程以外的资源， 比如 到 www.baidu.com<br>5.response.sendRedirect(getServletContext().getContext()+”/path”)</p><h3 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h3><p>1.超文本传输协议是互联网上应用广泛的一种网络协议,是工作在tcp/ip协议基础上的,所有的www文件都遵守这个标准<br>2.http1.0短链接 http1.1长连接</p><h4 id="http请求的UML时序图"><a href="#http请求的UML时序图" class="headerlink" title="http请求的UML时序图"></a>http请求的UML时序图</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/33d09a30f5f5e6143dff3bfa11c08565.png"></div></div><h4 id="HTTP请求包分析-GET"><a href="#HTTP请求包分析-GET" class="headerlink" title="HTTP请求包分析(GET)"></a>HTTP请求包分析(GET)</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/b83a6d39c6269be961073959b0ca019e.png"></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/ed7a79956e59275a3956ded879704efa.png"></div></div><h4 id="HTTP请求包分析-POST"><a href="#HTTP请求包分析-POST" class="headerlink" title="HTTP请求包分析(POST)"></a>HTTP请求包分析(POST)</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/050fbf25507f36ad06a993df4cd3a20e.png"></div></div><h4 id="GET请求和POST请求分别有那些"><a href="#GET请求和POST请求分别有那些" class="headerlink" title="GET请求和POST请求分别有那些"></a>GET请求和POST请求分别有那些</h4><p>1.GET请求有哪些<br>·form标签method=get【指定】<br>·a标签<br>·link标签引入css【以get方式来获取资源】<br>·Script标签引入js文件【以get方式来获取资源】<br>·img标签引入图片【以get请求来获取图片】<br>2.POST请求有哪些<br>1.form标签method=post</p><h3 id="几个重要的状态码"><a href="#几个重要的状态码" class="headerlink" title="几个重要的状态码"></a>几个重要的状态码</h3><p>1.302:重定向,当响应码为302时,表示服务器要求浏览器重新再发一个请求,服务器会发送一个响应头Location,它指定了新请求的URL地址<br>2.304:当用户第一次请求index.html时,服务器会添加一个名为Last-Modified响应头,这个头说明了index.html的最后修改<br>时间,浏览器会把index.html内容,以及最好响应时间缓存下来,当用户第二次请求index.html时,再请求在包含一个If-Modified<br>-Since请求头,它的值就是第一次请求时服务器通过Last-Modified响应头发送给浏览器的值,即index.html最后修改时间<br>如果If-Modified-Since的值和index.html最后修改时间一致,浏览器会发送响应码304,表示index.html与浏览器上次缓存的相同,<br>无需再次发送(节省传输成本),浏览器可以显示自己的缓存页面,如果比对不同,说明index.html以及做了修改,服务器就会响应200</p><h2 id="多线程基础的复习"><a href="#多线程基础的复习" class="headerlink" title="多线程基础的复习"></a>多线程基础的复习</h2><h3 id="创建线程的两种方式"><a href="#创建线程的两种方式" class="headerlink" title="创建线程的两种方式"></a>创建线程的两种方式</h3><p>1.继承Thread类,重写run方法<br>2.实现Runnable接口,重写run方法</p><h4 id="继承Thread类实例"><a href="#继承Thread类实例" class="headerlink" title="继承Thread类实例"></a>继承Thread类实例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> no1 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//start()方法调用了start0()方法后,该线程不一定会马上执行,只是将线程改变了可运行状态,具体什么时候执行</span>        <span class="token comment">//取决于CPU，由CPU统一调度</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程继续执行"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//名字 main</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程 i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//让主线程休眠</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> times<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵喵, 我是小猫咪"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>times<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 线程名="</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>times<span class="token operator">==</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过实现接口-Runnable-来开发线程"><a href="#通过实现接口-Runnable-来开发线程" class="headerlink" title="通过实现接口 Runnable 来开发线程"></a>通过实现接口 Runnable 来开发线程</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> no2 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span> <span class="token comment">//通过实现 Runnable 接口，开发线程</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//普通方法</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小狗汪汪叫..hi"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//休眠 1 秒</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="继承Thread-vs-实现Runnable的区别"><a href="#继承Thread-vs-实现Runnable的区别" class="headerlink" title="继承Thread vs 实现Runnable的区别"></a>继承Thread vs 实现Runnable的区别</h4><p>·说明:<br>1.java是单继承的,在某些情况下一个类可能已经继承了某个父类,这时在用继承Thread类方法来创建线程显然已经不可能了<br>2.从Java的设计来看,通过继承Thread或者实现Runnable接口来创建线程本质上没有区别</p><h4 id="线程常用的方法"><a href="#线程常用的方法" class="headerlink" title="线程常用的方法"></a>线程常用的方法</h4><p>·setName  :设置线程名称<br>·getName  :返回该线程的名称<br>·start    :使线程开始执行;Java虚拟机底层调用该线程的start0方法<br>·run      :调用线程对象run方法<br>·setPriority :更改线程的优先级<br>·getPriority :获取线程的优先级<br>·sleep    :在指定的毫秒数内让当前真在执行的线程休眠<br>·interrupt   :中断线程<br>·yield    :线程的礼让,让出cpu,让其他线程执行,但礼让的时间不确定,所以也不一定成功<br>·join     :线程的插队。插队的线程一旦插队成功,则肯定先执行完插入的线程所有的任务</p><h4 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h4><p>1.用户线程:也叫工作线程,当线程的任务执行完或通知方式结束<br>2.守护线程:一般是为工作线程服务的,当所有的用户线程结束,守护线程自动结束<br>3.常见的守护线程:垃圾回收机制</p><h4 id="守护线程实例"><a href="#守护线程实例" class="headerlink" title="守护线程实例"></a>守护线程实例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> no3 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyDaemonThread</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDaemonThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dt<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"工作幸苦。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyDaemonThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"XXOOing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><p>·NEW 尚未启动的线程处于此状态<br>·RUNNABLE 在Java虚拟机中执行的线程处于此状态<br>·BLOCKED  被阻塞等待监视器锁定的线程处于此状态<br>·WAITING  正在等待另一个线程执行特定动作的线程处于此线程<br>·TIMED_WAITING<br>·TERMINATED  已退出的线程处于此状态</p><h4 id="Synchronized-线程同步机制"><a href="#Synchronized-线程同步机制" class="headerlink" title="Synchronized 线程同步机制"></a>Synchronized 线程同步机制</h4><p>1.在多线程编程,一些敏感数据不允许被多个线程同时访问,此时就需要示意同步访问技术,保证数据在任何同一时刻,最多由一个线程<br>访问,以保证数据的完整性</p><h4 id="同步具体方法"><a href="#同步具体方法" class="headerlink" title="同步具体方法"></a>同步具体方法</h4><p>1.同步代码块<br>synchronized(对象){//需要被同步代码}得到对象的锁,才能操作同步代码<br>2.synchronized还可以放在方法声明中,表示整个方法-为同步方法<br>public synchronized void m(String name){//需要被同步的代码}</p><h4 id="使用互斥锁来解决售票问题"><a href="#使用互斥锁来解决售票问题" class="headerlink" title="使用互斥锁来解决售票问题"></a>使用互斥锁来解决售票问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> no4 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SellTicket03</span> sellTicket03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SellTicket03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sellTicket03<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第 1 个线程-窗口</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sellTicket03<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第 2 个线程-窗口</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sellTicket03<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第 3 个线程-窗</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SellTicket03</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticketNum <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//让多个线程共享 ticketNum</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//控制 run 方法变量</span>    <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token comment">/*synchronized*/</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//在同一时刻,只能有一个线程来执行sell方法</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticketNum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"售票结束..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//休眠 50 毫秒, 模拟</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"窗口 "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 售出一张票"</span> <span class="token operator">+</span> <span class="token string">" 剩余票数="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">--</span>ticketNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1 - 0 - -1 - -</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;javaWeb复习 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;Http协议&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="javaWeb" scheme="https://100qin10086.github.io/categories/javaWeb/"/>
    
    
    <category term="javaWeb" scheme="https://100qin10086.github.io/tags/javaWeb/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb复习</title>
    <link href="https://100qin10086.github.io/posts/a3abe12b.html"/>
    <id>https://100qin10086.github.io/posts/a3abe12b.html</id>
    <published>2024-03-07T01:37:25.000Z</published>
    <updated>2024-04-02T07:07:50.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>javaWeb复习 </p></div></h1><h2 id="DOM复习"><a href="#DOM复习" class="headerlink" title="DOM复习"></a>DOM复习</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>1.DOM 全称是 Document Object Model 文档对象模型<br>2.就是把文档中的标签，属性，文本，转换成为对象来管理<br>3.当网页被加载时,浏览器会创建页面的文档对象模型(Document Object Model)</p><h4 id="doucment说明"><a href="#doucment说明" class="headerlink" title="doucment说明"></a>doucment说明</h4><p>1.document 它管理了所有的HTML文档内容<br>2.document 它是一种树结构的文档<br>3.有层级关系,在dom中把所有的标签都对象化(得到这个html标签的&lt;—&gt;对象—&gt;操作)<br>4.通过 document 可以访问所有的标签对象</p><h5 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1. 获取 myHeader 的 dom 对象</span>    <span class="token keyword">var</span> elementsByName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"myHeader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> input1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"input1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2. 给 myHeader 绑定 onclick 的事件</span>    elementsByName<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"动态绑定 内容是= "</span> <span class="token operator">+</span> myHeader<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">addImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> img<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">'1.png'</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span>hight<span class="token operator">=</span><span class="token string">'100'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTML-DOM节点"><a href="#HTML-DOM节点" class="headerlink" title="HTML DOM节点"></a>HTML DOM节点</h3><h4 id="节点常用方法"><a href="#节点常用方法" class="headerlink" title="节点常用方法"></a>节点常用方法</h4><p>1.通过具体的元素节点调用 getElementsByTagName() 方法，获取当前节点的指定标签名孩子节点<br>2.appendChild(oChildNode)方法,可以添加一个子结点<br>3.节点常用属性<br>(1)childNodes 属性，获取当前节点的所有子节点<br>(2)firstChild 属性，获取当前节点的第一个子节点<br>(3)lastChild 属性，获取当前节点的最后一个子节点<br>(4)parentNode 属性，获取当前节点的父节点<br>(5)nextSibling 属性，获取当前节点的下一个节点 (后一个)<br>(6)previousSibling 属性，获取当前节点的上一个节点 (前一个)<br>(7)className 用于获取或设置标签的 class 属性值<br>(8)innerHTML 属性，表示获取/设置起始标签和结束标签中的内容<br>(9)innerText 属性，表示获取/设置起始标签和结束标签中的文本</p><h2 id="XML复习"><a href="#XML复习" class="headerlink" title="XML复习"></a>XML复习</h2><h3 id="为什么需要XML"><a href="#为什么需要XML" class="headerlink" title="为什么需要XML"></a>为什么需要XML</h3><p>1.需求一:两个程序间进行数据通信<br>2.需求二:给一台服务器，做一个配置文件，当服务器程序启动时，去读取它应当监听的端口号、还有连接数据库的用户名和密码<br>3.spring中的ioc配置文件,beans.xml mybatis XXXMapper.xml tomcat server.xml web.xml maven pom.xml<br>4.能存储复杂的数据关系<br>5.xml 文件做小型数据库，也是不错的选择，我们程序中可能用到的数据，如果放在数据库 中读取不合适(因为你要增加维护数据库工作)<br>，可以考虑直接用xml来做小型数据库 ，而且直接读取文件显然要比读取数据库快</p><h3 id="DOM4j技术"><a href="#DOM4j技术" class="headerlink" title="DOM4j技术"></a>DOM4j技术</h3><p>1.Dom4j 是一个非常优秀的 Java XML API，具有性能优异、功能强大和极易使用的特点。现在很多软件采用的 Dom4j<br>2.使用Dom4j开发,需要下载dom4j相应的jar文件</p><h4 id="DOM4j应用实例"><a href="#DOM4j应用实例" class="headerlink" title="DOM4j应用实例"></a>DOM4j应用实例</h4><p>1.重点是查询(遍历和指定查询)<br>2.xml增删改使用少</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>students<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>student id<span class="token operator">=</span><span class="token string">"01"</span><span class="token operator">></span>     <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>小龙女<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>     <span class="token generics"><span class="token punctuation">&lt;</span>gender<span class="token punctuation">></span></span>女<span class="token operator">&lt;</span><span class="token operator">/</span>gender<span class="token operator">></span>     <span class="token generics"><span class="token punctuation">&lt;</span>age<span class="token punctuation">></span></span><span class="token number">16</span><span class="token operator">&lt;</span><span class="token operator">/</span>age<span class="token operator">></span>     <span class="token generics"><span class="token punctuation">&lt;</span>resume<span class="token punctuation">></span></span>古墓派掌门人<span class="token operator">&lt;</span><span class="token operator">/</span>resume<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>student<span class="token operator">></span>    <span class="token operator">&lt;</span>student id<span class="token operator">=</span><span class="token string">"02"</span><span class="token operator">></span>     <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>欧阳锋<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>     <span class="token generics"><span class="token punctuation">&lt;</span>gender<span class="token punctuation">></span></span>男<span class="token operator">&lt;</span><span class="token operator">/</span>gender<span class="token operator">></span>     <span class="token generics"><span class="token punctuation">&lt;</span>age<span class="token punctuation">></span></span><span class="token number">18</span><span class="token operator">&lt;</span><span class="token operator">/</span>age<span class="token operator">></span>     <span class="token generics"><span class="token punctuation">&lt;</span>resume<span class="token punctuation">></span></span>白驼山<span class="token punctuation">,</span>蛤蟆神功<span class="token operator">&lt;</span><span class="token operator">/</span>resume<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>student<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>students<span class="token operator">></span><span class="token comment">//java代码</span>    <span class="token comment">//得到一个解析器</span>    <span class="token class-name">SAXReader</span> reader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//得到xml文件</span>    <span class="token class-name">Document</span> document<span class="token operator">=</span>reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/student.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//得到根节点</span>    <span class="token class-name">Element</span> rootElement<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//得到根节点下的子结点</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> students<span class="token operator">=</span>rootElement<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">Element</span> name<span class="token operator">=</span>student<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Element</span> age <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Element</span> resume <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"resume"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Element</span> gender <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生信息= "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> age<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> resume<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> gender<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//创建一个学生节点</span>    <span class="token class-name">Element</span> newStu <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newsStu<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Element</span> newStu_name <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newStu_name<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"宋江"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建 age 元素</span>    <span class="token class-name">Element</span> newStu_age <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newStu_age<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建 resume 元素</span>    <span class="token class-name">Element</span> newStu_intro <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"resume"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newStu_intro<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"梁山老大"</span><span class="token punctuation">)</span>    <span class="token comment">//把三个子元素（节点）加到 newStu 下</span>    newStu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newStu_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    newStu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newStu_age<span class="token punctuation">)</span><span class="token punctuation">;</span>    newStu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newStu_intro<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//再把 newStu 节点加到根元素</span>    document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newStu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//直接输出会出现中文乱码:</span>    <span class="token class-name">OutputFormat</span> output <span class="token operator">=</span> <span class="token class-name">OutputFormat</span><span class="token punctuation">.</span><span class="token function">createPrettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    output<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出的编码 utf-8</span>    <span class="token comment">////把我们的 xml 文件更</span>    <span class="token class-name">XMLWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/students.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h3 id="WEB开发介绍"><a href="#WEB开发介绍" class="headerlink" title="WEB开发介绍"></a>WEB开发介绍</h3><p>1.WEB服务器(主机)上供外界访问的Web资源分为<br>-静态web资源(如 html 页面）:指 web 页面中供人们浏览的数据始终<br>-动态 web 资源，比如 Servlet(java)、PHP 等</p><h3 id="JavaWeb开发技术栈图-一图胜千言"><a href="#JavaWeb开发技术栈图-一图胜千言" class="headerlink" title="JavaWeb开发技术栈图-一图胜千言"></a>JavaWeb开发技术栈图-一图胜千言</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/b0d67072679b22144311328097e3f2e7.png"></div></div><h3 id="手写简单Web服务程序"><a href="#手写简单Web服务程序" class="headerlink" title="手写简单Web服务程序"></a>手写简单Web服务程序</h3><pre class="line-numbers language-j" data-language="j"><code class="language-j">public class MyTomcat <span class="token verb keyword">&#123;</span>    public static void main<span class="token punctuation">(</span>String<span class="token verb keyword">[</span><span class="token verb keyword">]</span> args<span class="token punctuation">)</span> throws IOException <span class="token verb keyword">&#123;</span>        <span class="token adverb builtin">/</span><span class="token adverb builtin">/</span>在<span class="token number">9999</span>端口监听        ServerSocket serverSocket <span class="token verb keyword">=</span> new ServerSocket<span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token verb keyword">;</span>        <span class="token adverb builtin">/</span><span class="token adverb builtin">/</span>如果serverSocket没有关闭<span class="token verb keyword">,</span>就等待连接，不停的等待        while<span class="token punctuation">(</span><span class="token verb keyword">!</span>serverSocke<span class="token adverb builtin">t.</span>isClosed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token verb keyword">&#123;</span>            System<span class="token conjunction variable">.</span>ou<span class="token adverb builtin">t.</span>println<span class="token punctuation">(</span><span class="token conjunction variable">"</span><span class="token verb keyword">=</span><span class="token verb keyword">=</span><span class="token verb keyword">=</span><span class="token verb keyword">=</span><span class="token verb keyword">=</span>我的 web 服务在 <span class="token number">9999</span> 端口监听<span class="token verb keyword">=</span><span class="token verb keyword">=</span><span class="token verb keyword">=</span><span class="token verb keyword">=</span><span class="token verb keyword">=</span><span class="token conjunction variable">"</span><span class="token punctuation">)</span><span class="token verb keyword">;</span>            <span class="token adverb builtin">/</span><span class="token adverb builtin">/</span><span class="token number">2</span><span class="token conjunction variable">.</span> 等待浏览器<span class="token adverb builtin">/</span>客户端连接<span class="token verb keyword">,</span> 得到 socket            Socket socket <span class="token verb keyword">=</span> serverSocke<span class="token adverb builtin">t.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token verb keyword">;</span>            <span class="token adverb builtin">/</span><span class="token adverb builtin">/</span><span class="token number">3</span>。通过socket得到输出流            OutputStream outputStream <span class="token verb keyword">=</span> socke<span class="token adverb builtin">t.</span>getOutputStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token verb keyword">;</span>            outputStream<span class="token conjunction variable">.</span>write<span class="token punctuation">(</span><span class="token conjunction variable">"</span>this a web server<span class="token verb keyword">".</span>getBytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token verb keyword">;</span>            outputStream<span class="token conjunction variable">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token verb keyword">;</span>            socke<span class="token adverb builtin">t.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token verb keyword">;</span>        <span class="token adverb builtin">&#125;</span>        serverSocke<span class="token adverb builtin">t.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token verb keyword">;</span>    <span class="token adverb builtin">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浏览器访问Web服务过程详解"><a href="#浏览器访问Web服务过程详解" class="headerlink" title="浏览器访问Web服务过程详解"></a>浏览器访问Web服务过程详解</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1eb5d734e83449e1252c243dea82ca0d.png"></div></div><p>1.浏览器先根据请求解析出主机名<br>2.先到本机的Host文件去查询主机名对应的IP<br>3.如果在Host文件没有找到域名的IP，就到外网的DNS查找,如果在DNS也找不到,就会报404<br>4.如果找到会根据找到的IP，向tomcat发出http请求<br>5.服务器解析出web应用,然后解析出资源<br>6.然后将结构以http响应的方式返回<br>7.最后浏览器解析返回的结构,并显示</p><h2 id="动态WEB开发核心-Servlet"><a href="#动态WEB开发核心-Servlet" class="headerlink" title="动态WEB开发核心-Servlet"></a>动态WEB开发核心-Servlet</h2><h3 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h3><p>·Servlet 在开发动态 WEB 工程中，得到广泛的应用，掌握好 Servlet 非常重要了, Servlet(基石)是 SpringMVC 的基础</p><h4 id="原生的servlet"><a href="#原生的servlet" class="headerlink" title="原生的servlet"></a>原生的servlet</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//该方法只会调用一次,就是改Servlet被实例化时</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//改方法专门用来处理请求和响应的</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浏览器调用Servlet流程分析"><a href="#浏览器调用Servlet流程分析" class="headerlink" title="浏览器调用Servlet流程分析"></a>浏览器调用Servlet流程分析</h3><p>·一图胜千言<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/33ff985f882a260c71a3c3a707f715d8.png"></div></div><br>·详细分析<br>1.如果是第一次请求,tomcat会处理请求得到要访问的Servlet的url,然后去web.xml的<servlet-mapping>中查找改改url对应的&lt;<br>servlet-name&gt;<br>2.然后去web.xml的<servlet>下查找改<servlet-name>对应的<servlet-class>,得到要访问的Servlet的全路径<br>3.在Tomcat中维护了一个大的HashMap<id,Servlet>,查看改Hashmap,看看有木有这个Servlet实例<br>4.如果没有查到改servlet-name对应的id,即没有这个Servlet实例<br>5.使用反射技术将前面的得到的Servlet的全路径将servlet实例化,并放入到Tomcat维护的HashMap<id,Servlet><br>6.如果是第二次(以后)请求,就少了反射得到Servlet实例的那一步,直接从HashMap中查找<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/5846614c5c20db92c57a04b10d428906.png"></div></div></id,Servlet></id,Servlet></servlet-class></servlet-name></servlet></servlet-mapping></p><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><p>·主要有三个方法<br>1.init()初始化阶段【该方法只在Servlet实例化时调用】<br>2.service()处理浏览器请求阶段<br>3.destroy()终止阶段<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://qgqliving-10000.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/46174e96cc44e35bd7c59bb28c5e8573.png"></div></div></p><h4 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h4><p>·Servlet 容器(比如: Tomcat)加载 Servlet，加载完成后，Servlet 容器会创建一个 Servlet 实例并调用 init()方法，init()方法只会调用一次。<br>1.Servlet容器(Tomcat)启动时自动装载某些servlet,实现这个需要在web.xml文件中添加<load-on-startup>1&lt;/load-on-startup&gt;<br>2.Servlet 重新装载时(比如 tomcat 进行 redeploy【redeploy 会销毁所有的 Servlet 实例】)，浏览器再向 Servlet 发送请求的第 1 次</load-on-startup></p><h4 id="处理浏览器请求阶段-service方法"><a href="#处理浏览器请求阶段-service方法" class="headerlink" title="处理浏览器请求阶段(service方法)"></a>处理浏览器请求阶段(service方法)</h4><p>1.每收到一个http请求,服务器就会产生一个新的线程去处理<br>2.创建一个用于封装HTTP请求消息的ServletRequest对象和一个代表HTTP响应消息的ServletResponse对象<br>3.然后调用Servlet的service()方法并将请求和响应对象作为参数传递进去</p><h4 id="终止阶段-destroy-方法-体现-Servlet-完整的生命周期"><a href="#终止阶段-destroy-方法-体现-Servlet-完整的生命周期" class="headerlink" title="终止阶段 destroy 方法(体现 Servlet 完整的生命周期)"></a>终止阶段 destroy 方法(体现 Servlet 完整的生命周期)</h4><p>1.当web 应用被终止，或者Servlet 容器终止运行，或者Servlet 类重新装载时，会调用 destroy()方法, 比如重启 tomcat ,或者<br>redeploy web 应用</p><h3 id="Servlet-注解方式"><a href="#Servlet-注解方式" class="headerlink" title="Servlet - 注解方式"></a>Servlet - 注解方式</h3><p>1.Servlet支持注解的配置,一个Servlet支持配置多个urlPattern<br>例如:@WebServlet(urlPatterns = {“/ok1”, “/ok2”})<br>2.同时基于注解配置也支持目录匹配【@WebServlet(“/ok/<em>“)】,扩展名匹配【@WebServlet(“</em>.action”),任意匹配【@WebServlet(“/“)<br>@WebServlet(“/*”)】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;javaWeb复习 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;DOM复习&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="javaWeb" scheme="https://100qin10086.github.io/categories/javaWeb/"/>
    
    
    <category term="javaWeb" scheme="https://100qin10086.github.io/tags/javaWeb/"/>
    
  </entry>
  
  <entry>
    <title>伊斯孩割礼留念</title>
    <link href="https://100qin10086.github.io/posts/195db198.html"/>
    <id>https://100qin10086.github.io/posts/195db198.html</id>
    <published>2024-02-11T14:04:19.000Z</published>
    <updated>2024-04-02T07:07:50.348Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="be16eaba982ef74b675d6700d786fccd6c13a255021884a836d66b72f6d67bf9">179ff0acd31da41b1bfdfb571c96c200c4d0ed50516a891c6898e98afd6dc139687ab0600a4450905adedde2a271a12b12f95ab7eaef9673e6ad3bb8872235f63b162e5e4559fcbd70222eec9002ae038566abab3625ae2a2fbeb153014a3234c54901b0ac13fad3cb1fbd59238c22cba51133ce4b7b74bb8ee93608b07a294e5810b945bdc7380a77feb05f2f41b608513cb93f043c1659aed28b73a5753e0721da7464934e4f3a13f78e559b6c0fa8cf8ca3720477f41c8313cca603403656fbddb953cb589a3e13f36da9131fb913448c2a951782b4a3b7c70f104dcb754be9cb5a4f8d836bcab6985d2ea0a8152e3f6af86f4734c5bc7538ed23a5ab0ccac2a214e27b8df84dbc50e7dfda53b36802a5f784ca5d06128e0030fcfa54d773f010c7366e1e4587742425b9e70d4089823a9e442de805646eebc6b0fd371a8a6c4a91fc767dede752e1fefbf7c9abb6c00d68681e9bae7ee0a69ec7e18a76694cafde665183ed84cc61c3dee026f6480b18f4a90af20849b17a1f204221effabb2eebe5057613a20c62f47a2517542d2526f53733af7b92833c97e7d56b09bbf2c966a762bf8028a91e7c5f22d35fd215315254c5f84c9c4f955bb641920ea17ca11a78cb6eefd8c0d8f764a2ffb736a1393747cd668e5be9d2f17eba8e02903793b2042b345053e1624a8f795fc53fb30e1c9c9e2802a6dda6a7be91ed963ee802df4c74fad435126f889e0362c1d003fd3ae747380f0fb4fe6f9b7063ba3833f141fe8a0d7f9b48bfe62c3d5405402eb0ba35bb9fed5e7ff1558c4e14f083b14131110f8aca2ef9f24bc22d3438096bcfc3f65805296a03fb94bff9ee4010ae2e13898989b6d3852a75c6d3cc41c7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>泛型程序设计</title>
    <link href="https://100qin10086.github.io/posts/98735cb0.html"/>
    <id>https://100qin10086.github.io/posts/98735cb0.html</id>
    <published>2023-09-07T07:07:59.000Z</published>
    <updated>2024-04-02T07:07:50.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>泛型程序设计</p></div></h1><p>~~为什么要使用泛型程序设计<br>  ·泛型程序设计意味着编写的代码可以对多种不同类型的对象重用<br>~~类型参数<br>  ·ArrayList list=new ArrayList<String>(),这使得代码具有更好的可读性,人门一看就知道这个数组列表中包含的是String<br>  ·编译器也可以充分利用这个类型的信息,调用get的时候,不需要进行强制类型转换,编译器知道返回值类型为String<br>  ·编译器还知道ArrayList<String>add方法有一个类型为String地参数,这比有一个Object类型地参数要安全地多,现在,编译器可以检查,防止你插入错误类型地对象<br>  ·出现编译错误比运行时出现类地强制类型转换异常好的多<br>~~定义简单泛型类<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> first<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> second<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        first<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        second<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token class-name">T</span> first<span class="token punctuation">,</span> <span class="token class-name">T</span> second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> first<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirst</span><span class="token punctuation">(</span><span class="token class-name">T</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSecond</span><span class="token punctuation">(</span><span class="token class-name">T</span> second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>~~泛型的好处<br>  ·编译时,检查添加元素地类型,提高了安全性<br>  ·减少了类型转化地次数,提高了效率<br>~~泛型方法<br>  ·类型变量放在修饰符之后,并在返回类型之前<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//调用</span><span class="token class-name">String</span> middle <span class="token operator">=</span> <span class="token class-name">Pair</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"k"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  ·在这种情况下,方法调用中可以省略<String> 类型参数，因为可以从类型参数哪里进行推断<br>  ·使用传统方法地问题分析<br>  ·1.不能对加入到集合ArrayList中的数据进行约束<br>  ·2.遍历地时候,需要进行类型转换,如果集合中地数据量较大,对效率有影响<br>~~泛型地介绍<br>  ·泛(广泛)型(类型)=<br>  ·泛型又称参数化类型<br>  ·在类声明或实例化时只要制定好需要地具体地类型即可<br>  ·泛型地作用是:可以在类声明时通过一个标识表示类中某个属性地类型<br>  ·在给泛型指定具体类型后,可以传入该类型或者该类型地子类型<br>  ·给泛型指向数据类型是,要求是引用类型,不能是基本数据类型<br>~~自定义泛型接口<br>  ·基本语法 interface 接口名<T,R...>{}<br>~~泛型地继承和通配符<br>  ·泛型不具备继承性<br>  ·&lt;? extends A&gt;:支持A类以及A类地子类,规定了泛型地上限<br>  ·&lt;? super A&gt;:支持A类以及A类地父类,不限于直接父类,规定了泛型地下限</T,R...></String></String></String></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;泛型程序设计&lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;p&gt;~~为什么要使用泛型程序设计&lt;br&gt;  ·泛型程序设</summary>
      
    
    
    
    <category term="java基础" scheme="https://100qin10086.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://100qin10086.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>接口-lambda表达式-内部类</title>
    <link href="https://100qin10086.github.io/posts/280ce217.html"/>
    <id>https://100qin10086.github.io/posts/280ce217.html</id>
    <published>2023-09-04T11:49:41.000Z</published>
    <updated>2024-04-02T07:07:50.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>接口-lambda表达式-内部类</p></div></h1><h2 id="-1"><a href="#-1" class="headerlink" title></a><p class="p green">接口</p></h2><p>~~接口<br>  ·接口的概念:在Java程序设计中,接口不是类,而是对希望符合这个接口的类的一组需求<br>  ·接口中的所有方法都自动是public方法。因此，在接口中声明方法时,不必提供关键字public<br>  ·为了让类实现一个接口,通常需要完成下面两个步骤<br>  ·(1)将类声明为实现给定的接口<br>  ·(2)对接口中的所有方法提供定义<br>  ·我们要类按照某一个字段进行排序,必须让它实现compareTo方法<br>  ·接口的属性<br>  ·接口不是类,具体来说,不能使用new运算符实例化一个接口,不过,尽管不能构造接口的对象,却能声明接口的变量<br>  ·接口变量必须引用实现了这个接口的类对象<br>  ·如同使用instanceof检查一个对象是否属于某个特定的类一样,也可以使用instanceof检查一个对象是否实现了某个特定的接口<br>  ·与接口中的方法都自动被设置为public一样,接口中的字段总是public static final;<br>  ·尽管每个类只能有一个超类,但却可以实现多个接口用逗号隔开,这就为定义类的行为提供了极大的灵活性</p><h2 id="-2"><a href="#-2" class="headerlink" title></a><p class="p green">lambda表达式</p></h2><p>~~接口与抽象类<br>  ·所谓的抽象方法就是没有实现的方法<br>  ·所谓没有实现就是指,没有方法体<br>  ·当一个类中存在抽象方法时,需要将该类声明为abstract类<br>  ·一般来说,抽象类会被继承,由其子类来实现抽象方法<br>  ·当父类的一些方法不能确定时,可以用abstract关键字来修饰该方法,这个方法就是抽象方法,用abstract来修饰该类就是抽象类<br>  ·抽象类的价值更多在于设计,是设计好设计好后,让子类继承并实现抽象类<br>  ·抽象类不能被实例化<br>  ·抽象类不一定要包含abstract方法,也就是说,抽象类可以没有abstract方法<br>  ·一旦类包含了abstract方法,则这个类必须声明为abstract<br>  ·abstract只能修饰类和方法,不能修饰属性和其他的<br>  ·抽象方法不能使用private,final和static来修饰,因为这些关键字都是和重写相违背的<br>  ·如果一个类继承了抽象类,则它必须实现抽象类的所有抽象类<br>~~Comparator接口<br>  ·实现Comparator接口,就可以重写compare类,可以自定义比较的方式,如按字母,按照从大到小,从小到大</p><h2 id="-3"><a href="#-3" class="headerlink" title></a><p class="p green">内部类</p></h2><p>~~匿名内部类<br><pre class="line-numbers language-none"><code class="language-none">public interface Comparator&lt;T&gt; &#123;int compare(T o1, T o2);&#125;Collections.sort(words,new Comparator&lt;String&gt;()&#123;    public int compare(String s1,String s2)&#123;       return Integer.compare(s1.lemgth(),s2.length());    &#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  ·通俗的讲,就是没有类名,直接通过new关键字创建这个类的实例<br>  ·lambda表达式<br><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Collection.sort(words,(s1,s2)-&gt;Integer.compare(s1.length(),s2.length()));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>  ·再来个简单的例子<br><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;首先定义一个study接口public interface Learn&#123;void study();&#125;&#x2F;&#x2F;可以为该接口定义一个实现类 StudyDemopublic class StudyDemo implements Learn&#123;@Override    public void study() &#123;    System.out.println(&quot;好好学习，天天向上&quot;);        &#125;    &#125;&#x2F;&#x2F;然后创建该实现类的对象调用study方法：Learn s &#x3D; new StudyDemo ();        s.study();&#x2F;&#x2F;运行结果--&gt;好好学习，天天向上&#x2F;&#x2F;如果StudyDemo 类只是为了实现 Learn接口而存在的，且仅被使用了一次，所以使用匿名内部类来简化这一操作：public static void main(String[] args)&#123;   Learn s&#x3D;new Learn()&#123;   public void study() &#123;            System.out.println(&quot;好好学习，天天向上&quot;);                &#125;   &#125;;   s.study();&#125;&#x2F;&#x2F;显然，使用匿名内部类还不够简洁，所以我们用lambda表达式来优化：&#x2F;&#x2F;因为learn接口中只有一个方法,编译器使用称为类型推断的过程从上下文推导出这些类型和方法,我们可以省区study的方法名和new Learn,并加上箭头Learn s&#x3D;()-&gt;&#123;   System.out.println(&quot;好好学习，天天向上&quot;); &#125;s.study();&#x2F;&#x2F;还可以简化Learn s&#x3D;()-&gt;System.out.println(&quot;好好学习，天天向上&quot;);&#96;&#96;&#96;    ·上面的例子方法即没有参数,也没有返回值&#96;&#96;&#96;Javainterface Learn1&#123;    void study(int a,int b);&#125;&#x2F;&#x2F;再看看它的匿名内部类和lambda表达式写法Learn1 learn;       &#x2F;&#x2F;匿名内部类写法    learn &#x3D; new Learn1() &#123;        @Override        public void study(int a,int b) &#123;            System.out.println(&quot;好好学习x&quot;(a+b));        &#125;    &#125;;learn&#x3D;(a,b)-&gt;&#123;System.out.println(&quot;好好学习x&quot;(a+b));&#125;learn.study(3,4);&#x2F;&#x2F;如果方法中只有一个参数,还可以省略小括号 learn &#x3D; e-&gt; System.out.println(&quot;好好学习&quot;+e);    &#96;&#96;&#96;     ·再来看看有返回值的情况&#96;&#96;&#96;Javapublic interface Comparator&lt;T&gt; &#123;int compare(T o1, T o2);&#125;先定义一个学生类：public class Student &#123;    private String name;    private int age;    public Student(String name,int age)&#123;    this.name &#x3D; name;    this.age &#x3D; age;    &#125;    public int getAge(    return this.age;&#125;接下来我们对数组中的Student对象，使用Arrays的sort方法通过年龄进行升序public static void main(String[] args) &#123;Student[] array &#x3D; &#123;         new Student(&quot;张三&quot;, 18),             new Student(&quot;李四&quot;, 20),             new Student(&quot;王五&quot;, 19) &#125;;    &#x2F;&#x2F;匿名内部类写法    Compartor&lt;Student&gt; compare&#x3D;new Compartor&lt;Student&gt;()&#123;            @Override            public int compare(Student s1, Student s2) &#123;                return s1.getAge() ‐ s2.getAge();            &#125;    &#125;;    &#x2F;&#x2F;Lambda表达式写法    Comparator&lt;Student &gt; compare&#x3D;(Studeng s1,Student s1)-&gt;&#123;return s1.getAge() ‐ s2.getAge();&#125;    &#96;&#96;&#96;   ~~内部类  ·内部类是定义在另一个类中的类,使用内部类的两个原因  ·内部类可以堆同一个包中的其他类隐藏  ·内部类方法可以访问定义这个类的作用域中的数据,包括原本私有的数据  ·如果定义在局部位置(方法中&#x2F;代码块)(1)局部内部类(2)匿名内部类  ·定义在成员位置(1)成员内部类(2)静态内部类&#96;&#96;&#96;java&#x2F;&#x2F;语法演示class Outer&#123; &#x2F;&#x2F;外部类    class inner&#123; &#x2F;&#x2F;内部类      &#125;&#125;class Other&#123; &#x2F;&#x2F;外部其他类&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  ·局部内部类(有类名)<br>  ·匿名内部类(没有类名,重点！！！！！！！！)<br>~~局部内部类的使用<br>  ·定义在内部类的局部位置,比如方法中,并且有类名<br>  ·可以直接访问外部类的所有成员,包含私有的<br>  ·不能添加访问修饰符,因为它的地位就是一个局部变量,局部变量是不能使用修饰符的,但可以使用final修饰,因为局部变量也可以使用final<br>  ·作用域:仅仅在定义它的方法或代码块中<br>  ·局部内部类—-访问—-&gt;外部类的成员【访问方式:直接访问】<br>  ·外部类—-访问—-&gt;局部内部类的成员【访问方式:创建对象,在访问】<br>  ·外部其他类—-不能访问呢—-&gt;局部内部类<br>  ·如果外部类和局部内部类的成员重名时,默认遵循就近原则,如果想访问外部类的成员,则可以使用(外部类名.this.成员)去访问<br>~~匿名内部类的使用(重要！！！！！！！！！！)<br>  ·(1)本质是类(2)内部类(3)该类没有名字(4)同时还是一个对象<br>  ·说明:匿名内部类是定义在外部类的局部位置,比如方法中,并且没有类名<br>  ·基本语法<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> 类或接口<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    类体<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>  ·匿名内部类使用一次,就不能再使用<br>  ·匿名内部类的最佳时间,直接当做实参传递<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> no5 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一副名画XXXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token class-name">IL</span> il<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        il<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">IL</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>~~成员内部类的使用<br>  ·成员内部类是定义再外部类的成员位置,并且没有static修饰<br>  ·可以直接访问外部类的所有成员,包含私有的<br>  ·可以添加任意访问修饰符<br>~~静态内部类<br>  ·有static修饰<br>  ·因为是静态内部类,是可以通过类名直接访问</p><h2 id="-4"><a href="#-4" class="headerlink" title></a><p class="p green">异常</p></h2><p>~~异常分类<br>  ·再Java中,异常对象都是派生于Throwable类的一个类实例<br>  ·需要注意的是,所有的异常都是由Throwable继承而来,但是下一层立即分解为两个分支:Error和Exception<br>  ·Error类层次结构描述了Java运行是系统的内部错误和资源耗尽错误<br>  ·要重点关注Exception层次结构,这个层次结构又分解为两个分支,一个分支派生于RuntimeException,另一个分支包含其他异常<br>  ·一般规则是:由编程错误导致的异常属于RuntimeException;如果程序本身没有问题,但由于像I/0错误这类问题导致的异常属于其他异常<br>  ·派生于RuntimeException的异常包括一下问题<br>  ·错误的强制类型转换<br>  ·数组访问越界<br>  ·访问null指针<br>  ·不是派生于RuntimeException的异常包括<br>  ·试图超越文件末尾继续读取数据<br>  ·视图打开一个不存在的文件<br>~~声明检查类型<br>  ·如果遇到了无法处理的情况,Java方法可以抛出一个异常<br>  ·要在方法的首部指出这个方法可能抛出一个异常,所以要修改方法首部,以反映这个方法可能抛出的检查型异常<br>~~捕获异常<br>  ·如果发生了某个异常,在没有再任何地方捕获这个异常,程序就会终止,并在控制台上打印一个信息<br>  ·要想捕获一个异常,需要设置try/catch语句块<br>  ·如果try语句块中的任何代码跑出来catch子句指定的一个异常类,那么<br>  ·程序将跳过try语句块的其余代码<br>  ·程序将执行catch自居中的处理器代码<br>  ·如果try语句块中的代码没有抛出任何异常,那么程序将跳过catch子句<br>  ·在一个try语句块中可以捕获多个异常,并且对不同类型的异常做出不同的处理,要为每个异常类型使用一个单独的catch子句<br>~~finally子句<br>  ·代码抛出一个异常时，就会停止处理这个方法中剩余的代码,并退出这个方法。因此需要清理资源分配<br>  ·不管是否异常被捕获,finally子句中的代码都会被执行<br>~~断言<br>  ·启动断言要在配置参数中加入-ea -Dfile.encoding=UTF-8<br>  ·语法:在assert关键字后放一个布尔值(也可以是一个表达式,这个表达式也会变成一个布尔值),当这个布尔值为true时,就会通过整个断言,当这个布尔值为false时,这个断言就会抛出一个错误,这会让这个程序停止<br>~~日志<br>  ·基本日志:要生成简单的日志记录,可以使用全局日志记录器global logger并调用其info方法<br>  ·基本语法,Logger.getGlobal().info(“这里写入日志信息”)。最后在控制台就会使用红色的字体输出时间,包名以及日志信息<br>  ·关闭日志:在适当的地方(如main的最前面)调用Logger.getGlobal.setLevel(Level.off),将会取消所有的日志<br>  ·高级日志:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;接口-lambda表达式-内部类&lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;-1&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="java基础" scheme="https://100qin10086.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://100qin10086.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>继承</title>
    <link href="https://100qin10086.github.io/posts/11d8b32d.html"/>
    <id>https://100qin10086.github.io/posts/11d8b32d.html</id>
    <published>2023-08-31T10:46:00.000Z</published>
    <updated>2024-04-02T07:07:50.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>java基础复习</p></div></h1><h2 id="-1"><a href="#-1" class="headerlink" title></a><p class="p green">Java继承</p></h2><p>~~类,超类,子类<br>  ·在设计类时,应该将最一般的方法放在超类中,而将更特殊的方法放在子类中<br>  ·父类中的有些方法对子类Manager并不一定适用,为此，需要提供一个新的方法来覆盖超类中的这个方法<br>  ·如果想在子类去访问父类的私有属性是做不到的,但是我们可以使用super关键字去调用私有属性的getter方法从而获取父类的私有属性<br>  ·继承绝对不会删除任何字段或方法<br>~~子类构造器<br>  ·在子类构造器中没有显示的调用超类的构造器,则自动调用超类的无参构造器,如果超类没有无参数的构造器,并且在子类的构造器中又没有显示的调用超类的其他构造器,Java编译器就会报告一个错误<br>  ·this,与super关键字:<br>  ·this关键字的含义:一是指示隐式参数的引用,二是调用该类的其他构造器<br>  ·super关键字也有两个含义:一是调用超类的方法,二是调用超类的构造器<br>  ·在调用构造器的时候,this和super这两个关键字紧密相关,调用构造器的语句只能作为另一个构造器的第一语句出现。<br>~~多态<br>  ·重写和重载体现多态<br>  ·一个对象的编译类型和运行类型可以不一致<br>  ·编译类型在定义对象时,就确定了,不能改变<br>  ·运行类型是可以变化的<br>  ·编译类型看定义时=号的左边,运行类型看=号的右边<br>  ·多态的前提是:两个对象存在继承关系<br>  ·多态的向上转型<br>      ·本质:父类的引用指向了子类的对象<br>      ·语法:父类类型 引用名=new 子类类型();<br>      ·特点:编译类型看左边,运行类型看右边<br>           可以访问父类中的所有成员(需遵守访问权限),<br>           不能调用子类中特有成员,最终运行效果看子类的具体实现<br>  ·多态的向下转型<br>     ·语法:子类类型 引用名=(子类类型) 子类类型();<br>     ·自能强转父类的引用,不能强转父类的对象<br>     ·向下转型后,可以调用子类类型中的所有的成员<br>  ·属性没有重写之说,属性的值看编译类型<br>  ·方法看运行类型<br>  ·instanceOf 比较操作符,用于判断对象的运行类型是否为XX类型或XX类型的子类型<br>~~Java的动态绑定机制(非常非常重要)<br>  ·当调用对象的方法时,该方法会和该对象的内存地址/运行类型绑定<br>  ·当调用对象属性时,没有动态绑定机制,哪里声明,哪里使用<br>  ·动态绑定发生的条件:超类引用子类对象<br>~~==和equals对比<br>  ·==是一个比较运算符<br>  ·==既可以判断基本类型,又可以判断引用类型<br>  ·==如果判断基本类型,判断的是值是否相等<br>  ·==如果判断引用类型,判断的是地址是否相等<br>~~阻止继承:final类和方法<br>  ·有时候,我们可能希望阻止人们利用某个类定义子类,不允许扩展的类被称为final类<br>  ·类中的某个特定方法也可以声明为final。如果这样做,子类就不能覆盖这个方法<br>  ·将类或类声明为final的主要原因是:确保他们不会在子类中改变语义<br>  ·将父类的对象转成子类的引用需要进行强制类型转化<br>  ·只能在继承层次进行强制类型转换<br>  ·一般情况下,最好尽量少用强制类型转换和instanceof运算符<br>~~抽象类<br>  ·为了提高程序的清晰度,包含一个或多个抽象方法的类本身必须被声明为抽象的<br>  ·扩张抽象类有两种选择,一种是在子类中保留抽象类中的部分或所有抽象方法仍未被定义,这样就必须将子类也设置为抽象类，另外一种做法就是定义全部方法，这样一来，子类就不是抽象的<br>~~Object:所有类的超类<br>  ·可以使用Object类型的变量引用任何类型的对象<br>  ·使用==比较基本类型字段,使用Object.equals比较对象字段<br>  ·对于数组类型的字段，可以使用静态的Arrays.equals方法检测相应的数组元素是否相等<br>  ·如果x.equals(y)返回true,那么x.hashCode()就必须与y.hashCode()返回相同的值<br>  ·一维数组打印,Array.toString，多维数组打印Arrays.deepToString<br>  ·list.toArray(a),可以将list集合中的数据存入到数组a中<br>~~对象包装器与自动装箱<br>  ·假设想要定义一个整型数组列表,遗憾的是,尖括号中的类型参数是不允许是基本类型,也就是,不容许写成ArrayList<int>,这里就可以用到Integer包装器类<br>  ·例如:list.add(3)将自动地变换为list.add(Integer.valueOf(3)),这种变化就为自动装箱<br>  ·相反地,将一个Integer对象赋给int值时,将会自动拆箱。也就是说,int n=list.get(i)转换为int n=list.get(i).intValue();<br>  ·自动装箱和拆箱就是基本类型和引用类型相互转换<br>~~可变参数,传入的数据可以当作一个数组<br>~~枚举enum<br>  ·例:实际上,这个声明定义的类型是一个类,他刚好又4个实例，不可能构造新的对象<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Size</span><span class="token punctuation">&#123;</span><span class="token constant">SMALL</span><span class="token punctuation">,</span><span class="token constant">MEDIUM</span><span class="token punctuation">,</span><span class="token constant">LARGE</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>  ·枚举的两种实现方法<br>  ·1.使用关键字enum<br>  ·2.创建一个类,将构造器私有化,防止直接new,去掉setXXX方法,防止属性被修改,在类的内部直接创建固定的对象<br>  ·enum实现接口,使用enum关键字后,就不能在继承其他类了,因为enum会隐式继承Enum,而Java是单继承机制，但是可以实现接口</int></p><pre><code class="lang-java">public static enum Size2&#123;        SMALL(&quot;s&quot;),MEDIUM(&quot;m&quot;),LARGE(&quot;l&quot;);        private Size2(String abbreviation) &#123;            this.abbreviation = abbreviation;        &#125;        private String abbreviation;        @Override        public String toString() &#123;            return &quot;Size2&#123;&quot; +                    &quot;abbreviation=&#39;&quot; + abbreviation + &#39;\&#39;&#39; +                    &#39;&#125;&#39;;        &#125;    &#125;</code></pre><p>~~反射<br>  ·可能最常用的Class方法就是getName,这个方法将返回类的名字<br>  ·还可以使用静态方法forName获得类名相对应的Class对象<br>  ·获得Class类对象的第三种方法是一个很方便的快捷方式。如果T是任意的Java类型，T.class将代表匹配的类对象<br>  ·鉴于历史原因,getName方法应用于数组类型的时候会返回有些奇怪的名字<br>  ·虚拟机为每个类型管理一个唯一的class对象,因此,可以利用==运算符实现两个类对象的比较<br>  ·创建对象,不使用传统方法<br>  ·(1)加载类,返回Class类型的对象cls使用forName<br>  ·(2)得到加载的类的对象实例<br>  ·(3)得到你加载的类的方法的对象使用getMethod。即在反射中,可以把方法视为对象(万物皆对象)<br>  ·(4)调用该方法,传统方式,对象.方法。反射中,方法.invoke(对象)<br>  ·Java程序在计算器有三个阶段 代码阶段/编译阶段  Class类阶段(加载阶段)  Runtime运行阶段<br>  ·反射相关的主要类<br>  ·(1)Class:代表一个类,CLass对象表示某个类加载后在堆中的对象<br>  ·(2)Method:代表类的方法,Method对象表示某个类的方法<br>  ·(3)Field:代表类的成员变量,Field对象表示某个类的成员变量<br>  ·(4)Constructor:代表类的构造方法,Constructor对象表示构造器<br>  ·可以通过forName.getField(“age”)获取了类的成员变量<br>  ·通过forName.getConstructor();获得无参构造器<br>  ·反射调用优化+关闭访问检查:forName.getMethod()+setAccessible(true);取消检查访问<br>  ·Class常用的方法<br>  ·Class&lt;?&gt;cls=Class.forName(ClassAllPAth);<br>  ·得到包名:cls.getPackage().getName();<br>  ·得到全类名:cls.getName();<br>  ·创建对象实例:Car car=(Car)cls.newInstance()<br>  ·通过反射获取属性:brand:Field brand=cls.getField(“brand”);brand.get(car)car为一个Car的实例对象<br>  ·通过反射给属性赋值:brand.set(对象实例,参数);其中brand为一个方法对象<br>  ·得到所有的属性:Field[] fields=cls.getFields();<br>  ·什么是类加载器:Java源文件在经过Java编译器编译之后就被转换成Java字节码(.class文件),类加载器负责读取Java字节码,并转换成java.lang.Class类的一个实例,每个这样的实例用来表示一个Java类,通过此实例的newInstance()方法就可以创建出改类的一个对象<br>  ·通过类加载器来获取到类的Class对象<br>  ·(1)先得到类加载器ClassLoader cl=car.getClass().getClassLoader();<br>  ·(2)通过类加载器的到Class对象Class cls=cl.loadClass(“类的全路径”)<br>  ·类加载<br>  ·(1)静态加载:编译时加载相关的类<br>  ·(2)动态加载:运行时加载需要的类,如果运行时不用该类,即使不存在该类,则不报错<br>  ·(3)除了通过反射为动态加载,其他的基本为静态加载<br>  ·通过反射获取类的结构信息<br>  ·(1)getDeclareFields:获取本类中所有属性<br>  ·(2)getDeclareMethods:获取本类中的所有方法<br>  ·(3)getDeclareConstructors:获取本类中所有构造器<br>  ·通过反射调用对象<br>  ·(1)调用类中的public修饰的无参构造器<br>  ·(2)调用类中的指定的构造器<br>  ·爆破【暴力破解】,使用反射可以访问private构造器/方法/属性,反射面前,都是纸老虎<br>  ·可以使用构造器/方法/属性.setAccessible(true)进行爆破<br>  ·如果一个Class类型的对象,可以用它构造类的实例。调用getConstructor方法将得到一个Constructor类型的对象,然后使用newInstance方法构造一个实例<br>~~继承的设计技巧<br>  ·将公共操作和字段放在超类中<br>  ·不要使用受保护的字段<br>  ·除非所有的继承的方法都是有意义的,否则不要使用继承</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;java基础复习&lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;-1&quot;&gt;&lt;a href=&quot;#-1&quot; c</summary>
      
    
    
    
    <category term="java基础" scheme="https://100qin10086.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://100qin10086.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java基础</title>
    <link href="https://100qin10086.github.io/posts/b8b0eacd.html"/>
    <id>https://100qin10086.github.io/posts/b8b0eacd.html</id>
    <published>2023-08-29T11:44:06.000Z</published>
    <updated>2024-04-02T07:07:50.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>java基础复习</p></div></h1><h2 id="-1"><a href="#-1" class="headerlink" title></a><p class="p green">Java对象与类</p></h2><p>~~类的形象理解:我们可以将类想象成为制作小甜饼的模具，将对象想象为小甜饼<br>~~封装:有时称为数据隐藏是处理对象的一个重要概念。封装就是将数据和行为组合在一个包中，并对对象的使用者隐藏具体的实现方法<br>实现封装的关键在于，绝对不能让类中的方法直接访问其他类的实例字段，程序只能通过对象的方法与对象数据进行交互<br>事实上，在Java中，所有的类都源自一个”神通广大的超类”,他就是object<br>类之间的关系<br>在类之间,最常见的关系有<br>·依赖<br>·聚合<br>·继承<br>~~对象与对象变量<br>要想使用对象,首先必须构造对象,并指定其初始状态<br>在Java程序设计语言中，要使用构造器构造新实例，用来构造并初始化对象<br>~~日期类一共有三代<br>·第一代日期类<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//      第一代日期类</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前系统时间</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认输出的日期格式是国外的方式,因此需要对格式进行转化</span>        <span class="token comment">//创建SimpleDateFormat对象，可以指定相应的格式</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        运行结果        Tue Aug 29 20:15:29 CST 2023        2023年08月29日 20:15:29 星期二         */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>第二代日期类<br>第二代日期类为Calendar，它是一个抽象类，需要通过getInstence获取实例<br>它为特定瞬间与一组诸如YEAR,MONTH,DAY_OF_MONTH,HOURD等日历字段之间的转换提供了一些方法,并为操作日历字段提供了一些方法<br><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;第二代日期类        &#x2F;&#x2F;第二代日期类为Calendar，它是一个抽象类，需要通过getInstence获取实例        &#x2F;&#x2F;它为特定瞬间与一组诸如YEAR,MONTH,DAY_OF_MONTH,HOURD等日历字段之间的转换提供了一些方法,并为操作日历字段提供了一些方法        Calendar calendar &#x3D; Calendar.getInstance();        int i &#x3D; calendar.get(Calendar.YEAR);&#x2F;&#x2F;获取年份        int i1 &#x3D; calendar.get(Calendar.MONDAY);&#x2F;&#x2F;月份，但是此时要记得该月份是从0开始计算的，所以要加1        int i2 &#x3D; calendar.get(Calendar.DAY_OF_MONTH);&#x2F;&#x2F;日        int i3 &#x3D; calendar.get(Calendar.HOUR);&#x2F;&#x2F;时        int i4 &#x3D; calendar.get(Calendar.MINUTE);&#x2F;&#x2F;分        int i5 &#x3D; calendar.get(Calendar.SECOND);&#x2F;&#x2F;秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>第三代日期类<br>LocalDate只包含日期,可以获取日期字段<br>LocalTime只包含时间,可以获取时间字段<br>LocalDateTime包含日期+时间，可以获取日期和时间字段<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第三代日期类</span>        <span class="token comment">//LocalDate只包含日期,可以获取日期字段</span>        <span class="token comment">//LocalTime只包含时间,可以获取时间字段</span>        <span class="token comment">//LocalDateTime包含日期+时间，可以获取日期和时间字段</span>        <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行结果为2023-08-29T20:28:33.934，需要格式化</span>        <span class="token class-name">DateTimeFormatter</span> dateTimeFormatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> format1 <span class="token operator">=</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//其他LocalDateTime对象的方法</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Month</span> month <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hour <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minute <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> second <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第三地日期类可以对时间经行加减,单位是有很多</span>        <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100天后</span>        <span class="token class-name">LocalDateTime</span> localDateTime1 <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">minusMinutes</span><span class="token punctuation">(</span><span class="token number">3456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3456秒之前</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  如果需要多个对象实例并且对其做相同的操作,我们可以使用对象数组<br>  在类中可以用public标记实例字段,但这是一种很不好的做法,public数据字段容许程序中的任何方法对其进行读取和修改,这就完全破坏了封装<br>  构造器与其他方法有一个重要的不同，构造器总是结合new运算符来调用，不能对一个已经存在的对象调用构造器来达到重新设置实例字段的目的<br>  ⚠警告:不能再构造器中定义与实例字段同名的局部变量<br>  有些时候，可能想要获得或设置实例字段的值,那么需要提供下面三个内容<br>·一个私有的数据字段<br>·一个公共的字段访问器方法<br>·一个公共的字段更改器方法<br>~~final实例字段<br>  可以将实例字段定义为final。这样的字段必须在构造对象时初始化，也就是说，必须确保在每一个构造器执行之后，这个字段的值已经设置，并且以后不能修改这个字段<br>~~静态字段与静态方法<br>  静态字段：静态字段即使没有实例它也存在,简单的说,静态字段属于类,不属于任何单个对象<br>  静态常量：例如在Math类中定义一个静态常量，包括我们经常用的System.out就是一个静态常量<br>  静态方法：静态方法是不在对象上执行的方法，它没有隐式参数，在调用静态方法时，我们建议使用类名而不是对象来调用静态方法<br>~~方法参数<br>  方法参数有两种<br>  ·基本数据类型<br>  ·对象引用<br>  一个方法不可能修改基本数据类型的参数,而对象引用的参数就不同了，可以经行改变<br>  在传入一个对象参数时,它就会形成一个副本,这个副本与原来的对象都引入的是同一个对象,在方法结束后,副本就不用了,但是副本会将引入的对象改变,此时参数对象就改变了<br>~~总结一下在Java中对方法参数能做什么和不能做什么<br>  ·方法不能修改基本数据类型的参数(即数值型或布尔型)<br>  ·方法可以改变对象参数的状态<br>  ·方法不能让一个对象参数引用一个新的对象<br>~~对象构造<br>  ·重载:如果多个方法有相同的名字,不同的参数,便出现了重载(在查找重载方法时的过程被称为重载解析)<br>  ·Java允许重载任何方法,而不只是构造器方法<br>  ·默认字段初始化:如果在构造器中没有显示的为字段设置初值,那么就会被自动地赋为默认值<br>  ·无参构造器:很多类都包含一个无参构造器,由无参数构造器创建对象时,对象地状态会设置为适当地默认值<br>  ·如果你在写一个类时没有编写构造器,就会为你提供一个无参构造器。<br>  ·如果编写了有参构造器,在调用无参构造器是违法的<br>~~显示字段初始化:可以在类中直接为任何字段赋值，在执行构造器之前先完成这个赋值操作<br>  ·如果一个类地所有构造器都希望把某个特定地实例字段设置为同一个值,这个语法就特别有用<br>~~调用另外一个构造器<br>  ·关键字this指示一个方法地隐式函数,不过这个关键字还有另外一个含义,使用this(“参数”),可以调用同一个类地另外一个构造器<br>~~初始化块<br>  ·前面已经讲过两种初始化数据字段地方法:在构造器中设置值,在声明中赋值,实际上Java还有第三种机制,称为初始化块,在一个类地声明中,可以包含任意多个代码块。只要构造这个类地对象，这些块就会被执行<br>  ·无论使用哪个构造器构造对象,都会先执行字段。首先运行初始化块,然后才运行构造器地主体部分<br>  ·这种机制不是必需地,也不常见。通常会直接将初始化代码放在构造器中<br>  ·如果构造器地第一行调用了另一个构造器,则基于提供的参数执行第二个构造器<br>  ·静态初始化是最最最先执行的<br>~~类的导入<br>  ·一个类可以使用所属包中的所有类,以及其他包中的公共类<br>  ·我们可以采用两种方式访问另一个包中的公共类,第一种方式就是使用完全限定名,就是包名后面跟着类名<br>  ·第一种显然很繁琐,更简单且更常用的方式是使用import语句<br>~~包访问<br>  ·前面已经接触过访问修饰符public和private,标记维public的部分可以由任意类使用;标记为private的部分只能由定义它们的类使<br>~~类技巧设计<br>  ·1.一定要保证数据私有<br>  ·2.一定要对数据进行初始化<br>  ·3.不要再类中使用过多的基本类型:用其他类替换使用多个相关的基本类型<br>  ·4.不是所有的字段都需要单独的字段访问器和字段更改器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;java基础复习&lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;-1&quot;&gt;&lt;a href=&quot;#-1&quot; c</summary>
      
    
    
    
    <category term="java基础" scheme="https://100qin10086.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://100qin10086.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>赫夫曼编码</title>
    <link href="https://100qin10086.github.io/posts/8e49ee69.html"/>
    <id>https://100qin10086.github.io/posts/8e49ee69.html</id>
    <published>2023-06-26T08:52:50.000Z</published>
    <updated>2024-04-02T07:07:50.348Z</updated>
    
    <content type="html"><![CDATA[<div class="wow animate__flip" data-wow-duration data-wow-delay data-wow-offset data-wow-iteration><div class="note green icon-padding modern"><i class="note-icon fas fa-fan"></i><p><code>赫夫曼编码</code>动画效果。</p></div></div><h2 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>一.赫夫曼树</p></div></h2><div class="tag link"><a class="link-card" title="赫夫曼树" href="https://100qin10086.github.io/posts/8e49ee69.html"><div class="left"><img src="/posts/8e49ee69.htm/siteicon/64.png"></div><div class="right"><p class="text">赫夫曼树</p><p class="url">https://100qin10086.github.io/posts/8e49ee69.html</p></div></a></div><h2 id="-1"><a href="#-1" class="headerlink" title></a><div class="note purple no-icon flat"><p>一.赫夫编码</p></div></h2><p class="p red">注意</p><h3 id="-2"><a href="#-2" class="headerlink" title></a><div class="note purple no-icon flat"><p>赫夫曼编码基本介绍</p></div></h3><p>1) 赫夫曼编码也翻译为 哈夫曼编码(Huffman Coding)，又称霍夫曼编码，是一种编码方式, 属于一种程序算法<br>2) 赫夫曼编码是赫哈夫曼树在电讯通信中的经典的应用之一。<br>3) 赫夫曼编码广泛地用于数据文件压缩。其压缩率通常在 20%～90%之间<br>4) 赫夫曼码是可变字长编码(VLC)的一种。Huffman 于 1952 年提出一种编码方法，称之为最佳编码</p><h3 id="-3"><a href="#-3" class="headerlink" title></a><div class="note purple no-icon flat"><p>编码原理解析</p></div></h3><h4 id="通信领域中信息的处理方式-1-定长编码"><a href="#通信领域中信息的处理方式-1-定长编码" class="headerlink" title="通信领域中信息的处理方式 1-定长编码"></a>通信领域中信息的处理方式 1-定长编码</h4><p>例如 :<br>I like java  共11个字符包括空格<br>转换成ASCII:105 32 108 105 107 106 97 118 97<br>对应的二进制:01101001 00100000 01101100 01101001 01101011 01101010 01100001 01110110 01100001  共80个字符<br>可以看到编码后的大小反而比原来的大小更大,所以这个编码效率不是很高</p><h4 id="通信领域中信息的处理方式-2-变长编码"><a href="#通信领域中信息的处理方式-2-变长编码" class="headerlink" title="通信领域中信息的处理方式 2-变长编码"></a>通信领域中信息的处理方式 2-变长编码</h4><p>例如 :<br>I like java  共11个字符包括空格<br>i:2,l:1,k:1,e:1,j:1,a:2,v:1;  说明:按照各个字母出现的次数编码<br>:0,l:1,k:10,e:11,j:100,v:101,a:110,j:111;<br>所以编码后的为：110011101010100110101101;<br>看以看出编码后的大小变大并且可以匹配到重复编码,所以效率也不高</p><h4 id="通信领域中信息的处理方式-3-赫夫曼编码"><a href="#通信领域中信息的处理方式-3-赫夫曼编码" class="headerlink" title="通信领域中信息的处理方式 3-赫夫曼编码"></a>通信领域中信息的处理方式 3-赫夫曼编码</h4><p>传输的 字符串 i like like like java do you like a java<br>·d:1 y:1 u:1 j:2 v:2 o:2 l:4 k:4 e:4 i:5 a:5 :9 // 各个字符对应的个数<br>·按照上面字符出现的次数构建一颗赫夫曼树, 次数作为权值<br>步骤：<br>构成赫夫曼树的步骤：<br>1) 从小到大进行排序, 将每一个数据，每个数据都是一个节点 ， 每个节点可以看成是一颗最简单的二叉树<br>2) 取出根节点权值最小的两颗二叉树<br>3) 组成一颗新的二叉树, 该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和<br>4) 再将这颗新的二叉树，以根节点的权值大小 再次排序， 不断重复 1-2-3-4 的步骤，直到数列中，所有的数据都被处理，就得到一颗赫夫曼树<br>   <a href="https://imgse.com/i/pCUrHDs"><img src="https://s1.ax1x.com/2023/06/26/pCUrHDs.png" alt="pCUrHDs.png"></a><br>5) 根据赫夫曼树，给各个字符,规定编码 (前缀编码)， 向左的路径为 0 向右的路径为 1 ， 编码<br>   如下:<br>   o: 1000 u: 10010 d: 100110 y: 100111 i: 101<br>   a : 110 k: 1110 e: 1111 j: 0000 v: 0001<br>   l: 001 : 01<br>6) 按照上面的赫夫曼编码，我们的”i like like like java do you like a java” 字符串对应的编码为<br>   10101001101111011110100110111101111010011011110111101000011000011100110011110000110<br>   01111000100100100110111101111011100100001100001110 通过赫夫曼编码处理 长度为 133<br>   长度为 ： 133<br>   说明:<br>   原来长度是 359 , 压缩了 (359-133) / 359=62.9%<br>   此编码满足前缀编码, 即字符的编码都不能是其他字符编码的前缀。不会造成匹配的多义性<br>   赫夫曼编码是无损处理方案<br>   注意事项<br>   注意, 这个赫夫曼树根据排序方法不同，也可能不太一样，这样对应的赫夫曼编码也不完全一样，但是 wpl 是<br>   一样的，都是最小的, 最后生成的赫夫曼编码的长度是一样，比如: 如果我们让每次生成的新的二叉树总是排在权<br>   值相同的二叉树的最后一个</p><h3 id="最佳实践-数据压缩-创建赫夫曼树"><a href="#最佳实践-数据压缩-创建赫夫曼树" class="headerlink" title="最佳实践-数据压缩(创建赫夫曼树)"></a>最佳实践-数据压缩(创建赫夫曼树)</h3><h4 id="第一步-得到结点的权值"><a href="#第一步-得到结点的权值" class="headerlink" title="第一步,得到结点的权值"></a>第一步,得到结点的权值</h4><p>根据传入的字符串,将其转化为byte数组,并统计每个字母出现的个数作为权值,而字母最为树的结点,并将每个字母出现的次数与字母封装到一个结点中</p><h4 id="-4"><a href="#-4" class="headerlink" title></a><div class="note purple no-icon flat"><p>代码实现</p></div></h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private static List&lt;Node&gt; getNodes(byte[] bytes)&#123;        &#x2F;&#x2F;创建ArrayList        List&lt;Node&gt; nodes &#x3D; new ArrayList&lt;Node&gt;();        &#x2F;&#x2F;存储每一个byte出现的次数-&gt;map        Map&lt;Byte, Integer&gt; counts &#x3D; new HashMap&lt;&gt;();        for (byte b : bytes) &#123;            Integer count &#x3D; counts.get(b);            if (count&#x3D;&#x3D;null)&#123;                counts.put(b,1);            &#125;else&#123;                counts.put(b,count+1);            &#125;        &#125;        &#x2F;&#x2F;把每个键值对转成一个Node对象,并加入nodes集合        for (Map.Entry&lt;Byte, Integer&gt; entry : counts.entrySet()) &#123;            nodes.add(new Node(entry.getKey(), entry.getValue()));        &#125;        return nodes;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二步-创建赫夫曼树"><a href="#第二步-创建赫夫曼树" class="headerlink" title="第二步,创建赫夫曼树"></a>第二步,创建赫夫曼树</h4><p>先对结点构成的集合进行排序,在每次从结点构成的集合中每次取出两个最小的结点,构成一个新的结点,将取出的最小的两个结点作为新结点的子结点,按照小的放到左边,大的放到右边的规则,并将新结点放入到集合中,循环次过程,直到集合中只剩一个结点为止,此时这个结点就为赫夫曼树的头结点</p><h4 id="-5"><a href="#-5" class="headerlink" title></a><div class="note purple no-icon flat"><p>代码实现</p></div></h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">    private static Node createHuffmanTree(List&lt;Node&gt; nodes)&#123;        while(nodes.size()&gt;1)&#123;            Collections.sort(nodes);            Node left &#x3D; nodes.get(0);            Node right &#x3D; nodes.get(1);            Node parent &#x3D; new Node(null,left.weight + right.weight);            parent.left&#x3D;left;            parent.right&#x3D;right;            nodes.remove(left);            nodes.remove(right);            nodes.add(parent);        &#125;        return nodes.get(0);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第三步-得到赫夫曼编码"><a href="#第三步-得到赫夫曼编码" class="headerlink" title="第三步,得到赫夫曼编码"></a>第三步,得到赫夫曼编码</h4><p>遍历赫夫曼树,使用拼接的方法得到每一个字母的编码,根据左子结点为0,右子结点为1的规则,将每个字母的编码放入到Map集合中</p><h4 id="-6"><a href="#-6" class="headerlink" title></a><div class="note purple no-icon flat"><p>代码实现</p></div></h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private static void getCodes(Node node,String code,StringBuilder stringBuilder)&#123;        StringBuilder stringBuilder2 &#x3D; new StringBuilder(stringBuilder);        &#x2F;&#x2F;将传入的code加入到stringBuilder2        stringBuilder2.append(code);        if (node!&#x3D;null)&#123;&#x2F;&#x2F;如果node&#x3D;&#x3D;null不处理            &#x2F;&#x2F;判断当前结点是叶子结点还是非叶子结点            if (node.data&#x3D;&#x3D;null)&#123;&#x2F;&#x2F;非叶子结点                &#x2F;&#x2F;递归                &#x2F;&#x2F;向左                getCodes(node.left,&quot;0&quot;,stringBuilder2);                &#x2F;&#x2F;向右                getCodes(node.right,&quot;1&quot;,stringBuilder2);            &#125;else&#123;&#x2F;&#x2F;说明是一个叶子结点                &#x2F;&#x2F;就表示找到某个叶子结点的最后                huffmanCodes.put(node.data,stringBuilder2.toString());            &#125;        &#125;    &#125;private static Map&lt;Byte,String&gt; getCodes(Node root)&#123;        if (root&#x3D;&#x3D;null)&#123;            return  null;        &#125;        &#x2F;&#x2F;处理root的左子树        getCodes(root.left,&quot;0&quot;,stringBuilder);        &#x2F;&#x2F;处理root的右子树        getCodes(root.right,&quot;1&quot;,stringBuilder);        return huffmanCodes;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第四步-通过赫夫曼编码表进行编码"><a href="#第四步-通过赫夫曼编码表进行编码" class="headerlink" title="第四步,通过赫夫曼编码表进行编码"></a>第四步,通过赫夫曼编码表进行编码</h4><p>遍历字符串根据赫夫曼编码表,依次得到每个字母的编码,并拼接到一个字符串中,因为如果直接将赫夫曼编码表编码后它的大小会比原先的更大,所以将其转成10进制存储,可以更加的压缩空间<br>将赫夫曼编码后的每八位进行转10进制,最后得到是一串10进制数字</p><h4 id="-7"><a href="#-7" class="headerlink" title></a><div class="note purple no-icon flat"><p>代码实现</p></div></h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private static byte[] zip(byte[] bytes,Map&lt;Byte,String&gt;huffmanCode)&#123;        &#x2F;&#x2F;1.利用huffmanCodes将bytes转成赫夫曼编码对应的字符串        StringBuilder stringBuilder &#x3D; new StringBuilder();        &#x2F;&#x2F;遍历bytes数组        for (byte b : bytes) &#123;            stringBuilder.append(huffmanCode.get(b));        &#125;        &#x2F;&#x2F;将101010001011110111101001101111011110。。。转成byte[]        &#x2F;&#x2F;统计返回byte[] huffmanCodeBytes长度        int len;        if (stringBuilder.length()%8&#x3D;&#x3D;0)&#123;            len&#x3D;stringBuilder.length()&#x2F;8;        &#125;else&#123;            len&#x3D;stringBuilder.length()&#x2F;8+1;        &#125;        &#x2F;&#x2F;创建存储压缩后的byte数组        byte[] huffmanCodeBytes&#x3D;new byte[len];        int index&#x3D;0;&#x2F;&#x2F;记录是第几个byte        for (int i&#x3D;0;i&lt;stringBuilder.length();i+&#x3D;8)&#123;&#x2F;&#x2F;因为每八位对应一个byte            String strByte;            if (i+8&gt;stringBuilder.length())&#123;&#x2F;&#x2F;不够8位                strByte&#x3D;stringBuilder.substring(i);            &#125;else &#123;                strByte &#x3D; stringBuilder.substring(i, i + 8);            &#125;            &#x2F;&#x2F;将strByte转成一个byte，放入到by            huffmanCodeBytes[index]&#x3D;(byte) Integer.parseInt(strByte,2);            index++;        &#125;        return huffmanCodeBytes;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第五步-通过赫夫曼编码表进行解码"><a href="#第五步-通过赫夫曼编码表进行解码" class="headerlink" title="第五步,通过赫夫曼编码表进行解码"></a>第五步,通过赫夫曼编码表进行解码</h4><p>先通过传入的一串10进制树,将其转为二进制1,这地方要注意补位，<br>在将赫夫曼编码表进行反转,为了解码方便，<br>在通过匹配算法通过赫夫曼编码表进行解码,因为赫夫曼编码是前缀编码,不会出现重复</p><h4 id="-8"><a href="#-8" class="headerlink" title></a><div class="note purple no-icon flat"><p>代码实现</p></div></h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private static byte[] decode(Map&lt;Byte,String&gt;huffmanCodes,byte[] huffmanBytes)&#123;        &#x2F;&#x2F;1.先得到huffmanBytes对应的二进制字符串,形式10101000101111011110100110        StringBuilder stringBuilder &#x3D; new StringBuilder();        &#x2F;&#x2F;将byte数组转成二进制的字符串        for (int i&#x3D;0;i&lt;huffmanBytes.length;i++)&#123;            &#x2F;&#x2F;判断是不是最后一个字节            boolean flag&#x3D;(i&#x3D;&#x3D;huffmanBytes.length-1);            stringBuilder.append(byteToBitString(!flag,huffmanBytes[i]));        &#125;        &#x2F;&#x2F;把字符串按照指定的赫夫曼编码进行解码        &#x2F;&#x2F;吧赫夫曼编码表进行交换，因为要反向查询        HashMap&lt;String, Byte&gt; map &#x3D; new HashMap&lt;&gt;();        for (Map.Entry&lt;Byte,String&gt; entry:huffmanCodes.entrySet())&#123;            map.put(entry.getValue(), entry.getKey());        &#125;        &#x2F;&#x2F;创建一个集合存放byte        List&lt;Byte&gt; list&#x3D;new ArrayList&lt;&gt;();        for (int i&#x3D;0;i&lt;stringBuilder.length(); )&#123;            int count&#x3D;1;&#x2F;&#x2F;小的计数器            boolean flag&#x3D;true;            Byte b&#x3D;null;            while (flag)&#123;                &#x2F;&#x2F;递增的取出key                String key &#x3D; stringBuilder.substring(i, i + count);&#x2F;&#x2F;i不动,让count移动,指定匹配到一个字符                b&#x3D; map.get(key);                if (b&#x3D;&#x3D;null)&#123;&#x2F;&#x2F;说明没有匹配到                    count++;                &#125;else&#123;                    &#x2F;&#x2F;匹配到                    flag&#x3D;false;                &#125;            &#125;            list.add(b);            i+&#x3D;count;        &#125;        &#x2F;&#x2F;吧list中的数据放入到byte[]        byte[] b &#x3D; new byte[list.size()];        for (int i&#x3D;0;i&lt; b.length;i++)&#123;            b[i]&#x3D;list.get(i);        &#125;        return b;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;wow animate__flip&quot; data-wow-duration data-wow-delay data-wow-offset data-wow-iteration&gt;&lt;div class=&quot;note green icon-padding moder</summary>
      
    
    
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>图 深度优先 广度优先</title>
    <link href="https://100qin10086.github.io/posts/4f60da63.html"/>
    <id>https://100qin10086.github.io/posts/4f60da63.html</id>
    <published>2023-04-16T09:44:14.000Z</published>
    <updated>2024-04-02T07:07:50.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>图的基本介绍</p></div></h1><h2 id="图的说明"><a href="#图的说明" class="headerlink" title="图的说明"></a>图的说明</h2><p>图是一种数据结构,其中节点可以具有零个或多个相邻元素。两个结点之间的连接称为边。结点也可以称为顶点</p><h2 id="图的常用概念"><a href="#图的常用概念" class="headerlink" title="图的常用概念"></a>图的常用概念</h2><p>1)顶点<br>2)边 顶点与顶点间的连线<br>3)路径 顶点间的距离<br>4)无向图 顶点之间的连接没有方向<br>5)有向图 顶点之间的连接有方向<br>6)带权图 边带权值的图，也叫网</p><h2 id="图的表示方法"><a href="#图的表示方法" class="headerlink" title="图的表示方法"></a>图的表示方法</h2><p>图的表示方法有两种，二维数组表示(邻接矩阵)；链表表示(邻接表)</p><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><a href="https://imgse.com/i/p99bBhq"><img src="https://s1.ax1x.com/2023/04/16/p99bBhq.md.png" alt="p99bBhq.md.png"></a><br><a href="https://imgse.com/i/p99br90"><img src="https://s1.ax1x.com/2023/04/16/p99br90.md.png" alt="p99br90.md.png"></a></p><h2 id="图的实现基本介绍"><a href="#图的实现基本介绍" class="headerlink" title="图的实现基本介绍"></a>图的实现基本介绍</h2><p>1.创建一个集合表示图的顶点<br>2.创建一个二维数组，存储图对应的邻接矩阵<br>3.创建一个布尔类型的数组用来判断是否输出过【在深度优先和广度优先是会用】<br>4.创建图的时候直接往存放结点的集合中放<br>5.结点之间是否相连根据二维数组表示</p><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="图的深度优先遍历算法步骤"><a href="#图的深度优先遍历算法步骤" class="headerlink" title="图的深度优先遍历算法步骤"></a>图的深度优先遍历算法步骤</h3><p>1.访问初始结点v,并标记结点v为以访问<br>2.查找结点v的第一个邻接结点w<br>3.若w存在，则继续执行4,如果w不存在，则回到第一步，将从v的下一个结点继续<br>4.若w未被访问，对w进行深度优先遍历递归(即把w当作另一个v，然后进行步骤123)<br>5.查找结点v的w邻接结点的下一个邻接结点，转到步骤3<br>  A B C D E<br>A 0 1 1 0 0<br>B 1 0 1 1 1<br>C 1 1 0 0 0<br>D 0 1 0 0 0<br>E 0 1 0 0 0<br>以这个图为例，进行深度优先遍历<br>1.先输出A,标记A以访问<br>2.找到A的第一个邻接结点B<br>3.B存在，且B未被访问，输出B，且标记B已经被访问,<br>4.查找B的第一个邻接结点C,C存在，且C未被访问，输出C，且标记C未以访问<br>5.因为C没有下一个相邻的结点，所以回到结点B，找B结点的下下一个结点D，<br>6.结点D未被访问，输出D，且标记D已经被访问<br>7.因为D没有下一个相邻的结点,所以回到结点B，找B结点的下下下一个结点E<br>8.结点E未被访问，输出E，且标记E未已经被访问</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>1.先输出当前节点，并设置当前节点为已读<br>2.查找当前结点的第一个相邻的结点B<br>3.输出B，设置B为已读，查找B结点相邻的第一个结点C<br>4.输出C，设置C结点已读，此时C结点后面在没有与之相连的结点，<br>5.此时就需要dfs重载，遍历剩下到不了的结点</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> vertexList<span class="token punctuation">;</span> <span class="token comment">//存储顶点集合</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">;</span><span class="token comment">//存储图对应的邻接矩阵</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numOfEdges<span class="token punctuation">;</span><span class="token comment">//表示遍的数目</span>    <span class="token comment">//定义数字boolean[]，记录某个结点是否被访问</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//测试图是否创建成功</span>        <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token class-name">VertexValue</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//创建图对象</span>        <span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> <span class="token class-name">VertexValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span><span class="token function">insertVertex</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span>isVisited<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//初始化矩阵和vertexList，也就是一共几个矩阵</span>        edges<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        vertexList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        numOfEdges<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        isVisited <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//得到第一个邻接结点的下标w</span>    <span class="token comment">/**     *     * @param index     * @return 如果存在就返回对应的小标，否则就返回-1；     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edges<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据前一个邻接结点的下表来获取下一个邻接结点</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span><span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>v2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//深度优先遍历算法</span>    <span class="token comment">//i 第一次就是0</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//首先我们访问该节点，输出</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getValueByIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//讲结点设置为已经访问</span>        isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">//查找结点i的第一个邻接结点w</span>        <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>w<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//说明有</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果w存在，但是已经被访问了,判断所有与i相连的结点</span>            w<span class="token operator">=</span><span class="token function">getNextNeighbor</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对dfs 进行一个重载，遍历我们，并进行dfs</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//遍历所有的结点，进行dfs</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//图中常用的方法</span>    <span class="token comment">//返回结点的个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//显示图所对应的矩阵</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> link <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//得到边的个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfEdges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> numOfEdges<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回结点i(下标)对应的数据 0->A,1->B,2->C;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValueByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回v1和v2的权值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span><span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//插入结点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertVertex</span><span class="token punctuation">(</span><span class="token class-name">String</span> vertex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        vertexList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加边</span>    <span class="token comment">/**     *     * @param v1 表示点的下标即是第几个顶点"A"-"B" "A"->0 "B"->1     * @param v2 和上面一样     * @param weight 为0表示没有相连，为1表示相连     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span><span class="token keyword">int</span> v2<span class="token punctuation">,</span><span class="token keyword">int</span> weight<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token operator">=</span>weight<span class="token punctuation">;</span>        edges<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token operator">=</span>weight<span class="token punctuation">;</span>        numOfEdges<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 图的表示方式 * 1.邻接矩阵 * 2.邻接链表 */</span><span class="token comment">/** * 图的遍历介绍 * 1.图的深度优先搜索 * 每次都在访问当前结点后首先访问当前结点的第一个邻接结点，深度优先搜索是一个递归的过程 * 深度优先遍历算法步骤 * 1）.访问初始节点v，并标记结点v为已访问 * 2）.查找结点v的第一个邻接结点w * 3）.若w存在，则继续执行4，如果w不存在，则回到第一步，讲从v的下一个结点继续 * 4）.若w未被访问，对w进行深度优先遍历递归(即把w当作另一个v，然后进行步骤123) * 5）.查找结点v的w的邻接结点的下一个临接结点，转到步骤3 * 2.图的广度优先搜索 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图的广度优先遍历"><a href="#图的广度优先遍历" class="headerlink" title="图的广度优先遍历"></a>图的广度优先遍历</h2><h3 id="图的广度优先搜索"><a href="#图的广度优先搜索" class="headerlink" title="图的广度优先搜索"></a>图的广度优先搜索</h3><p>类似于一个分层搜索的过程，广度优先遍历需要使用一个队列以保持访问过的结点的顺序，以便按这个顺序来访问这些结点的邻接结点</p><h3 id="广度优先遍历的算法步骤"><a href="#广度优先遍历的算法步骤" class="headerlink" title="广度优先遍历的算法步骤"></a>广度优先遍历的算法步骤</h3><p>1.访问初始结点v并标记结点v为已访问<br>2.结点v入队列<br>3.当队列非空时，继续执行，否则算法结束<br>4.出队列，取得队头结点u<br>5.查找结点u的第一个邻接结点w<br>6.若结点u的邻接结点w不存在，则转到步骤3，否则循环执行以下三个步骤<br>6.1 若结点w尚未被访问，则访问结点w并标记为已访问<br>6.2 结点w入队列<br>6.3 查找结点u的继w邻接结点后的下一个邻接结点我，转到步骤6</p><h3 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h3><p>1.传入的为1结点，先输出1结点，并且设置1结点为以访问<br>2.将1结点加入到队列queue.addLast<br>3.判断队列是否为空，如果队列不为空，则取出队列的头节点下标u<br>4.得到头节点的第一个邻接结点的下标w，且w没有被访问过<br>5.如果找到了w结点，则输出，并且标记w已经访问，同时将w入队列<br>6.如果w被访问过，则以u为前驱结点，找到w后面的下一个结点 w=getNextNeighbor(u,w)<br>7.最后重载bfs</p><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u<span class="token punctuation">;</span><span class="token comment">//表示队列的头节点对应的下标</span>        <span class="token keyword">int</span> w<span class="token punctuation">;</span><span class="token comment">//邻接结点w</span>        <span class="token comment">//队列,结点访问的顺序</span>        <span class="token class-name">LinkedList</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//访问结点，输出结点信息</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getValueByIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"=>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//标识为已访问</span>        isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">//将结点加入队列</span>        queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//取出队列的头节点下标</span>            u <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//得到第一个邻接结点的下标w</span>            w<span class="token operator">=</span><span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>w<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//找到</span>                <span class="token comment">//是否访问过</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getValueByIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"=>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//标记已经访问</span>                    isVisited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment">//入队</span>                    queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//以u为前驱结点，找w后面的下一个邻接结点</span>                w<span class="token operator">=</span><span class="token function">getNextNeighbor</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//体现出广度优先</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//遍历所有的节点，都进行广度优先</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">bfs</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;图的基本介绍&lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;图的说明&quot;&gt;&lt;a href=&quot;#图的说明&quot;</summary>
      
    
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>手动实现SpringMVC底层机制</title>
    <link href="https://100qin10086.github.io/posts/a8391e97.html"/>
    <id>https://100qin10086.github.io/posts/a8391e97.html</id>
    <published>2023-04-09T09:32:32.000Z</published>
    <updated>2024-04-02T07:07:50.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>手动实现SpringMVC底层机制【核心分发控制器+Controller和Service注入容器+对象自动装配+控制器方法获取参数+视图解析+返回JSON格式数据】</p></div></h1><h1 id="-1"><a href="#-1" class="headerlink" title></a><div class="note purple no-icon flat"><p>实现任务阶段1-开发QgqDispatcher</p></div></h1><h2 id="说明：编写QgqDispatcherServlet充当原生的DispatcherServlet-即核心控制器"><a href="#说明：编写QgqDispatcherServlet充当原生的DispatcherServlet-即核心控制器" class="headerlink" title="说明：编写QgqDispatcherServlet充当原生的DispatcherServlet(即核心控制器);"></a>说明：编写QgqDispatcherServlet充当原生的DispatcherServlet(即核心控制器);</h2><h2 id="分析示意图"><a href="#分析示意图" class="headerlink" title="分析示意图"></a>分析示意图</h2><p><a href="https://imgse.com/i/ppbEmm4"><img src="https://s1.ax1x.com/2023/04/09/ppbEmm4.md.png" alt="ppbEmm4.md.png"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="创建QgqDispatcherServlet"><a href="#创建QgqDispatcherServlet" class="headerlink" title="创建QgqDispatcherServlet"></a>创建QgqDispatcherServlet</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QgqDispatcherServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span>            <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span>            <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建qgqspringmvc-xml充当原来的applicationContext-mvc-xml文件-就是spring容器的配置文件，比如指定要扫描那些包下的类"><a href="#创建qgqspringmvc-xml充当原来的applicationContext-mvc-xml文件-就是spring容器的配置文件，比如指定要扫描那些包下的类" class="headerlink" title="创建qgqspringmvc.xml充当原来的applicationContext-mvc.xml文件(就是spring容器的配置文件，比如指定要扫描那些包下的类)"></a>创建qgqspringmvc.xml充当原来的applicationContext-mvc.xml文件(就是spring容器的配置文件，比如指定要扫描那些包下的类)</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    指定要扫描的基本包以及子包的java类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qgq.controller,com.qgq.service<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改web-xml文件，完成对核心-前端控制器的配置"><a href="#修改web-xml文件，完成对核心-前端控制器的配置" class="headerlink" title="修改web.xml文件，完成对核心/前端控制器的配置"></a>修改web.xml文件，完成对核心/前端控制器的配置</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">web-app</span> <span class="token name">PUBLIC</span>        <span class="token string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span>        <span class="token string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--  配置QgqDispatcherServlet 作为我们自己的前端控制器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>QgqDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.qgq.qgqspringmvc.servlet.QgqDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--给QgqDispatcherServlet配置参数，指定要操作的spring容器的配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:qgqspringmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--再tomcat启动时就自动加载--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--因为QgqDispatcherServlet作为前端控制器,所以要拦截所有请求--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>QgqDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="-2"><a href="#-2" class="headerlink" title></a><div class="note purple no-icon flat"><p>实现任务阶段2-完成客户端/浏览器可以请求控制层</p></div></h1><h2 id="创建自己的Controller和自定义注解"><a href="#创建自己的Controller和自定义注解" class="headerlink" title="创建自己的Controller和自定义注解"></a>创建自己的Controller和自定义注解</h2><h3 id="自定义Controller注解"><a href="#自定义Controller注解" class="headerlink" title="自定义Controller注解"></a>自定义Controller注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>qgqspringmvc<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2023/4/7 14:31 * @Version 1.0 * 我亦无他，惟手熟尔 * 该注解用于表示一个控制器组件 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token comment">//这个注解的作用是可以通过反射获得该注解</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Controller</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义RequestMapping注解"><a href="#自定义RequestMapping注解" class="headerlink" title="自定义RequestMapping注解"></a>自定义RequestMapping注解</h3><pre class="line-numbers language-none"><code class="language-none">package com.qgq.qgqspringmvc.annotation;import java.lang.annotation.*;&#x2F;** * @Author 秦家大胖 * @Date 2023&#x2F;2&#x2F;11 15:21 * @Version 1.0 * RequestMapping 注解用于指定控制器-方法的映射路径 *&#x2F;@Target(ElementType.METHOD)&#x2F;&#x2F;用于指定被修饰的Annotation能用于修饰那些元素@Retention(RetentionPolicy.RUNTIME)&#x2F;&#x2F;用于指定该Annotation可以保留多长时间，编译器把注解记录在class文件中，当运行Java程序时，JVM会保留注释通过反射获取该注解@Documented&#x2F;&#x2F;在生成文档时，可以看到该注解public @interface RequestMapping &#123;    String value() default &quot;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写XMLParser工具类，可以解析qgqspringmvc-xml-得到要扫描的包"><a href="#编写XMLParser工具类，可以解析qgqspringmvc-xml-得到要扫描的包" class="headerlink" title="编写XMLParser工具类，可以解析qgqspringmvc.xml,得到要扫描的包"></a>编写XMLParser工具类，可以解析qgqspringmvc.xml,得到要扫描的包</h3><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.创建getbasePackage(String xmlFile)传入xml文件名<br>2.使用dom4j技术对xml文件经行读取<br>3.要注意”component-scan”是根目录下bean下的一个子目录，而”base-package”是”component-scan”目录下的一个属性<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>qgqspringmvc<span class="token punctuation">.</span>xml</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">DocumentException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">Element</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">SAXReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2023/4/7 14:38 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLParser</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getBasePackage</span><span class="token punctuation">(</span><span class="token class-name">String</span> xmlFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//整个解析的过程是前面讲过的</span>        <span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过得到类的加载路径->获取到spring配置文件</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">XMLParser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>xmlFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//得到xml文件的文档</span>            <span class="token class-name">Document</span> document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Element</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Element</span> componentScanElement <span class="token operator">=</span> rootElement<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"component-scan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> basePackage <span class="token operator">=</span> componentScanElement<span class="token punctuation">.</span><span class="token function">attribute</span><span class="token punctuation">(</span><span class="token string">"base-package"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> basePackage<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DocumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="开发QgqWebApplicationContext，充当Spring容器，得到扫描类的全路径列表，完成功能说明-把指定的目录包括子目录下的Java类的全路径扫描到集合中"><a href="#开发QgqWebApplicationContext，充当Spring容器，得到扫描类的全路径列表，完成功能说明-把指定的目录包括子目录下的Java类的全路径扫描到集合中" class="headerlink" title="开发QgqWebApplicationContext，充当Spring容器，得到扫描类的全路径列表，完成功能说明-把指定的目录包括子目录下的Java类的全路径扫描到集合中"></a>开发QgqWebApplicationContext，充当Spring容器，得到扫描类的全路径列表，完成功能说明-把指定的目录包括子目录下的Java类的全路径扫描到集合中</h3><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.根据上面写的XMLParser工具类，得到要扫描的包<br>2.因为要扫描的包可能不知不止一个，所以再配置文件中将要扫描的包用,号隔开，所以将得到的要扫描的包同样用,号隔开，这样就将全部要扫描的包得到<br>3，调用方法scanPackage方法对各个包进行扫描,获取到classFullPathList<br>4.scanPackage分析先通过类加载器url=this.getClass().getClassLoader().getResource(“/“ + pack.replaceAll(“\.”, “/“))得到真正执行的类，形式为D:\idea_java_projects\hsp-springmvc\target\hsp-springmvc\WEB-INF\classes\com\hspedu\controller\MonsterController.class<br>5.取出路径(url.getFile),因为路径也可以作为文件,所以File dir = new File(path);<br>6.扫描这个目录，及其子目录dir.listFile(),如果是目录,则递归扫描(需要带上子目录的目录名),如果是文件，获取到类的全路径，去掉.class放入到集合中，因为这些路径到时候要通过反射实例化对象<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scanPackage</span><span class="token punctuation">(</span><span class="token class-name">String</span> pack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//通过类的加载器得到指定的包对应的工作路径[绝对路径]</span>        <span class="token class-name">URL</span> resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/"</span> <span class="token operator">+</span> pack<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据得到的路径对其进行扫描，吧类的全路径保存到classFullPathList</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//再io中把目录也视为一个文件</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历file</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">scanPackage</span><span class="token punctuation">(</span>pack <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> classFullPath <span class="token operator">=</span> pack <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                classFullPathList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>classFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="完善QgqWebApplicationContext，充当Spring容器-实例化对象到容器中"><a href="#完善QgqWebApplicationContext，充当Spring容器-实例化对象到容器中" class="headerlink" title="完善QgqWebApplicationContext，充当Spring容器-实例化对象到容器中"></a>完善QgqWebApplicationContext，充当Spring容器-实例化对象到容器中</h3><h3 id="完成功能说明，将扫描到的类，再满足条件的情况下-即有相应的注解-Controller-Service-反射注入到ioc容器"><a href="#完成功能说明，将扫描到的类，再满足条件的情况下-即有相应的注解-Controller-Service-反射注入到ioc容器" class="headerlink" title="完成功能说明，将扫描到的类，再满足条件的情况下(即有相应的注解@Controller@Service),反射注入到ioc容器"></a>完成功能说明，将扫描到的类，再满足条件的情况下(即有相应的注解@Controller@Service),反射注入到ioc容器</h3><h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.创建一个类型为 ConcurrentHashMap的ioc用于存放反射后的bean对象<br>2.初始化自定义的spring容器，目标就是要把@Controller等等初始化到容器中<br>3.初始化具体过程，再init中先完成得到要扫描的包，以及将要扫描的包极其子包中文件放入到Arraylist中，再实例化扫描到的类<br>4.实例化扫描到的类，先遍历存放路径的集合，通过反射创建实例，再根据实例判断其是否有@Controller注解<br>5.如果类有@Controller注解，得到该类的类名(首字母小写)作为key，再得到实例化对象作为value放入到ioc中<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//判断是否扫描到了类</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>classFullPathList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> classFullPath <span class="token operator">:</span> classFullPathList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token comment">//得到类名数字目小写</span>                   <span class="token class-name">String</span> simpleName <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   simpleName <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">uncapitalize</span><span class="token punctuation">(</span>simpleName<span class="token punctuation">)</span><span class="token punctuation">;</span>                   ioc<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>simpleName<span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="完成请求URL和控制器方法的映射关系"><a href="#完成请求URL和控制器方法的映射关系" class="headerlink" title="完成请求URL和控制器方法的映射关系"></a>完成请求URL和控制器方法的映射关系</h3><h3 id="完成功能说明-创建一个类，将-Controller修饰的bean，-RequestMapping的url路径，以及-RequestMapping修饰的方法封装到一个对象中"><a href="#完成功能说明-创建一个类，将-Controller修饰的bean，-RequestMapping的url路径，以及-RequestMapping修饰的方法封装到一个对象中" class="headerlink" title="完成功能说明 创建一个类，将@Controller修饰的bean，@RequestMapping的url路径，以及@RequestMapping修饰的方法封装到一个对象中"></a>完成功能说明 创建一个类，将@Controller修饰的bean，@RequestMapping的url路径，以及@RequestMapping修饰的方法封装到一个对象中</h3><h3 id="示意图分析"><a href="#示意图分析" class="headerlink" title="示意图分析"></a>示意图分析</h3><p><a href="https://imgse.com/i/ppbxfw6"><img src="https://s1.ax1x.com/2023/04/10/ppbxfw6.md.png" alt="ppbxfw6.md.png"></a></p><h3 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.创建一个QgqHandler类，里面存放的为@RequestMapping的url和对应的控制器-方法映射关系保存到集合中<br>2.在自己创建的核心控制器 QgqDispatcherServlet中创建ArrayList集合，存放url和控制器-方法的映射关系<br>3.创建方法initHandlerMapping，完成控制器层url—&gt;Controller—&gt;方法的映射关系(该关系封装到QgqHandler对象)，并放入到handlerList集合中<br>4.initHandlerMapping方法的具体的操作，先遍历自定义容器中的ioc判断里面的实例化对象是否有@Controller注解<br>5.如果有@Controller注解，得到该实例化的所有方法并遍历，判断这些方法是否有注解@RequestMapping。<br>6.如果有@RequestMapping注解，得到其的value值，并将url-控制器-方法封装到QgqHandler对象中，最后放入到ArrayList中<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>qgqWebApplicationContext<span class="token punctuation">.</span>ioc<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//判断当前ioc容器是否为空</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//遍历ioc容器的bean对象，然后进行url映射器处理</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> qgqWebApplicationContext<span class="token punctuation">.</span>ioc<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果注入的Bean是Controller</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//取出所有的方法</span>                <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//遍历</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> declaredMethod <span class="token operator">:</span> declaredMethods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>declaredMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">RequestMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">String</span> url <span class="token operator">=</span>declaredMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RequestMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">QgqHandler</span> qgqHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QgqHandler</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> declaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>                        handlerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>qgqHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="完成QgqDispatcherServlet分发请求到对应控制器方法"><a href="#完成QgqDispatcherServlet分发请求到对应控制器方法" class="headerlink" title="完成QgqDispatcherServlet分发请求到对应控制器方法"></a>完成QgqDispatcherServlet分发请求到对应控制器方法</h3><h3 id="完成功能说明：当用户发出请求，根据用户请求url找到对应的控制器-方法，并反射调用"><a href="#完成功能说明：当用户发出请求，根据用户请求url找到对应的控制器-方法，并反射调用" class="headerlink" title="完成功能说明：当用户发出请求，根据用户请求url找到对应的控制器-方法，并反射调用"></a>完成功能说明：当用户发出请求，根据用户请求url找到对应的控制器-方法，并反射调用</h3><h3 id="示意图分析-1"><a href="#示意图分析-1" class="headerlink" title="示意图分析"></a>示意图分析</h3><p><a href="https://imgse.com/i/ppbzK1J"><img src="https://s1.ax1x.com/2023/04/10/ppbzK1J.md.png" alt="ppbzK1J.md.png"></a></p><h3 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.先创建一个返回值为QgqHandler类型的方法传入的参数为request<br>2.根据传入的参数得到uri,遍历存放QgqHandler映射关系的集合，判断是否有与uri对应的QgqHandler，如果有，则return Handler，没有就return null<br>3.创建一个分发方法传入request和response,在根据上面写的得到该request对应的QgqHandler对象，如果该对象不为空，则通过反射调用<br>  qgqHandler.getMethod().invoke(qgqHandler.getController,req,response);</p><h3 id="代码一-通过传入的request得到uri-得到QgqHandler"><a href="#代码一-通过传入的request得到uri-得到QgqHandler" class="headerlink" title="代码一,通过传入的request得到uri,得到QgqHandler"></a>代码一,通过传入的request得到uri,得到QgqHandler</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">QgqHandler</span> <span class="token function">getQgqHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//先回去到用户请求的uri</span>        <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">QgqHandler</span> qgqHandler <span class="token operator">:</span> handlerList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestURI<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>qgqHandler<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//说明匹配成功</span>                <span class="token keyword">return</span> qgqHandler<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码一-通过传入的request得到uri-得到QgqHandler，通过反射调用与uri相对应的方法"><a href="#代码一-通过传入的request得到uri-得到QgqHandler，通过反射调用与uri相对应的方法" class="headerlink" title="代码一,通过传入的request得到uri,得到QgqHandler，通过反射调用与uri相对应的方法"></a>代码一,通过传入的request得到uri,得到QgqHandler，通过反射调用与uri相对应的方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">executeDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span>                             <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HspHandler</span> hspHandler <span class="token operator">=</span> <span class="token function">getHspHandler</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> hspHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//没有匹配的 Handler</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>404 NOT FOUND&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//有匹配的 Handler, 就调用</span>            hspHandler<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>hspHandler<span class="token punctuation">.</span><span class="token function">getController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span>                    response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="-3"><a href="#-3" class="headerlink" title></a><div class="note purple no-icon flat"><p>实现任务阶段 4- 从 web.xml 动态获取 qgqspringmvc.xml</p></div></h1><h3 id="说明-前面我们加载qgqspringmvc-xml是硬编码，现在做活，从web-xml动态获取"><a href="#说明-前面我们加载qgqspringmvc-xml是硬编码，现在做活，从web-xml动态获取" class="headerlink" title="说明:前面我们加载qgqspringmvc.xml是硬编码，现在做活，从web.xml动态获取"></a>说明:前面我们加载qgqspringmvc.xml是硬编码，现在做活，从web.xml动态获取</h3><h3 id="示意图分析-2"><a href="#示意图分析-2" class="headerlink" title="示意图分析"></a>示意图分析</h3><p><a href="https://imgse.com/i/ppbzvuR"><img src="https://s1.ax1x.com/2023/04/10/ppbzvuR.md.png" alt="ppbzvuR.md.png"></a></p><h3 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.先分析核心控制器与自定义Spring容器之间的关系。可以看出前端控制器初始化spring容器<br>2.所以在自定义spring容器时创建一个属性contextConfigLocation，然后核心控制器在初始化spring容器时动态的传入xml文件名<br>3.有因为核心控制器为一个Servlet，所以在核心控制器的init方法中初始化spring容器<br>4.最总把在wen.xml文件中存放的spring容器的配置文件名，通过spring容器的有参构造器传入给spring容器，然后Spring容器拿到后进行操作</p><h1 id="-4"><a href="#-4" class="headerlink" title></a><div class="note purple no-icon flat"><p>实现任务阶段 5- 从 完成自定义@Service注解功能</p></div></h1><h3 id="功能说明：如果给某个类加上-Service，则可以将其注入到我们的Spring容器，并可以通过接口名支持多级，类名来获取到Service-Bean"><a href="#功能说明：如果给某个类加上-Service，则可以将其注入到我们的Spring容器，并可以通过接口名支持多级，类名来获取到Service-Bean" class="headerlink" title="功能说明：如果给某个类加上@Service，则可以将其注入到我们的Spring容器，并可以通过接口名支持多级，类名来获取到Service Bean"></a>功能说明：如果给某个类加上@Service，则可以将其注入到我们的Spring容器，并可以通过接口名支持多级，类名来获取到Service Bean</h3><h3 id="示意图分析-3"><a href="#示意图分析-3" class="headerlink" title="示意图分析"></a>示意图分析</h3><p><a href="https://imgse.com/i/ppL4VYt"><img src="https://s1.ax1x.com/2023/04/11/ppL4VYt.md.png" alt="ppL4VYt.md.png"></a></p><h3 id="思路分析-6"><a href="#思路分析-6" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.先创建@Service注解<br>2.前面再遍历集合classFullPathList(存放的是扫描包/子包的类的全路径)只处理了是@Controller<br>3.判断class.forName后的类是否有@Service注解<br>4.如果有@Service注解，得到它的value当作key注入到ioc中<br>5.如果没有指定value，我们就使用默认的机制注入ioc<br>6.可以通过接口名/类名【首字母小写】来注入ioc容器<br>7.得到所有接口的名称<br>8.遍历接口，然后通过多个接口名来注入<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//如果有其他的注解，进行反射</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 先获取Service的value值</span>                    <span class="token class-name">Service</span> serviceAnnotation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> beanName <span class="token operator">=</span> serviceAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 说明没有指定value，我们就使用默认的机制注入ioc</span>                        <span class="token comment">// 可以通过接口名/类名[首字母小写]来注入ioc容器</span>                        <span class="token comment">// 1.得到所有接口的名称</span>                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Object</span> instance <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 2.遍历接口，然后通过多个接口名来注入</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> anInterface <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">String</span> beanName2 <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">uncapitalize</span><span class="token punctuation">(</span>anInterface<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            ioc<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName2<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">// 通过类名首字母小写完成</span>                        <span class="token comment">// beanName = StringUtils.uncapitalize(clazz.getSimpleName());</span>                        <span class="token comment">// ioc.put(beanName,instance);</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果有指定名称，就使用该名称注入即可</span>                        ioc<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h1 id="-5"><a href="#-5" class="headerlink" title></a><div class="note purple no-icon flat"><p>实现任务阶段 6- 完成 Spring 容器对象的自动装配 -@Autowried</p></div></h1><h3 id="说明：完成Spring容器中对象的注入-自动装配"><a href="#说明：完成Spring容器中对象的注入-自动装配" class="headerlink" title="说明：完成Spring容器中对象的注入/自动装配"></a>说明：完成Spring容器中对象的注入/自动装配</h3><h3 id="完成任务说明-加入-AutoWired注解，进行对象属性的装配"><a href="#完成任务说明-加入-AutoWired注解，进行对象属性的装配" class="headerlink" title="完成任务说明:加入@AutoWired注解，进行对象属性的装配"></a>完成任务说明:加入@AutoWired注解，进行对象属性的装配</h3><h3 id="思路分析-7"><a href="#思路分析-7" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.先写一个注解@AutoWired<br>2.在初始化方法中将扫描到的类反射到ioc的容器中后<br>3.接下来就是完成注入的bean对象的属性的装配<br>4.遍历ioc中的所有注入的bean对象，得到其中的所有的字段<br>5.遍历得到的这些字段，判断是否有注解@AutoWired,<br>6.如果有@AutoWired注解，并且@AutoWired有value，在ioc容器中得到这个value的实例化对象，通过反射装配对象<br>7.如果没有value，得到字段类型的首字母小写作为名字在ioc容器中查找，如果找到，通过反射装配对象。<br>8.在装配时，要进行爆破，因为有的字段是私有类型<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeAutoWired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//判断ioc有没有要装配的对象</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>ioc<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//遍历ioc中的所有注入的bean对象，然后获取到bean的所有字段，判断是否需要装配</span>       <span class="token comment">/**        * 一个entry=>(String,Object) String就是注入对象时名称，object就是bean        */</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> ioc<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//String key = entry.getKey();</span>           <span class="token class-name">Object</span> bean <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> declaredField <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>declaredField<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">AutoWired</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token class-name">AutoWired</span> annotation <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AutoWired</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">String</span> beanName <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       <span class="token comment">//即得到字段类型的首字母小写作为名字</span>                       <span class="token class-name">String</span> simpleName <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       beanName <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">uncapitalize</span><span class="token punctuation">(</span>simpleName<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>                   <span class="token comment">//如果设置了value</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> ioc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"ioc容器不存在要装配的bean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>                   <span class="token comment">//为了防止属性时private，需要暴力破解</span>                   declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//可以装配属性</span>                   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                       declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> ioc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h1 id="-6"><a href="#-6" class="headerlink" title></a><div class="note purple no-icon flat"><p>实现任务阶段 7- 完成简单视图解</p></div></h1><h2 id="功能说明通过方法返回的-String-转发或者重定向到指定"><a href="#功能说明通过方法返回的-String-转发或者重定向到指定" class="headerlink" title="功能说明通过方法返回的 String, 转发或者重定向到指定"></a>功能说明通过方法返回的 String, 转发或者重定向到指定</h2><h2 id="思路分析-8"><a href="#思路分析-8" class="headerlink" title="思路分析"></a>思路分析</h2><p>1.在QgqDispatcherServlet中的doPost方法中编写一个请求转发的方法，因为此时的servlet刚好被调用<br>2.executeDispatch(HttpServletRequest request, HttpServletResponse response)方法解析<br>3.先通过传入的request从存放控制器-url-方法映射集合中读取到一组映射【其实就是一个QgqHandler对象】<br>4.判断这组映射是否为空，如果为空，response返回404<br>5.如果不为空，先通过qgqHandler这个对象得到目标方法的所有形参信息<br>6.创建一个参数数组【对应实参数组】<br>7.遍历形参数组，按照形参的类型先将HttpServletRequest和HttpServletResponse按照形参的顺序，放入到实参数组中<br>8.得到request传入的所有的参数，是以Map<String,String[]>类型接收的<br>9.再将这些参数按照形参数组的顺序进行填充到实参数组中，没有传入的则按照默认填充<br>10.反射调用目标方法，得到目标方法的返回结果 qgqHandler.getMethod().invoke<br>11.判断返回的结果是forward还是redirect，按照这个进行请求转发或者重定向<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">executeDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">QgqHandler</span> qgqHandler <span class="token operator">=</span> <span class="token function">getQgqHandler</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> qgqHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//说明用户请求的资源不存在</span>                response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>404 NOT FOUND&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//匹配成功,反射调用控制器的方法</span>                <span class="token comment">//1.得到目标方法的形参信息[对应的数组]</span>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> qgqHandler<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//2.创建一个参数数组[对应实参数组]，再后面反射调用目标方法时，会使用到</span>                <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>parameterTypes<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//遍历形参数组，根据形参数组信息，将实参填充到实参数组</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameterTypes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//取出每一个形参类型</span>                    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> parameterType <span class="token operator">=</span> parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">//如果这个形参是HttpServletRequest将request填充到params</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"HttpServletRequest"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>parameterType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"HttpServletResponse"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>parameterType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//将Http用户请求参数封装到params数组中，注意，再填充数组时，注意顺序问题</span>                <span class="token comment">//为什么可以反射，因为method=public void com.qgq.controller.MonsterController.listMonster(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)</span>                <span class="token comment">//有该方法的全路径</span>                <span class="token comment">//将需要传递给目标方法的实参=>封装到实参数组=>然后以反射的方式传入给目标方法</span>                <span class="token comment">//1.获取http请求参数集合</span>                <span class="token comment">//解析String, String[]</span>                <span class="token comment">//String表示http请求的参数名</span>                <span class="token comment">//String[]表示http请求的参数值</span>                <span class="token comment">//处理提交的的数据中文乱码</span>                request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//遍历parameterMap将请求参数，按照顺序填充到实参数组params</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> stringEntry <span class="token operator">:</span> parameterMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> name <span class="token operator">=</span> stringEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> value <span class="token operator">=</span> stringEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">//我们得到请求的参数对应目标方法的第几个形参，将其填充</span>                    <span class="token keyword">int</span> indexRequestParameterIndex <span class="token operator">=</span> <span class="token function">getIndexRequestParameterIndex</span><span class="token punctuation">(</span>qgqHandler<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>indexRequestParameterIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//找到对应的位置</span>                        params<span class="token punctuation">[</span>indexRequestParameterIndex<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//没有找到@RequestParam注解对应的参数，就会使用默认的机制进行配置</span>                        <span class="token comment">//思路</span>                        <span class="token comment">//1.得到目标方法的所有形参的名称</span>                        <span class="token comment">//2.对得到目标方法的形参名进行遍历,如果匹配就把当前请求的参数值，填充到params</span>                        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> parameterNames <span class="token operator">=</span> <span class="token function">getParameterNames</span><span class="token punctuation">(</span>qgqHandler<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameterNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token comment">//如果请求参数名和目标方法的形参名一样,说明匹配成功</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>parameterNames<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//反射调用目标方法，得到目标方法返回的结果</span>                <span class="token class-name">Object</span> result <span class="token operator">=</span> qgqHandler<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>qgqHandler<span class="token punctuation">.</span><span class="token function">getController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> viewName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> result<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>viewName<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">String</span> viewType <span class="token operator">=</span> viewName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token class-name">String</span> viewPage <span class="token operator">=</span> viewName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token comment">//判断是forward还是redirect</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"forward"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>viewType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>viewPage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"redirect"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>viewType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>viewName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//默认是请求转发</span>                        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>viewName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token comment">//这里还可以扩展</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></String,String[]></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;手动实现SpringMVC底层机制【核心分发控制器+Controller和Service注入容器+对象</summary>
      
    
    
    
    <category term="主流框架" scheme="https://100qin10086.github.io/categories/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="ssm" scheme="https://100qin10086.github.io/tags/ssm/"/>
    
    <category term="框架" scheme="https://100qin10086.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Java" scheme="https://100qin10086.github.io/tags/Java/"/>
    
    <category term="SpringMVC" scheme="https://100qin10086.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>javaweb springMVC springBoot文件的上传与下载总结</title>
    <link href="https://100qin10086.github.io/posts/73d27226.html"/>
    <id>https://100qin10086.github.io/posts/73d27226.html</id>
    <published>2023-04-05T01:42:20.000Z</published>
    <updated>2024-04-02T07:07:50.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>javaWeb文件上传 </p></div></h1><h2 id="文件上传的基本原理"><a href="#文件上传的基本原理" class="headerlink" title="文件上传的基本原理"></a>文件上传的基本原理</h2><p>1.还是使用表单提交<br>2.action还是按照以前的规则来指定<br>3.method指定为post、<br>4.enctype:encodetype编码类型 默认是Application/x-www-form-urlencoded，这种编码不适合二进制文件数据的提交，一般适用于文本<br>5.如果要进行二进制文件的提交，enctype要指定multipart/form-data</p><h2 id="前端代码部分"><a href="#前端代码部分" class="headerlink" title="前端代码部分"></a>前端代码部分</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileUploadServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    家居图: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prevView<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">prev</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/></span></span>    家居名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">prev</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//获取展示图片的区域</span>        <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"prevView"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取文件对象</span>        <span class="token keyword">let</span> file <span class="token operator">=</span> event<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">//获取文件阅读器</span>        <span class="token keyword">let</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//给 img 的 src 设置图片 url</span>            img<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后端代码思路"><a href="#后端代码思路" class="headerlink" title="后端代码思路"></a>后端代码思路</h2><p>1.先根据request判断接收到文件的文件表单编码是不是（enctype=“multipart/form-data”）<br>2.构建一个解析上传数据的工具对象ServletFileUpload(diskFileItemFactory)<br>3.解决接收道到的文件名时是中文乱码问题servletFileUpload.setHeaderEncoding(“utf-8”);<br>4.关键的地方创建的解析上传数据的工具对象servletFileUpload可以将上传的多个数据封装到list集合中<fileItem><br>5.遍历并分别判断，因为form表单中有多个input标签<br>6.如果是一个文件，得到它的文件名fileItem.getName();<br>7.创建一个存放长传文件的目录，并得到它的完整目录,request.getServletContext.getRealPath(根目录名)。<br>8.判断这个目录是否存在，如果是第一次上传，目录可能不存在此时要创建目录，目录名.mkdir<br>9.得到一个上传文件的完整的文件名.目录名+”/“+文件名<br>10.将上传的文件上传到指定的目录</fileItem></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>问题引出<br>1.如果在上传时，需要重复上传如何解决<br>2.如果将所有上传的文件全部放在同一文件夹中，那么在引用查找时，就会需要比较长的时间<br>问题解决<br>1.为了解决重复上传可以采用修改文件名的方法解决<br>UUID.randomUUID().toString()+”<em>“+System.currentTimeMillis()+”</em>“+name<br>2.为了解决将所有文件全部放在一个文件夹中的影响速度,可以采取将不同时间段的文件放到不同的文件夹中<br>fileRealPath+ WebUtils.getYearMonthDay()；</p><h2 id="后端代码部分"><a href="#后端代码部分" class="headerlink" title="后端代码部分"></a>后端代码部分</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FileUploadServlet被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是不是文件表单其编码是不是（enctype=“multipart/form-data”）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ServletFileUpload</span><span class="token punctuation">.</span><span class="token function">isMultipartContent</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//            System.out.println("ok");</span>            <span class="token comment">//2.创建DiskFileItemFactory对象，用于构建一个解析上传数据的工具对象</span>            <span class="token class-name">DiskFileItemFactory</span> diskFileItemFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.创建一个解析上传数据的工具对象</span>            <span class="token comment">/**             *     &lt;input type="file" name="pic" id="" value="2xxx.jpg" onchange="prev(this)"/>             *     家居名: &lt;input type="text" name="name">&lt;br/>             *     &lt;input type="submit" value="上传"/>             */</span>            <span class="token class-name">ServletFileUpload</span> servletFileUpload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>diskFileItemFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//解决接收到的文件名是中文乱码问题</span>            servletFileUpload<span class="token punctuation">.</span><span class="token function">setHeaderEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4.关键的地方,servletFileUpload对象可以把表单提交的数据text/文件将其封装到FileItem文件项中</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileItem</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> servletFileUpload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//                System.out.println("list==>"+list);</span>                <span class="token comment">//遍历，并分别处理</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileItem</span> fileItem <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//                    System.out.println("fileItem"+fileItem);</span>                    <span class="token comment">//判断是不是一个文件=》</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileItem<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果为真表单</span>                        <span class="token class-name">String</span> string <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//框框里面写的家具名</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"家具名="</span><span class="token operator">+</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//是一个文件</span>                        <span class="token comment">//获取上传的文件名</span>                        <span class="token class-name">String</span> name <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的文件名="</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//把这个上传到服务器temp下的文件保存到你指定的目录</span>                        <span class="token comment">//1.指定一个目录，就是我们网站工作目录下</span>                        <span class="token class-name">String</span> filePath<span class="token operator">=</span><span class="token string">"/upload/"</span><span class="token punctuation">;</span>                        <span class="token comment">//2.获取完整目录[io/servlet/基础]</span>                        <span class="token comment">//fileRealPath=D:\proj\javaweb\fileupdown\out\artifacts\fileupdown_war_exploded\xupload\</span>                        <span class="token class-name">String</span> fileRealPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fileRealPath="</span><span class="token operator">+</span>fileRealPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//3.创建这个上传的目录</span>                        <span class="token comment">//  思路，我们也写一个工具类，可以返回/2022/10/9</span>                        <span class="token class-name">File</span> fileRealPathDirectory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileRealPath<span class="token operator">+</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getYearMonthDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileRealPathDirectory<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//不存在</span>                            fileRealPathDirectory<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">//4.将文件拷贝到fileRealPathDirectory目录</span>                        <span class="token comment">//  构建一个上传文件的完整路径：目录+文件名</span>                        <span class="token comment">//  对上传的文件名进行处理，前面增加一个前缀，保证是唯一即可</span>                        name<span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>name<span class="token punctuation">;</span>                        <span class="token class-name">String</span> fileFullPath<span class="token operator">=</span>fileRealPathDirectory<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>name<span class="token punctuation">;</span>                        fileItem<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileFullPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//5.提示信息</span>                        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是文件表单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="-1"><a href="#-1" class="headerlink" title></a><div class="note purple no-icon flat"><p>javaWeb文件下载 </p></div></h1><h2 id="文件下载的思路"><a href="#文件下载的思路" class="headerlink" title="文件下载的思路"></a>文件下载的思路</h2><p>1.获取要下载的文件名request.getParameter，并且将要下载的文件名的绝对路径获得<br>2.给http响应设置响应头Content-Type，就是文件的MIME，就是设置它的响应。这一步最重要，给浏览器返回响应体Content-Type: image/jpeg<br>3.读去要下载的文件，返回给客户端/浏览器<br>InputStream resourceAsStream = servletContext.getResourceAsStream(downloadFileFullPath);<br>ServletOutputStream outputStream = response.getOutputStream();<br>IOUtils.copy(resourceAsStream,outputStream);</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FileDownloadServlet被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.先准备要下载的文件[假定这些文件是公共的资源]</span>        <span class="token comment">//  重要：保证当我们的tomcat启动后，在工作目录out下有download文件夹，并且有可供下载的文件</span>        <span class="token comment">//2.获取到要下载的文件的名字</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> downloadFileName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"downloadFileName="</span><span class="token operator">+</span>downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.给http响应，设置响应头Content-Type，就是文件的MIME</span>        <span class="token comment">//  通过servletContext来获取</span>        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> downloadPath<span class="token operator">=</span><span class="token string">"/download/"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> downloadFileFullPath<span class="token operator">=</span>downloadPath<span class="token operator">+</span>downloadFileName<span class="token punctuation">;</span>        <span class="token class-name">String</span> mimeType <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>downloadFileFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mimeType= "</span><span class="token operator">+</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.给http响应，设置响应头Contebt-Disposition</span>        <span class="token comment">//  这里考虑的细节比较多，比如不同的浏览器写法不一样，考虑编码</span>        <span class="token comment">//  ff 是 文件名需要base64,而ie/chrome是URL编码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Firefox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 火狐 Base64编码</span>            <span class="token class-name">Base64<span class="token punctuation">.</span>Encoder</span> encoder <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encode <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>downloadFileName<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename==?UTF-8?B?"</span> <span class="token operator">+</span>                   encode <span class="token operator">+</span> <span class="token string">"?="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 其他(主流ie/chrome)使用URL编码操作</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename="</span> <span class="token operator">+</span>                    <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>downloadFileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//5.读取下载的文件数据，返回给客户端/浏览器</span>        <span class="token comment">//（1）创建一个和下载的文件管理的输入流</span>        <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>downloadFileFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//（2）得到返回数据的输出流[因为返回文件大多数是二进制文件（字节），IO Java基础]</span>        <span class="token class-name">ServletOutputStream</span> outputStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">,</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="-2"><a href="#-2" class="headerlink" title></a><div class="note purple no-icon flat"><p>SpringMVC文件上传 </p></div></h1><h2 id="相比较与于原生的文件上传，框架已经被封装了很多，好多东西都已经看不见了"><a href="#相比较与于原生的文件上传，框架已经被封装了很多，好多东西都已经看不见了" class="headerlink" title="相比较与于原生的文件上传，框架已经被封装了很多，好多东西都已经看不见了"></a>相比较与于原生的文件上传，框架已经被封装了很多，好多东西都已经看不见了</h2><h2 id="SpringBoot文件上传的基本介绍"><a href="#SpringBoot文件上传的基本介绍" class="headerlink" title="SpringBoot文件上传的基本介绍"></a>SpringBoot文件上传的基本介绍</h2><p>1.SpringMVC为文件上传提供了直接的支持，这种支持是通过即插即用的MultipartResolver实现的<br>2.springMVC上下文中默认没有装配MultipartResovler，因此默认情况下不能处理文件的上传工作,如果想要使用Spring的文件上传功能,需要在上下文中配置MultipartResolver<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="前端代码演示"><a href="#前端代码演示" class="headerlink" title="前端代码演示"></a>前端代码演示</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%=request.getContextPath()%>/fileUpload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    文件介绍:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>introduce<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    选择文件:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文件上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后端代码思路-1"><a href="#后端代码思路-1" class="headerlink" title="后端代码思路"></a>后端代码思路</h2><p>1.由于前端传过来了一个MultipartFile file，可以通过这个得到上传的文件名<br>2.得到要把上传文件保存到那个路径（绝对路径）request.getServletContext().getRealPath(“/img/“ + originalFilename);<br>3.创建文件File saveToFile = new File(fileFullPath);<br>4.将上传到后端的文件，转存到刚才创建的文件中file.transferTo(saveToFile)</p><h2 id="后端代码部分被"><a href="#后端代码部分被" class="headerlink" title="后端代码部分被"></a>后端代码部分被</h2><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public String fileUpload(@RequestParam(value &#x3D; &quot;file&quot;) MultipartFile file,String introduce ,HttpServletRequest request) throws IOException &#123;        &#x2F;&#x2F;接收到提交的文件名        String originalFilename &#x3D; file.getOriginalFilename();        System.out.println(&quot;你上传的文件名是&quot;+originalFilename);        System.out.println(&quot;文件的介绍&quot;+introduce);        &#x2F;&#x2F;得到要把上传文件保存到那个路径        String fileFullPath &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;img&#x2F;&quot; + originalFilename);        &#x2F;&#x2F;创建文件        File saveToFile &#x3D; new File(fileFullPath);        &#x2F;&#x2F;将上传的文件，转存到saveToFile        file.transferTo(saveToFile);        return &quot;success&quot;;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="-3"><a href="#-3" class="headerlink" title></a><div class="note purple no-icon flat"><p>SpringBoot文件上传 </p></div></h1><h2 id="文件上传的基本思路"><a href="#文件上传的基本思路" class="headerlink" title="文件上传的基本思路"></a>文件上传的基本思路</h2><p>思路和SpringMVC的一样。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1.th:action=”@{/upload} 是thymeleaf的服务器渲染技术，相当于将表单提交到”/upload”<br>2.multiple意思为可以提交多个文件</p><h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"#"</span> method<span class="token operator">=</span><span class="token string">"post"</span> th<span class="token operator">:</span>action<span class="token operator">=</span><span class="token string">"@&#123;/upload&#125;"</span> enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span><span class="token operator">></span>   用户名<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> style<span class="token operator">=</span><span class="token string">"width:150px"</span> name<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>   电 邮<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> style<span class="token operator">=</span><span class="token string">"width:150px"</span> name<span class="token operator">=</span><span class="token string">"email"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>   年 龄<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> style<span class="token operator">=</span><span class="token string">"width:150px"</span> name<span class="token operator">=</span><span class="token string">"age"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>   职 位<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> style<span class="token operator">=</span><span class="token string">"width:150px"</span> name<span class="token operator">=</span><span class="token string">"job"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>   头 像<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> style<span class="token operator">=</span><span class="token string">"width:150px"</span> name<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>   宠 物<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> style<span class="token operator">=</span><span class="token string">"width:150px"</span> name<span class="token operator">=</span><span class="token string">"photos"</span> multiple<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"注册"</span><span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"reset"</span> value<span class="token operator">=</span><span class="token string">"重新填写"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><p>1.接收的文件@RequestParam(“header”) MultipartFile header<br>2.String path = ResourceUtils.getURL(“classpath:”).getPath(); 得到classpath的绝对路径<br>3.动态创建指定目录<br>File file = new File(path+”static/images/upload”+”/“+ now.getYear()+”/“+now.getMonthValue()+”/“+now.getDayOfMonth()+”/“);<br>4.判断该目录是否存在，如果不存在则创建file.mkdirs();<br>5.处理文件名，防止上传的文件名相同<br>originalFilename= UUID.randomUUID().toString()+”<em>“+System.currentTimeMillis()+”</em>“+originalFilename;<br>6.将将要上传的文件上传到指定的文件<br>header.transferTo(new File(file.getAbsolutePath()+”/“+originalFilename));<br>header的类型是MultipartFile，所有里面有个方法transferTo可以直接将要上传的header文件放入到指定的目录中</p><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/upload.html"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">uploadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"upload"</span><span class="token punctuation">;</span><span class="token comment">//视图解析 thymeleaf会进行视图解析，转发到templates下的upload.html页面</span><span class="token punctuation">&#125;</span><span class="token comment">//处理用户的的注册请求-包括处理文件上传</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> age<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"job"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> job<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> header<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"photos"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> photos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//输出获取到的信息</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"上传的信息name=&#123;&#125; email=&#123;&#125; age=&#123;&#125; header=&#123;&#125; photos=&#123;&#125;"</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>email<span class="token punctuation">,</span>age<span class="token punctuation">,</span>job<span class="token punctuation">,</span>header<span class="token punctuation">,</span>photos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果信息都成功得到，我们就将文件保存到指定的目录,比如d:\\temp_upload</span>    <span class="token comment">//1.我们先将文件保存到指定的目录,比如d:\\temp_upload</span>    <span class="token comment">//2.后面演示把文件保存到动态创建的目录【有可能不存在】</span>    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">ResourceUtils</span><span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token string">"classpath:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"path=&#123;&#125;"</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//动态创建指定目录</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token constant">FURN_IMG_DIRECTORY</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getYearMonthDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"file=&#123;&#125;"</span><span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果目录不存在，我们就创建,在java io</span>        file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>header<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理头像</span>        <span class="token comment">//获取上传文件的名字</span>        <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        originalFilename<span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>originalFilename<span class="token punctuation">;</span>        <span class="token comment">//这里需要指定保存文件的绝对路径，</span>        <span class="token comment">//header.transferTo(new File("d:\\\\temp_upload\\"+originalFilename));</span>        header<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>originalFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//log.info("保存文件的绝对路径=&#123;&#125;",file.getAbsolutePath());</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理宠物图片</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>photos<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> photo <span class="token operator">:</span> photos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//多了一个遍历处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>photo<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> photo<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//photo.transferTo(new File("d:\\temp_upload\\"+originalFilename));</span>                originalFilename<span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>originalFilename<span class="token punctuation">;</span>                photo<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>originalFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token string">"注册用户成功/文件上传成功"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;javaWeb文件上传 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;文件上传的基本原理&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="主流框架" scheme="https://100qin10086.github.io/categories/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring" scheme="https://100qin10086.github.io/tags/Spring/"/>
    
    <category term="ssm" scheme="https://100qin10086.github.io/tags/ssm/"/>
    
    <category term="框架" scheme="https://100qin10086.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Java" scheme="https://100qin10086.github.io/tags/Java/"/>
    
    <category term="springMVC" scheme="https://100qin10086.github.io/tags/springMVC/"/>
    
    <category term="springBoot" scheme="https://100qin10086.github.io/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>平衡二叉树</title>
    <link href="https://100qin10086.github.io/posts/4263f441.html"/>
    <id>https://100qin10086.github.io/posts/4263f441.html</id>
    <published>2023-04-01T12:18:29.000Z</published>
    <updated>2024-04-02T07:07:50.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>平衡二叉树</p></div></h1><h2 id="案例-二叉树可能存在的问题"><a href="#案例-二叉树可能存在的问题" class="headerlink" title="案例-二叉树可能存在的问题"></a>案例-二叉树可能存在的问题</h2><h3 id="给你一个数列-1-2-3-4-5-6-，要求创建一颗二叉排序树-BST-并分析问题所在"><a href="#给你一个数列-1-2-3-4-5-6-，要求创建一颗二叉排序树-BST-并分析问题所在" class="headerlink" title="给你一个数列{1,2,3,4,5,6}，要求创建一颗二叉排序树(BST), 并分析问题所在."></a>给你一个数列{1,2,3,4,5,6}，要求创建一颗二叉排序树(BST), 并分析问题所在.</h3><p>·左边 BST 存在的问题分析:<br>1.左子树全部为空，从形式上看，更像一个单链表.<br>2。插入速度没有影响<br>3.查询速度明显降低(因为需要依次比较), 不能发挥 BST的优势，因为每次还需要比较左子树，其查询速度比单链表还慢<br>4.解决方案-平衡二叉树</p><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>1.平衡二叉树也叫做二叉搜索树又被称为AVL树，可以保证查询效率较高<br>2.具有一下特点,它是一棵空树或它的左右两个子树的高度查的绝对值不超过1,并且左右两个子树都是一颗平衡二叉树</p><h2 id="左旋转"><a href="#左旋转" class="headerlink" title="左旋转"></a>左旋转</h2><p><a href="https://imgse.com/i/ppWIfPA"><img src="https://s1.ax1x.com/2023/04/01/ppWIfPA.png" alt="ppWIfPA.md.png"></a></p><h3 id="已该图的树为例进行左旋转"><a href="#已该图的树为例进行左旋转" class="headerlink" title="已该图的树为例进行左旋转"></a>已该图的树为例进行左旋转</h3><p>1.创建一个新节点newNode【以该节点的值为新节点的值】<br>2.新节点的左子节点为该节点的左子节点 4.left=3<br>3.新节点的右子结点为该节点的右子节点的左子节点 4.right=5<br>4.该节点的值为该节点的右子节点的值 此时该节点的值为 6<br>5.该节点的左子节点为该节点的左子节点的左子节点 6.right=right<br>6.该节点的右子节点为新的结点 6.right=4</p><h3 id="左旋转后的树"><a href="#左旋转后的树" class="headerlink" title="左旋转后的树"></a>左旋转后的树</h3><p><a href="https://imgse.com/i/ppWo9qU"><img src="https://s1.ax1x.com/2023/04/01/ppWo9qU.png" alt="ppWo9qU.md.png"></a></p><h2 id="右旋转"><a href="#右旋转" class="headerlink" title="右旋转"></a>右旋转</h2><p><a href="https://imgse.com/i/ppWoPZF"><img src="https://s1.ax1x.com/2023/04/01/ppWoPZF.png" alt="ppWoPZF.md.png"></a></p><h3 id="已该图的树为例进行右旋转"><a href="#已该图的树为例进行右旋转" class="headerlink" title="已该图的树为例进行右旋转"></a>已该图的树为例进行右旋转</h3><p>1.创建一个新节点newNode【以该节点的值为新节点的值】<br>2.新节点的右子节点为该节点的右子节点 10.right=12<br>3.新节点的左子节点为该节点的左子节点的右子节点 10.left=9<br>4.该节点的值为该节点的左子结点的值10-&gt;8;<br>5.该节点的左子节点为该节点的左子节点的左子节点 10.left=7；<br>6.该节点的左子节点为新的结点 8.left=10</p><h2 id="什么时候进行旋转操作"><a href="#什么时候进行旋转操作" class="headerlink" title="什么时候进行旋转操作"></a>什么时候进行旋转操作</h2><h3 id="每添加一个节点时-如果左子结点的高度-右子节点的高度-gt-1-向右旋转"><a href="#每添加一个节点时-如果左子结点的高度-右子节点的高度-gt-1-向右旋转" class="headerlink" title="每添加一个节点时,如果左子结点的高度-右子节点的高度&gt;1,向右旋转"></a>每添加一个节点时,如果左子结点的高度-右子节点的高度&gt;1,向右旋转</h3><h3 id="每添加一个节点时-如果右子结点的高度-左子节点的高度-gt-1-向左旋转"><a href="#每添加一个节点时-如果右子结点的高度-左子节点的高度-gt-1-向左旋转" class="headerlink" title="每添加一个节点时,如果右子结点的高度-左子节点的高度&gt;1,向左旋转"></a>每添加一个节点时,如果右子结点的高度-左子节点的高度&gt;1,向左旋转</h3><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 数据结构与算法二<span class="token punctuation">.</span>二叉平衡树<span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2023/4/1 20:50 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> no1 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个AVL树</span>        <span class="token class-name">AVLTree</span> avlTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AVLTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            avlTree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//遍历</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中序遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        avlTree<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建AVLTree</span><span class="token keyword">class</span> <span class="token class-name">AVLTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>    <span class="token comment">//编写方法，删除节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.先得到要删除的节点</span>            <span class="token class-name">Node</span> target <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果我们发现当前的这颗二叉树只有一个节点时</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//2.找到要删除节点的父节点，因为树没有自我删除的能力，只要链表有自我删除的能力</span>            <span class="token class-name">Node</span> parent <span class="token operator">=</span> <span class="token function">searchNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//要删除节点的三种情况</span>            <span class="token comment">//（1）如果要删除的节点是叶子节点，无子节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//判断要删除的节点是它父节点的左子节点还是右子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>right<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//(2)如果要删除的节点有两颗子树</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//找出当前节点右子树的最小值，并删除</span>                <span class="token keyword">int</span> minVal <span class="token operator">=</span> <span class="token function">delLeftTreeMin</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                target<span class="token punctuation">.</span>value <span class="token operator">=</span> minVal<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//要删除的节点只要一颗子树</span>                <span class="token comment">//如果要删除的节点有左子树</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//判断要删除的节点是它父节点的左子节点还是右子节点</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果targetNode是parent的左子节点</span>                            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> target<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> target<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        root <span class="token operator">=</span> target<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">//如果要删除的节点有左子树</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果targetNode是parent的左子节点</span>                            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> target<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> target<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        root <span class="token operator">=</span> target<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写方法</span>    <span class="token comment">//1.返回的以node为根节点的二叉排序树的最小节点的值</span>    <span class="token comment">//2.删除node为根节点的二叉排序树的最小节点</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delLeftTreeMin</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> temp <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//这是temp的值就是最小的值</span>        <span class="token comment">//删除最小的值</span>        <span class="token function">delNode</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> temp<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找要删除节点的父节点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">searchNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找要删除的节点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//向平衡二叉树中添加节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回左子树的高度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回右子树的高度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> right<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回以该节点为根节点的树的高度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> left<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> right<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//左旋转的方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建新的结点，以当前根节点的值</span>        <span class="token class-name">Node</span> newnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把新的结点的左子树设置为当前结点的左子树</span>        newnode<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment">//把新的结点的右子树设置为当前结点的</span>        newnode<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment">//当前结点的值为当前结点的右子节点的值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//右旋转</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建新的结点,以当前结点的值</span>        <span class="token class-name">Node</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把新结点的左子树设置当前结点的左子树</span>        newNode<span class="token punctuation">.</span>right<span class="token operator">=</span>right<span class="token punctuation">;</span>        <span class="token comment">//把新结点的右子树设置成当前节点的右子树的左子树</span>        newNode<span class="token punctuation">.</span>right<span class="token operator">=</span>right<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment">//把当前节点的值替换成右子节点的值</span>        value<span class="token operator">=</span>right<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token comment">//当前节点的右子结点设置成当前结点右子结点的右子结点</span>        right<span class="token operator">=</span>right<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token comment">//当前结点的右子节点指向新的结点</span>        left<span class="token operator">=</span>newNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找要删除的结点</span>    <span class="token comment">/**     * @param val 希望删除的节点的值     * @return 如果找到返回该节点，否则返沪null     */</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//找到就是该节点</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果查找的值小于当前的结点，向左子树递归查找</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果查找的值不小于当前的结点，向右子树递归查找</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找要删除结点的父节点</span>    <span class="token comment">/**     * @param val 要找到的节点的值     * @return 返回的是要删除的结点的父节点，如果没有就返回null     */</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">searchParent</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果当前节点就是要删除结点的父节点，就返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果查找的值小于当前节点的值，并且当前节点的左子节点不为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相右子树递归查找</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 添加节点的方法</span>    <span class="token comment">// 递归的形式添加节点，注意需要满足二叉排序树的要求</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 判断传入的结点的值，和当前子树的根节点的关系</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果当前结点左子树节点为null</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 递归的向左子树添加</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 添加的结点的值大于当前结点的值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 递归的向右子树添加</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//当添加完一个节点后,如果(右子树的高度-左子树的高度)>1,左旋转</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果它的右子树的左子树高度大于右子树的左子树高度，先将右子树右旋转</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>right<span class="token punctuation">.</span><span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>right<span class="token punctuation">.</span><span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                right<span class="token punctuation">.</span><span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左旋转</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//必须要</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果它的左子树的右子树高度大于左子树的左子树高度，先左旋转，在右旋转</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>left<span class="token punctuation">.</span><span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>left<span class="token punctuation">.</span><span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                left<span class="token punctuation">.</span><span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左旋转</span>                <span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右旋转</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右旋转</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Node&#123;"</span> <span class="token operator">+</span>                <span class="token string">"value="</span> <span class="token operator">+</span> value <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;平衡二叉树&lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;案例-二叉树可能存在的问题&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
