<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秦家大胖&#39;s Blog</title>
  
  <subtitle>生活朗朗,万物可爱</subtitle>
  <link href="https://100qin10086.github.io/atom.xml" rel="self"/>
  
  <link href="https://100qin10086.github.io/"/>
  <updated>2023-06-26T08:47:41.037Z</updated>
  <id>https://100qin10086.github.io/</id>
  
  <author>
    <name>秦三顺</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>赫夫曼编码</title>
    <link href="https://100qin10086.github.io/posts/8e49ee69.html"/>
    <id>https://100qin10086.github.io/posts/8e49ee69.html</id>
    <published>2023-06-26T06:15:28.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<div class="wow animate__flip" data-wow-duration data-wow-delay data-wow-offset data-wow-iteration><div class="note green icon-padding modern"><i class="note-icon fas fa-fan"></i><p><code>赫夫曼编码</code>动画效果。</p></div></div><h2 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>一.赫夫曼树</p></div></h2><div class="tag link"><a class="link-card" title="赫夫曼树" href="https://100qin10086.github.io/posts/8e49ee69.html"><div class="left"><img src="/posts/8e49ee69.htm/siteicon/64.png"></div><div class="right"><p class="text">赫夫曼树</p><p class="url">https://100qin10086.github.io/posts/8e49ee69.html</p></div></a></div><h2 id="-1"><a href="#-1" class="headerlink" title></a><div class="note purple no-icon flat"><p>一.赫夫编码</p></div></h2><p class="p red">注意</p><h3 id="-2"><a href="#-2" class="headerlink" title></a><div class="note purple no-icon flat"><p>赫夫曼编码基本介绍</p></div></h3><p>1) 赫夫曼编码也翻译为 哈夫曼编码(Huffman Coding)，又称霍夫曼编码，是一种编码方式, 属于一种程序算法<br>2) 赫夫曼编码是赫哈夫曼树在电讯通信中的经典的应用之一。<br>3) 赫夫曼编码广泛地用于数据文件压缩。其压缩率通常在 20%～90%之间<br>4) 赫夫曼码是可变字长编码(VLC)的一种。Huffman 于 1952 年提出一种编码方法，称之为最佳编码</p><h3 id="-3"><a href="#-3" class="headerlink" title></a><div class="note purple no-icon flat"><p>编码原理解析</p></div></h3><h4 id="通信领域中信息的处理方式-1-定长编码"><a href="#通信领域中信息的处理方式-1-定长编码" class="headerlink" title="通信领域中信息的处理方式 1-定长编码"></a>通信领域中信息的处理方式 1-定长编码</h4><p>例如 :<br>I like java  共11个字符包括空格<br>转换成ASCII:105 32 108 105 107 106 97 118 97<br>对应的二进制:01101001 00100000 01101100 01101001 01101011 01101010 01100001 01110110 01100001  共80个字符<br>可以看到编码后的大小反而比原来的大小更大,所以这个编码效率不是很高</p><h4 id="通信领域中信息的处理方式-2-变长编码"><a href="#通信领域中信息的处理方式-2-变长编码" class="headerlink" title="通信领域中信息的处理方式 2-变长编码"></a>通信领域中信息的处理方式 2-变长编码</h4><p>例如 :<br>I like java  共11个字符包括空格<br>i:2,l:1,k:1,e:1,j:1,a:2,v:1;  说明:按照各个字母出现的次数编码<br> :0,l:1,k:10,e:11,j:100,v:101,a:110,j:111;<br>所以编码后的为：110011101010100110101101;<br>看以看出编码后的大小变大并且可以匹配到重复编码,所以效率也不高</p><h4 id="通信领域中信息的处理方式-3-赫夫曼编码"><a href="#通信领域中信息的处理方式-3-赫夫曼编码" class="headerlink" title="通信领域中信息的处理方式 3-赫夫曼编码"></a>通信领域中信息的处理方式 3-赫夫曼编码</h4><p>传输的 字符串 i like like like java do you like a java<br>·d:1 y:1 u:1 j:2 v:2 o:2 l:4 k:4 e:4 i:5 a:5 :9 // 各个字符对应的个数<br>·按照上面字符出现的次数构建一颗赫夫曼树, 次数作为权值<br>   步骤：<br>   构成赫夫曼树的步骤：<br>1) 从小到大进行排序, 将每一个数据，每个数据都是一个节点 ， 每个节点可以看成是一颗最简单的二叉树<br>2) 取出根节点权值最小的两颗二叉树<br>3) 组成一颗新的二叉树, 该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和<br>4) 再将这颗新的二叉树，以根节点的权值大小 再次排序， 不断重复 1-2-3-4 的步骤，直到数列中，所有的数据都被处理，就得到一颗赫夫曼树<br><a href="https://imgse.com/i/pCUrHDs"><img src="https://s1.ax1x.com/2023/06/26/pCUrHDs.png" alt="pCUrHDs.png"></a><br>5) 根据赫夫曼树，给各个字符,规定编码 (前缀编码)， 向左的路径为 0 向右的路径为 1 ， 编码<br>   如下:<br>   o: 1000 u: 10010 d: 100110 y: 100111 i: 101<br>   a : 110 k: 1110 e: 1111 j: 0000 v: 0001<br>   l: 001 : 01<br>6) 按照上面的赫夫曼编码，我们的”i like like like java do you like a java” 字符串对应的编码为<br>   10101001101111011110100110111101111010011011110111101000011000011100110011110000110<br>   01111000100100100110111101111011100100001100001110 通过赫夫曼编码处理 长度为 133<br>   长度为 ： 133<br>   说明:<br>   原来长度是 359 , 压缩了 (359-133) / 359=62.9%<br>   此编码满足前缀编码, 即字符的编码都不能是其他字符编码的前缀。不会造成匹配的多义性<br>   赫夫曼编码是无损处理方案<br>注意事项<br>   注意, 这个赫夫曼树根据排序方法不同，也可能不太一样，这样对应的赫夫曼编码也不完全一样，但是 wpl 是<br>   一样的，都是最小的, 最后生成的赫夫曼编码的长度是一样，比如: 如果我们让每次生成的新的二叉树总是排在权<br>   值相同的二叉树的最后一个</p><h3 id="最佳实践-数据压缩-创建赫夫曼树"><a href="#最佳实践-数据压缩-创建赫夫曼树" class="headerlink" title="最佳实践-数据压缩(创建赫夫曼树)"></a>最佳实践-数据压缩(创建赫夫曼树)</h3><h4 id="第一步-得到结点的权值"><a href="#第一步-得到结点的权值" class="headerlink" title="第一步,得到结点的权值"></a>第一步,得到结点的权值</h4><p>根据传入的字符串,将其转化为byte数组,并统计每个字母出现的个数作为权值,而字母最为树的结点,并将每个字母出现的次数与字母封装到一个结点中</p><h4 id="-4"><a href="#-4" class="headerlink" title></a><div class="note purple no-icon flat"><p>代码实现</p></div></h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private static List&lt;Node&gt; getNodes(byte[] bytes)&#123;        &#x2F;&#x2F;创建ArrayList        List&lt;Node&gt; nodes &#x3D; new ArrayList&lt;Node&gt;();        &#x2F;&#x2F;存储每一个byte出现的次数-&gt;map        Map&lt;Byte, Integer&gt; counts &#x3D; new HashMap&lt;&gt;();        for (byte b : bytes) &#123;            Integer count &#x3D; counts.get(b);            if (count&#x3D;&#x3D;null)&#123;                counts.put(b,1);            &#125;else&#123;                counts.put(b,count+1);            &#125;        &#125;        &#x2F;&#x2F;把每个键值对转成一个Node对象,并加入nodes集合        for (Map.Entry&lt;Byte, Integer&gt; entry : counts.entrySet()) &#123;            nodes.add(new Node(entry.getKey(), entry.getValue()));        &#125;        return nodes;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二步-创建赫夫曼树"><a href="#第二步-创建赫夫曼树" class="headerlink" title="第二步,创建赫夫曼树"></a>第二步,创建赫夫曼树</h4><p>先对结点构成的集合进行排序,在每次从结点构成的集合中每次取出两个最小的结点,构成一个新的结点,将取出的最小的两个结点作为新结点的子结点,按照小的放到左边,大的放到右边的规则,并将新结点放入到集合中,循环次过程,直到集合中只剩一个结点为止,此时这个结点就为赫夫曼树的头结点</p><h4 id="-5"><a href="#-5" class="headerlink" title></a><div class="note purple no-icon flat"><p>代码实现</p></div></h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">    private static Node createHuffmanTree(List&lt;Node&gt; nodes)&#123;        while(nodes.size()&gt;1)&#123;            Collections.sort(nodes);            Node left &#x3D; nodes.get(0);            Node right &#x3D; nodes.get(1);            Node parent &#x3D; new Node(null,left.weight + right.weight);            parent.left&#x3D;left;            parent.right&#x3D;right;            nodes.remove(left);            nodes.remove(right);            nodes.add(parent);        &#125;        return nodes.get(0);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第三步-得到赫夫曼编码"><a href="#第三步-得到赫夫曼编码" class="headerlink" title="第三步,得到赫夫曼编码"></a>第三步,得到赫夫曼编码</h4><p>遍历赫夫曼树,使用拼接的方法得到每一个字母的编码,根据左子结点为0,右子结点为1的规则,将每个字母的编码放入到Map集合中</p><h4 id="-6"><a href="#-6" class="headerlink" title></a><div class="note purple no-icon flat"><p>代码实现</p></div></h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private static void getCodes(Node node,String code,StringBuilder stringBuilder)&#123;        StringBuilder stringBuilder2 &#x3D; new StringBuilder(stringBuilder);        &#x2F;&#x2F;将传入的code加入到stringBuilder2        stringBuilder2.append(code);        if (node!&#x3D;null)&#123;&#x2F;&#x2F;如果node&#x3D;&#x3D;null不处理            &#x2F;&#x2F;判断当前结点是叶子结点还是非叶子结点            if (node.data&#x3D;&#x3D;null)&#123;&#x2F;&#x2F;非叶子结点                &#x2F;&#x2F;递归                &#x2F;&#x2F;向左                getCodes(node.left,&quot;0&quot;,stringBuilder2);                &#x2F;&#x2F;向右                getCodes(node.right,&quot;1&quot;,stringBuilder2);            &#125;else&#123;&#x2F;&#x2F;说明是一个叶子结点                &#x2F;&#x2F;就表示找到某个叶子结点的最后                huffmanCodes.put(node.data,stringBuilder2.toString());            &#125;        &#125;    &#125;private static Map&lt;Byte,String&gt; getCodes(Node root)&#123;        if (root&#x3D;&#x3D;null)&#123;            return  null;        &#125;        &#x2F;&#x2F;处理root的左子树        getCodes(root.left,&quot;0&quot;,stringBuilder);        &#x2F;&#x2F;处理root的右子树        getCodes(root.right,&quot;1&quot;,stringBuilder);        return huffmanCodes;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第四步-通过赫夫曼编码表进行编码"><a href="#第四步-通过赫夫曼编码表进行编码" class="headerlink" title="第四步,通过赫夫曼编码表进行编码"></a>第四步,通过赫夫曼编码表进行编码</h4><p>遍历字符串根据赫夫曼编码表,依次得到每个字母的编码,并拼接到一个字符串中,因为如果直接将赫夫曼编码表编码后它的大小会比原先的更大,所以将其转成10进制存储,可以更加的压缩空间<br>将赫夫曼编码后的每八位进行转10进制,最后得到是一串10进制数字</p><h4 id="-7"><a href="#-7" class="headerlink" title></a><div class="note purple no-icon flat"><p>代码实现</p></div></h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private static byte[] zip(byte[] bytes,Map&lt;Byte,String&gt;huffmanCode)&#123;        &#x2F;&#x2F;1.利用huffmanCodes将bytes转成赫夫曼编码对应的字符串        StringBuilder stringBuilder &#x3D; new StringBuilder();        &#x2F;&#x2F;遍历bytes数组        for (byte b : bytes) &#123;            stringBuilder.append(huffmanCode.get(b));        &#125;        &#x2F;&#x2F;将101010001011110111101001101111011110。。。转成byte[]        &#x2F;&#x2F;统计返回byte[] huffmanCodeBytes长度        int len;        if (stringBuilder.length()%8&#x3D;&#x3D;0)&#123;            len&#x3D;stringBuilder.length()&#x2F;8;        &#125;else&#123;            len&#x3D;stringBuilder.length()&#x2F;8+1;        &#125;        &#x2F;&#x2F;创建存储压缩后的byte数组        byte[] huffmanCodeBytes&#x3D;new byte[len];        int index&#x3D;0;&#x2F;&#x2F;记录是第几个byte        for (int i&#x3D;0;i&lt;stringBuilder.length();i+&#x3D;8)&#123;&#x2F;&#x2F;因为每八位对应一个byte            String strByte;            if (i+8&gt;stringBuilder.length())&#123;&#x2F;&#x2F;不够8位                strByte&#x3D;stringBuilder.substring(i);            &#125;else &#123;                strByte &#x3D; stringBuilder.substring(i, i + 8);            &#125;            &#x2F;&#x2F;将strByte转成一个byte，放入到by            huffmanCodeBytes[index]&#x3D;(byte) Integer.parseInt(strByte,2);            index++;        &#125;        return huffmanCodeBytes;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第五步-通过赫夫曼编码表进行解码"><a href="#第五步-通过赫夫曼编码表进行解码" class="headerlink" title="第五步,通过赫夫曼编码表进行解码"></a>第五步,通过赫夫曼编码表进行解码</h4><p>先通过传入的一串10进制树,将其转为二进制1,这地方要注意补位，<br>在将赫夫曼编码表进行反转,为了解码方便，<br>在通过匹配算法通过赫夫曼编码表进行解码,因为赫夫曼编码是前缀编码,不会出现重复</p><h4 id="-8"><a href="#-8" class="headerlink" title></a><div class="note purple no-icon flat"><p>代码实现</p></div></h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private static byte[] decode(Map&lt;Byte,String&gt;huffmanCodes,byte[] huffmanBytes)&#123;        &#x2F;&#x2F;1.先得到huffmanBytes对应的二进制字符串,形式10101000101111011110100110        StringBuilder stringBuilder &#x3D; new StringBuilder();        &#x2F;&#x2F;将byte数组转成二进制的字符串        for (int i&#x3D;0;i&lt;huffmanBytes.length;i++)&#123;            &#x2F;&#x2F;判断是不是最后一个字节            boolean flag&#x3D;(i&#x3D;&#x3D;huffmanBytes.length-1);            stringBuilder.append(byteToBitString(!flag,huffmanBytes[i]));        &#125;        &#x2F;&#x2F;把字符串按照指定的赫夫曼编码进行解码        &#x2F;&#x2F;吧赫夫曼编码表进行交换，因为要反向查询        HashMap&lt;String, Byte&gt; map &#x3D; new HashMap&lt;&gt;();        for (Map.Entry&lt;Byte,String&gt; entry:huffmanCodes.entrySet())&#123;            map.put(entry.getValue(), entry.getKey());        &#125;        &#x2F;&#x2F;创建一个集合存放byte        List&lt;Byte&gt; list&#x3D;new ArrayList&lt;&gt;();        for (int i&#x3D;0;i&lt;stringBuilder.length(); )&#123;            int count&#x3D;1;&#x2F;&#x2F;小的计数器            boolean flag&#x3D;true;            Byte b&#x3D;null;            while (flag)&#123;                &#x2F;&#x2F;递增的取出key                String key &#x3D; stringBuilder.substring(i, i + count);&#x2F;&#x2F;i不动,让count移动,指定匹配到一个字符                b&#x3D; map.get(key);                if (b&#x3D;&#x3D;null)&#123;&#x2F;&#x2F;说明没有匹配到                    count++;                &#125;else&#123;                    &#x2F;&#x2F;匹配到                    flag&#x3D;false;                &#125;            &#125;            list.add(b);            i+&#x3D;count;        &#125;        &#x2F;&#x2F;吧list中的数据放入到byte[]        byte[] b &#x3D; new byte[list.size()];        for (int i&#x3D;0;i&lt; b.length;i++)&#123;            b[i]&#x3D;list.get(i);        &#125;        return b;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;wow animate__flip&quot; data-wow-duration data-wow-delay data-wow-offset data-wow-iteration&gt;&lt;div class=&quot;note green icon-padding moder</summary>
      
    
    
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>最长公共前缀</title>
    <link href="https://100qin10086.github.io/posts/bb801601.html"/>
    <id>https://100qin10086.github.io/posts/bb801601.html</id>
    <published>2023-04-19T13:37:27.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note orange no-icon flat"><p>最长公共前缀 </p></div></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 “”。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>输入：strs = [“flower”,”flow”,”flight”]<br>输出：”fl”<br>输入：strs = [“flower”,”flow”,”flight”]<br>输出：”fl”</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>好像还是暴力破解<br>1.先对传入的数组进行判断如果传入的数组只有一个元素，那么直接return这个数组中的唯一元素<br>2.对传入的数组进行遍历判断，得到里面元素长度最小的长度，因为最长公共前缀最长也就是最短的元素<br>3.准备将这个长度最小的元素一个一个进行遍历，并对其他的元素进行判断<br>4.如果最短元素的子串不等于其他元素的子串，返回最后一个最短元素字段减一<br>5.到最后，没有直接return 最短元素</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> substring<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             length<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             substring <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>substring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> substring<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>substring<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> substring<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参照网上的思路"><a href="#参照网上的思路" class="headerlink" title="参照网上的思路"></a>参照网上的思路</h2><p>1.先对传入的数组进行判断，如果数组大小位0，直接return 0；<br>2.随便选一个元素当作公共前缀<br>3.对剩下的元素进行遍历判断，这里的判断是按照一个String的方法进行判断【startsWith() 方法用于检测字符串是否以指定的前缀开始】<br>4.如果公共前缀不匹配剩下的元素中的一个，直接将公共前缀变短一个，直到其中一个元素符合<br>5.最后进行所有元素的判断<br>6.最后返回公共前缀</p><h2 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment">//公共前缀比所有字符串都短，随便选一个先</span>        <span class="token class-name">String</span> s<span class="token operator">=</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token comment">//公共前缀不匹配就让它变短！</span>                s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note orange no-icon flat&quot;&gt;&lt;p&gt;最长公共前缀 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述</summary>
      
    
    
    
    <category term="力扣" scheme="https://100qin10086.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="力扣" scheme="https://100qin10086.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>力扣-整数转罗马数字</title>
    <link href="https://100qin10086.github.io/posts/1f7ec5c9.html"/>
    <id>https://100qin10086.github.io/posts/1f7ec5c9.html</id>
    <published>2023-04-18T13:14:03.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note orange no-icon flat"><p>整数转罗马数字 </p></div></h1><h2 id="罗马数字包含以下七种字符：-I，-V，-X，-L，C，D-和-M。"><a href="#罗马数字包含以下七种字符：-I，-V，-X，-L，C，D-和-M。" class="headerlink" title="罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。"></a>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</h2><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>输入: num = 1994<br>输出: “MCMXCIV”<br>解释: M = 1000, CM = 900, XC = 90, IV = 4</p><h2 id="思路，因为没有学贪心算法，所以只能用暴力破解的方法来进行"><a href="#思路，因为没有学贪心算法，所以只能用暴力破解的方法来进行" class="headerlink" title="思路，因为没有学贪心算法，所以只能用暴力破解的方法来进行"></a>思路，因为没有学贪心算法，所以只能用暴力破解的方法来进行</h2><p>1.由于题目中给出了取值范围1 &lt;= num &lt;= 3999<br>2.所以最多只有四位数<br>3.将传入的数字都按照四位数处理<br>4.按照个位，十位，百位，千位分别做1-10处理<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">intToRoman</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> a<span class="token operator">=</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>       num<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> b<span class="token operator">=</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>       num<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> c<span class="token operator">=</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>       num<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> d<span class="token operator">=</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">num4</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">num3</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">num2</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">num1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">num1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"I"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"II"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"III"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"IV"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"V"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"VI"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"VII"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"VIII"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"IX"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">num2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"X"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"XX"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"XXX"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"XL"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"L"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"LX"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"LXX"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"LXXX"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"XC"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">num3</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"C"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"CC"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"CCC"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"CD"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"D"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"DC"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"DCC"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"DCCC"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"CM"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">num4</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"M"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"MM"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">"MMM"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note orange no-icon flat&quot;&gt;&lt;p&gt;整数转罗马数字 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;罗马数字包含以下七种字符：-I，-V，</summary>
      
    
    
    
    <category term="力扣" scheme="https://100qin10086.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="力扣" scheme="https://100qin10086.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>图 深度优先 广度优先</title>
    <link href="https://100qin10086.github.io/posts/4f60da63.html"/>
    <id>https://100qin10086.github.io/posts/4f60da63.html</id>
    <published>2023-04-16T09:44:14.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>图的基本介绍</p></div></h1><h2 id="图的说明"><a href="#图的说明" class="headerlink" title="图的说明"></a>图的说明</h2><p>图是一种数据结构,其中节点可以具有零个或多个相邻元素。两个结点之间的连接称为边。结点也可以称为顶点</p><h2 id="图的常用概念"><a href="#图的常用概念" class="headerlink" title="图的常用概念"></a>图的常用概念</h2><p>1)顶点<br>2)边 顶点与顶点间的连线<br>3)路径 顶点间的距离<br>4)无向图 顶点之间的连接没有方向<br>5)有向图 顶点之间的连接有方向<br>6)带权图 边带权值的图，也叫网</p><h2 id="图的表示方法"><a href="#图的表示方法" class="headerlink" title="图的表示方法"></a>图的表示方法</h2><p>图的表示方法有两种，二维数组表示(邻接矩阵)；链表表示(邻接表)</p><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><a href="https://imgse.com/i/p99bBhq"><img src="https://s1.ax1x.com/2023/04/16/p99bBhq.md.png" alt="p99bBhq.md.png"></a><br><a href="https://imgse.com/i/p99br90"><img src="https://s1.ax1x.com/2023/04/16/p99br90.md.png" alt="p99br90.md.png"></a></p><h2 id="图的实现基本介绍"><a href="#图的实现基本介绍" class="headerlink" title="图的实现基本介绍"></a>图的实现基本介绍</h2><p>1.创建一个集合表示图的顶点<br>2.创建一个二维数组，存储图对应的邻接矩阵<br>3.创建一个布尔类型的数组用来判断是否输出过【在深度优先和广度优先是会用】<br>4.创建图的时候直接往存放结点的集合中放<br>5.结点之间是否相连根据二维数组表示</p><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="图的深度优先遍历算法步骤"><a href="#图的深度优先遍历算法步骤" class="headerlink" title="图的深度优先遍历算法步骤"></a>图的深度优先遍历算法步骤</h3><p>1.访问初始结点v,并标记结点v为以访问<br>2.查找结点v的第一个邻接结点w<br>3.若w存在，则继续执行4,如果w不存在，则回到第一步，将从v的下一个结点继续<br>4.若w未被访问，对w进行深度优先遍历递归(即把w当作另一个v，然后进行步骤123)<br>5.查找结点v的w邻接结点的下一个邻接结点，转到步骤3<br>  A B C D E<br>A 0 1 1 0 0<br>B 1 0 1 1 1<br>C 1 1 0 0 0<br>D 0 1 0 0 0<br>E 0 1 0 0 0<br>以这个图为例，进行深度优先遍历<br>1.先输出A,标记A以访问<br>2.找到A的第一个邻接结点B<br>3.B存在，且B未被访问，输出B，且标记B已经被访问,<br>4.查找B的第一个邻接结点C,C存在，且C未被访问，输出C，且标记C未以访问<br>5.因为C没有下一个相邻的结点，所以回到结点B，找B结点的下下一个结点D，<br>6.结点D未被访问，输出D，且标记D已经被访问<br>7.因为D没有下一个相邻的结点,所以回到结点B，找B结点的下下下一个结点E<br>8.结点E未被访问，输出E，且标记E未已经被访问</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>1.先输出当前节点，并设置当前节点为已读<br>2.查找当前结点的第一个相邻的结点B<br>3.输出B，设置B为已读，查找B结点相邻的第一个结点C<br>4.输出C，设置C结点已读，此时C结点后面在没有与之相连的结点，<br>5.此时就需要dfs重载，遍历剩下到不了的结点</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> vertexList<span class="token punctuation">;</span> <span class="token comment">//存储顶点集合</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">;</span><span class="token comment">//存储图对应的邻接矩阵</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numOfEdges<span class="token punctuation">;</span><span class="token comment">//表示遍的数目</span>    <span class="token comment">//定义数字boolean[]，记录某个结点是否被访问</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//测试图是否创建成功</span>        <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token class-name">VertexValue</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//创建图对象</span>        <span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> <span class="token class-name">VertexValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span><span class="token function">insertVertex</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span>isVisited<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//初始化矩阵和vertexList，也就是一共几个矩阵</span>        edges<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        vertexList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        numOfEdges<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        isVisited <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//得到第一个邻接结点的下标w</span>    <span class="token comment">/**     *     * @param index     * @return 如果存在就返回对应的小标，否则就返回-1；     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edges<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据前一个邻接结点的下表来获取下一个邻接结点</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span><span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>v2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//深度优先遍历算法</span>    <span class="token comment">//i 第一次就是0</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//首先我们访问该节点，输出</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getValueByIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//讲结点设置为已经访问</span>        isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">//查找结点i的第一个邻接结点w</span>        <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>w<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//说明有</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果w存在，但是已经被访问了,判断所有与i相连的结点</span>            w<span class="token operator">=</span><span class="token function">getNextNeighbor</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对dfs 进行一个重载，遍历我们，并进行dfs</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//遍历所有的结点，进行dfs</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//图中常用的方法</span>    <span class="token comment">//返回结点的个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//显示图所对应的矩阵</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> link <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//得到边的个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfEdges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> numOfEdges<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回结点i(下标)对应的数据 0->A,1->B,2->C;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValueByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回v1和v2的权值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span><span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//插入结点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertVertex</span><span class="token punctuation">(</span><span class="token class-name">String</span> vertex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        vertexList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加边</span>    <span class="token comment">/**     *     * @param v1 表示点的下标即是第几个顶点"A"-"B" "A"->0 "B"->1     * @param v2 和上面一样     * @param weight 为0表示没有相连，为1表示相连     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span><span class="token keyword">int</span> v2<span class="token punctuation">,</span><span class="token keyword">int</span> weight<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token operator">=</span>weight<span class="token punctuation">;</span>        edges<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token operator">=</span>weight<span class="token punctuation">;</span>        numOfEdges<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 图的表示方式 * 1.邻接矩阵 * 2.邻接链表 */</span><span class="token comment">/** * 图的遍历介绍 * 1.图的深度优先搜索 * 每次都在访问当前结点后首先访问当前结点的第一个邻接结点，深度优先搜索是一个递归的过程 * 深度优先遍历算法步骤 * 1）.访问初始节点v，并标记结点v为已访问 * 2）.查找结点v的第一个邻接结点w * 3）.若w存在，则继续执行4，如果w不存在，则回到第一步，讲从v的下一个结点继续 * 4）.若w未被访问，对w进行深度优先遍历递归(即把w当作另一个v，然后进行步骤123) * 5）.查找结点v的w的邻接结点的下一个临接结点，转到步骤3 * 2.图的广度优先搜索 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图的广度优先遍历"><a href="#图的广度优先遍历" class="headerlink" title="图的广度优先遍历"></a>图的广度优先遍历</h2><h3 id="图的广度优先搜索"><a href="#图的广度优先搜索" class="headerlink" title="图的广度优先搜索"></a>图的广度优先搜索</h3><p>类似于一个分层搜索的过程，广度优先遍历需要使用一个队列以保持访问过的结点的顺序，以便按这个顺序来访问这些结点的邻接结点</p><h3 id="广度优先遍历的算法步骤"><a href="#广度优先遍历的算法步骤" class="headerlink" title="广度优先遍历的算法步骤"></a>广度优先遍历的算法步骤</h3><p>1.访问初始结点v并标记结点v为已访问<br>2.结点v入队列<br>3.当队列非空时，继续执行，否则算法结束<br>4.出队列，取得队头结点u<br>5.查找结点u的第一个邻接结点w<br>6.若结点u的邻接结点w不存在，则转到步骤3，否则循环执行以下三个步骤<br>6.1 若结点w尚未被访问，则访问结点w并标记为已访问<br>6.2 结点w入队列<br>6.3 查找结点u的继w邻接结点后的下一个邻接结点我，转到步骤6</p><h3 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h3><p>1.传入的为1结点，先输出1结点，并且设置1结点为以访问<br>2.将1结点加入到队列queue.addLast<br>3.判断队列是否为空，如果队列不为空，则取出队列的头节点下标u<br>4.得到头节点的第一个邻接结点的下标w，且w没有被访问过<br>5.如果找到了w结点，则输出，并且标记w已经访问，同时将w入队列<br>6.如果w被访问过，则以u为前驱结点，找到w后面的下一个结点 w=getNextNeighbor(u,w)<br>7.最后重载bfs</p><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u<span class="token punctuation">;</span><span class="token comment">//表示队列的头节点对应的下标</span>        <span class="token keyword">int</span> w<span class="token punctuation">;</span><span class="token comment">//邻接结点w</span>        <span class="token comment">//队列,结点访问的顺序</span>        <span class="token class-name">LinkedList</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//访问结点，输出结点信息</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getValueByIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"=>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//标识为已访问</span>        isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">//将结点加入队列</span>        queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//取出队列的头节点下标</span>            u <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//得到第一个邻接结点的下标w</span>            w<span class="token operator">=</span><span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>w<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//找到</span>                <span class="token comment">//是否访问过</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getValueByIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"=>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//标记已经访问</span>                    isVisited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment">//入队</span>                    queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//以u为前驱结点，找w后面的下一个邻接结点</span>                w<span class="token operator">=</span><span class="token function">getNextNeighbor</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//体现出广度优先</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//遍历所有的节点，都进行广度优先</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">bfs</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;图的基本介绍&lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;图的说明&quot;&gt;&lt;a href=&quot;#图的说明&quot;</summary>
      
    
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>力扣-盛最多的水</title>
    <link href="https://100qin10086.github.io/posts/7984993e.html"/>
    <id>https://100qin10086.github.io/posts/7984993e.html</id>
    <published>2023-04-13T13:12:45.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note orange no-icon flat"><p>盛最多水的容器 </p></div></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。<br>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。<br>返回容器可以储存的最大水量。</p><h2 id="思路，没有任何思路，只想着暴力破解"><a href="#思路，没有任何思路，只想着暴力破解" class="headerlink" title="思路，没有任何思路，只想着暴力破解"></a>思路，没有任何思路，只想着暴力破解</h2><p>1.双重for循环，直接长×宽<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>height<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>height<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> area<span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                max<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="虽然暴力破解代码没有报错，且结果也正确，但是超时了，所以遇到这种需要移动左右两头的问题，则可以考虑双指针"><a href="#虽然暴力破解代码没有报错，且结果也正确，但是超时了，所以遇到这种需要移动左右两头的问题，则可以考虑双指针" class="headerlink" title="虽然暴力破解代码没有报错，且结果也正确，但是超时了，所以遇到这种需要移动左右两头的问题，则可以考虑双指针"></a>虽然暴力破解代码没有报错，且结果也正确，但是超时了，所以遇到这种需要移动左右两头的问题，则可以考虑双指针</h2><h2 id="第二种代码思路"><a href="#第二种代码思路" class="headerlink" title="第二种代码思路"></a>第二种代码思路</h2><p>1.先创建两个下标指针,分别指向第一个和最后一个数组的位置<br>2.因为它要想装的水最多,两个水桶间的距离要最大或者，两个水桶中的最低水桶要最高<br>3.所以先让两个指针分别指向第一个和最后一个，计算出可以称量的水的体积<br>4.此时将较小水桶一边向中间移动，再次计算可以称量水的体积，最后进行比较</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r<span class="token operator">=</span>height<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxarea<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            maxarea<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxarea<span class="token punctuation">,</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> maxarea<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note orange no-icon flat&quot;&gt;&lt;p&gt;盛最多水的容器 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描</summary>
      
    
    
    
    <category term="力扣" scheme="https://100qin10086.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="力扣" scheme="https://100qin10086.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>力扣-回文数</title>
    <link href="https://100qin10086.github.io/posts/6850163c.html"/>
    <id>https://100qin10086.github.io/posts/6850163c.html</id>
    <published>2023-04-12T12:39:30.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note orange no-icon flat"><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p></div></h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>输入：x = 121<br>输出：true</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>1.先进行判断，如果是负数，直接返回false，因为负数不可能是回文数<br>2.将正数进行反转<br>3.反转思路，定义一个整数使其等于传入的x，<br>4.如果num不为0，每次对其模10，取的是最后一位<br>5.最后将num/10，将num减少一位<br>6.这个题其实和整数的反转是一个思路</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> cut<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cut<span class="token operator">=</span>cut<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            num<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cut<span class="token operator">==</span>x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note orange no-icon flat&quot;&gt;&lt;p&gt;给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。回文数是指正</summary>
      
    
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="力扣" scheme="https://100qin10086.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>力扣-字符串转换整数</title>
    <link href="https://100qin10086.github.io/posts/24c82729.html"/>
    <id>https://100qin10086.github.io/posts/24c82729.html</id>
    <published>2023-04-11T13:16:54.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note orange no-icon flat"><p>字符串转换整数 【atoi】 </p></div></h1><h2 id="算法要求如下"><a href="#算法要求如下" class="headerlink" title="算法要求如下"></a>算法要求如下</h2><p>1.读入字符串并丢弃无用的前导空格<br>2.检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。<br>3.读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。<br>4.将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。<br>5.如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。<br>6.返回整数作为最终结果。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>拿到这个题，一看感觉不难，感觉它好像没有用到任何的算法，全靠对字符串的处理，下面是我的思路【虽然力扣没有通过，但是感觉我好像没有错】<br>1.拿到传入的字符串，先对字符串进行取出前面和后面的空格处理，一个trim函数搞定<br>2.将字符串中的所有的加号和减号去掉<br>3.遍历字符串，将其可以转化成数字的字符加到res这个变量中，如果报异常，就说明遇到了不能转成数字的字符，本来打算直接return res的，但是后来发现还有正负号<br>  于是在catch语句中有进行了一个判断如果传入的字符串中有负号，就给res加个负号，没有直接return<br>4.在将单个字符加入到res之前先要经行判断是否溢出,哇这个地方可有意思了，之前做个一个题整数的反转，好像也要判断溢出的情况，当时死活编不来为啥要res<Integer.MIN_VALUE 10&&res>Integer.MAX_VALUE/10<br>  今天突然恍然大物，因为要是直接res<Integer.MIN_VALUE&&res>Integer.MAX_VALUE这样判断，这辈子都不可能判断成功，因为此时如果res满足条件，但是它已经溢出了，它的数值已经变了<br>5.如果溢出，我在里面使用了一个三元表达式，判断其是正还是负<br>6.最后遍历结束和，再将传入的字符串进行判断里面有+号还是-号还是+，-都有，最后输出结果<br>虽然最后力扣没有通过，但是我还是感觉自己没错，最后用c语言的函数测试了一下，好像还真错了<br><a href="https://imgse.com/i/ppOdv9A"><img src="https://s1.ax1x.com/2023/04/11/ppOdv9A.md.png" alt="ppOdv9A.md.png"></a></Integer.MIN_VALUE&&res></Integer.MIN_VALUE></p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">></span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token operator">=</span>res<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token operator">-</span>res<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token operator">-</span>res<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> res<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note orange no-icon flat&quot;&gt;&lt;p&gt;字符串转换整数 【atoi】 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;算法要求如下&quot;&gt;&lt;a h</summary>
      
    
    
    
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="力扣" scheme="https://100qin10086.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>力扣-整数反转</title>
    <link href="https://100qin10086.github.io/posts/bc60b4a2.html"/>
    <id>https://100qin10086.github.io/posts/bc60b4a2.html</id>
    <published>2023-04-10T13:40:44.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note orange no-icon flat"><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号）</p></div></h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>输入：x = 123<br>输出：321</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>第一眼看到这个题，哇刷了一周，第一次碰见这么简单的题，直接无脑创建StringBuffer，将数组放入其中。最后对传入数字进行一个简单的判断大于，小于零【StringBuffer reverse = stringBuffer.deleteCharAt(0).append(“-“).reverse()】，等于零。<br>最后经行stringBuffer.reverse，<br>点击运行，对辣，代码一粘贴，力扣一运行，错辣。一看报错。看不懂。继续看题，奥要考虑溢出的情况。<br>一想什么是溢出，那不就是异常吗，直接try-catch包裹，报异常就return 0；<br>运行。终于对辣<br><a href="https://imgse.com/i/ppq5cTA"><img src="https://s1.ax1x.com/2023/04/10/ppq5cTA.png" alt="ppq5cTA.md.png"></a><br>虽然做对了，但是还是要学习一下官方题解，一看，死去的c语言记忆突然攻击我，奥我c语言还学习过这么一种整数反转</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>int rev=0;<br>x=123l;<br>p=123%10;<br>x/=10;<br>rev=rev*10+digit;<br>好nb的解题方法，但是我这里要提到的是溢出的判断</p><h2 id="溢出判断"><a href="#溢出判断" class="headerlink" title="溢出判断"></a>溢出判断</h2><p>-2的31次方以及2的31次方-1；<br>前者为Integer.MIN_VALUE，后者为Integer.MAX_VALUE<br>至于为什么要除一个10，我的理解是【想好了在写】<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StringBuffer</span> reverse <span class="token operator">=</span> stringBuffer<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>reverse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">StringBuffer</span> reverse <span class="token operator">=</span> stringBuffer<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>reverse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> rev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rev<span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">||</span>rev<span class="token operator">></span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> digit<span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            x<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>            rev<span class="token operator">=</span>rev<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>digit<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> rev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note orange no-icon flat&quot;&gt;&lt;p&gt;给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 </summary>
      
    
    
    
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="力扣" scheme="https://100qin10086.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>力扣-N自然变形</title>
    <link href="https://100qin10086.github.io/posts/504bbeb9.html"/>
    <id>https://100qin10086.github.io/posts/504bbeb9.html</id>
    <published>2023-04-10T13:26:34.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note orange no-icon flat"><p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</p></div></h1><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>输入：s = “PAYPALISHIRING”, numRows = 3<br>输出：”PAHNAPLSIIGYIR”<br>输入：s = “PAYPALISHIRING”, numRows = 4<br>输出：”PINALSIGYAHRPI”<br>解释：<br>P     I    N<br>A   L S  I G<br>Y A   H R<br>P     I</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>额，我表示他哥的好像一点思路都没有，但是好像隐约感觉要创建numRows个字符串经行拼接。最后实在没有办法了<br>不管了直接C-V大法一把点到题解，吾，调了一个最nb的接下来才是真正的思路。<br>1.先判断传入的numRows如果其小于2，说明只有一行，直接返回<br>2.如果numRows大于等于2，创建一个ArrayList集合，里面放StringBuilder<br>3.遍历numRows，向集合中添加空的StringBuilder，最后只需要向这个空的字符串中添加字符<br>4.定义两个整形变量flag=-1反向，i=0；控制顺序<br>5.遍历传入的字符串，按照顺序向集合中的stringBuilder添加<br>6.如果是第一个或者最后一个就使flag=-flag，同时到下一个。i+=flag<br>7.最后向集合中的stringBuilder拼接</p><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><pre class="line-numbers language-none"><code class="language-none">class Solution &#123;    public String convert(String s, int numRows) &#123;        &#x2F;&#x2F; 如果给定的行数小于2行，直接返回        if (numRows&lt;2)&#123;            return s;        &#125;        ArrayList&lt;StringBuilder&gt; rows &#x3D; new ArrayList&lt;&gt;();        for (int i&#x3D;0;i&lt;numRows;i++)rows.add(new StringBuilder());        int flag&#x3D;-1;        int i&#x3D;0;        for (char c:s.toCharArray())&#123;            rows.get(i).append(c);            if (i&#x3D;&#x3D;0||i&#x3D;&#x3D;numRows-1)flag&#x3D;-flag;            i+&#x3D;flag;        &#125;        StringBuilder stringBuilder &#x3D; new StringBuilder();        for (StringBuilder row : rows) &#123;            stringBuilder.append(row);        &#125;        return stringBuilder.toString();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note orange no-icon flat&quot;&gt;&lt;p&gt;将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。&lt;/p</summary>
      
    
    
    
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="力扣" scheme="https://100qin10086.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>寻找两个正序数组的中位数</title>
    <link href="https://100qin10086.github.io/posts/5a3e9c20.html"/>
    <id>https://100qin10086.github.io/posts/5a3e9c20.html</id>
    <published>2023-04-09T12:56:22.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note orange no-icon flat"><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 </p></div></h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class="line-numbers language-none"><code class="language-none">输入：nums1 &#x3D; [1,3], nums2 &#x3D; [2]输出：2.00000解释：合并数组 &#x3D; [1,2,3] ，中位数 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>第一眼看到这个题是第一想法是创建一个新的数组找到中位数。<br>但是有感觉这个题没有这么简单<br>于是有萌生了一个新的思路直接算出这两个数组的大小，判断它的中位数再那一边，或者是由第一个数组的尾部和第二个数组的头部组成，但是最后发现，虽然这两个数组的再各自的数组内是顺序的，但是和再一起并不是顺序的，这个思路好像也over了<br>于是有有有有了一个思路，插入排序发，因为没一个数组都是独立顺序的，所以我想到了插入排序，选择数组.length的为已经排序好的数组，将另外一个数组用插入排序的方法插入，这样再时间上会省一点时间，最后发现反而更费时间，而且还做不出来<br>最后还是选择了第一种方案，直接暴力创建了一个集合，将两个数组放到集合中，只需要判断其length的大小以及是否小于2</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span>integers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>index<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> integers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> integers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>integers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>integers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note orange no-icon flat&quot;&gt;&lt;p&gt;给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两</summary>
      
    
    
    
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="力扣" scheme="https://100qin10086.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>手动实现SpringMVC底层机制</title>
    <link href="https://100qin10086.github.io/posts/a8391e97.html"/>
    <id>https://100qin10086.github.io/posts/a8391e97.html</id>
    <published>2023-04-09T09:32:32.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>手动实现SpringMVC底层机制【核心分发控制器+Controller和Service注入容器+对象自动装配+控制器方法获取参数+视图解析+返回JSON格式数据】</p></div></h1><h1 id="-1"><a href="#-1" class="headerlink" title></a><div class="note purple no-icon flat"><p>实现任务阶段1-开发QgqDispatcher</p></div></h1><h2 id="说明：编写QgqDispatcherServlet充当原生的DispatcherServlet-即核心控制器"><a href="#说明：编写QgqDispatcherServlet充当原生的DispatcherServlet-即核心控制器" class="headerlink" title="说明：编写QgqDispatcherServlet充当原生的DispatcherServlet(即核心控制器);"></a>说明：编写QgqDispatcherServlet充当原生的DispatcherServlet(即核心控制器);</h2><h2 id="分析示意图"><a href="#分析示意图" class="headerlink" title="分析示意图"></a>分析示意图</h2><p><a href="https://imgse.com/i/ppbEmm4"><img src="https://s1.ax1x.com/2023/04/09/ppbEmm4.md.png" alt="ppbEmm4.md.png"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="创建QgqDispatcherServlet"><a href="#创建QgqDispatcherServlet" class="headerlink" title="创建QgqDispatcherServlet"></a>创建QgqDispatcherServlet</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QgqDispatcherServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span>            <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span>            <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建qgqspringmvc-xml充当原来的applicationContext-mvc-xml文件-就是spring容器的配置文件，比如指定要扫描那些包下的类"><a href="#创建qgqspringmvc-xml充当原来的applicationContext-mvc-xml文件-就是spring容器的配置文件，比如指定要扫描那些包下的类" class="headerlink" title="创建qgqspringmvc.xml充当原来的applicationContext-mvc.xml文件(就是spring容器的配置文件，比如指定要扫描那些包下的类)"></a>创建qgqspringmvc.xml充当原来的applicationContext-mvc.xml文件(就是spring容器的配置文件，比如指定要扫描那些包下的类)</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    指定要扫描的基本包以及子包的java类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qgq.controller,com.qgq.service<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改web-xml文件，完成对核心-前端控制器的配置"><a href="#修改web-xml文件，完成对核心-前端控制器的配置" class="headerlink" title="修改web.xml文件，完成对核心/前端控制器的配置"></a>修改web.xml文件，完成对核心/前端控制器的配置</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">web-app</span> <span class="token name">PUBLIC</span>        <span class="token string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span>        <span class="token string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--  配置QgqDispatcherServlet 作为我们自己的前端控制器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>QgqDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.qgq.qgqspringmvc.servlet.QgqDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--给QgqDispatcherServlet配置参数，指定要操作的spring容器的配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:qgqspringmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--再tomcat启动时就自动加载--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--因为QgqDispatcherServlet作为前端控制器,所以要拦截所有请求--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>QgqDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="-2"><a href="#-2" class="headerlink" title></a><div class="note purple no-icon flat"><p>实现任务阶段2-完成客户端/浏览器可以请求控制层</p></div></h1><h2 id="创建自己的Controller和自定义注解"><a href="#创建自己的Controller和自定义注解" class="headerlink" title="创建自己的Controller和自定义注解"></a>创建自己的Controller和自定义注解</h2><h3 id="自定义Controller注解"><a href="#自定义Controller注解" class="headerlink" title="自定义Controller注解"></a>自定义Controller注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>qgqspringmvc<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2023/4/7 14:31 * @Version 1.0 * 我亦无他，惟手熟尔 * 该注解用于表示一个控制器组件 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token comment">//这个注解的作用是可以通过反射获得该注解</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Controller</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义RequestMapping注解"><a href="#自定义RequestMapping注解" class="headerlink" title="自定义RequestMapping注解"></a>自定义RequestMapping注解</h3><pre class="line-numbers language-none"><code class="language-none">package com.qgq.qgqspringmvc.annotation;import java.lang.annotation.*;&#x2F;** * @Author 秦家大胖 * @Date 2023&#x2F;2&#x2F;11 15:21 * @Version 1.0 * RequestMapping 注解用于指定控制器-方法的映射路径 *&#x2F;@Target(ElementType.METHOD)&#x2F;&#x2F;用于指定被修饰的Annotation能用于修饰那些元素@Retention(RetentionPolicy.RUNTIME)&#x2F;&#x2F;用于指定该Annotation可以保留多长时间，编译器把注解记录在class文件中，当运行Java程序时，JVM会保留注释通过反射获取该注解@Documented&#x2F;&#x2F;在生成文档时，可以看到该注解public @interface RequestMapping &#123;    String value() default &quot;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写XMLParser工具类，可以解析qgqspringmvc-xml-得到要扫描的包"><a href="#编写XMLParser工具类，可以解析qgqspringmvc-xml-得到要扫描的包" class="headerlink" title="编写XMLParser工具类，可以解析qgqspringmvc.xml,得到要扫描的包"></a>编写XMLParser工具类，可以解析qgqspringmvc.xml,得到要扫描的包</h3><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.创建getbasePackage(String xmlFile)传入xml文件名<br>2.使用dom4j技术对xml文件经行读取<br>3.要注意”component-scan”是根目录下bean下的一个子目录，而”base-package”是”component-scan”目录下的一个属性<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>qgqspringmvc<span class="token punctuation">.</span>xml</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">DocumentException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">Element</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">SAXReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2023/4/7 14:38 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLParser</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getBasePackage</span><span class="token punctuation">(</span><span class="token class-name">String</span> xmlFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//整个解析的过程是前面讲过的</span>        <span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过得到类的加载路径->获取到spring配置文件</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">XMLParser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>xmlFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//得到xml文件的文档</span>            <span class="token class-name">Document</span> document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Element</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Element</span> componentScanElement <span class="token operator">=</span> rootElement<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"component-scan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> basePackage <span class="token operator">=</span> componentScanElement<span class="token punctuation">.</span><span class="token function">attribute</span><span class="token punctuation">(</span><span class="token string">"base-package"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> basePackage<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DocumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="开发QgqWebApplicationContext，充当Spring容器，得到扫描类的全路径列表，完成功能说明-把指定的目录包括子目录下的Java类的全路径扫描到集合中"><a href="#开发QgqWebApplicationContext，充当Spring容器，得到扫描类的全路径列表，完成功能说明-把指定的目录包括子目录下的Java类的全路径扫描到集合中" class="headerlink" title="开发QgqWebApplicationContext，充当Spring容器，得到扫描类的全路径列表，完成功能说明-把指定的目录包括子目录下的Java类的全路径扫描到集合中"></a>开发QgqWebApplicationContext，充当Spring容器，得到扫描类的全路径列表，完成功能说明-把指定的目录包括子目录下的Java类的全路径扫描到集合中</h3><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.根据上面写的XMLParser工具类，得到要扫描的包<br>2.因为要扫描的包可能不知不止一个，所以再配置文件中将要扫描的包用,号隔开，所以将得到的要扫描的包同样用,号隔开，这样就将全部要扫描的包得到<br>3，调用方法scanPackage方法对各个包进行扫描,获取到classFullPathList<br>4.scanPackage分析先通过类加载器url=this.getClass().getClassLoader().getResource(“/“ + pack.replaceAll(“\.”, “/“))得到真正执行的类，形式为D:\idea_java_projects\hsp-springmvc\target\hsp-springmvc\WEB-INF\classes\com\hspedu\controller\MonsterController.class<br>5.取出路径(url.getFile),因为路径也可以作为文件,所以File dir = new File(path);<br>6.扫描这个目录，及其子目录dir.listFile(),如果是目录,则递归扫描(需要带上子目录的目录名),如果是文件，获取到类的全路径，去掉.class放入到集合中，因为这些路径到时候要通过反射实例化对象<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scanPackage</span><span class="token punctuation">(</span><span class="token class-name">String</span> pack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//通过类的加载器得到指定的包对应的工作路径[绝对路径]</span>        <span class="token class-name">URL</span> resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/"</span> <span class="token operator">+</span> pack<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据得到的路径对其进行扫描，吧类的全路径保存到classFullPathList</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//再io中把目录也视为一个文件</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历file</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">scanPackage</span><span class="token punctuation">(</span>pack <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> classFullPath <span class="token operator">=</span> pack <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                classFullPathList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>classFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="完善QgqWebApplicationContext，充当Spring容器-实例化对象到容器中"><a href="#完善QgqWebApplicationContext，充当Spring容器-实例化对象到容器中" class="headerlink" title="完善QgqWebApplicationContext，充当Spring容器-实例化对象到容器中"></a>完善QgqWebApplicationContext，充当Spring容器-实例化对象到容器中</h3><h3 id="完成功能说明，将扫描到的类，再满足条件的情况下-即有相应的注解-Controller-Service-反射注入到ioc容器"><a href="#完成功能说明，将扫描到的类，再满足条件的情况下-即有相应的注解-Controller-Service-反射注入到ioc容器" class="headerlink" title="完成功能说明，将扫描到的类，再满足条件的情况下(即有相应的注解@Controller@Service),反射注入到ioc容器"></a>完成功能说明，将扫描到的类，再满足条件的情况下(即有相应的注解@Controller@Service),反射注入到ioc容器</h3><h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.创建一个类型为 ConcurrentHashMap的ioc用于存放反射后的bean对象<br>2.初始化自定义的spring容器，目标就是要把@Controller等等初始化到容器中<br>3.初始化具体过程，再init中先完成得到要扫描的包，以及将要扫描的包极其子包中文件放入到Arraylist中，再实例化扫描到的类<br>4.实例化扫描到的类，先遍历存放路径的集合，通过反射创建实例，再根据实例判断其是否有@Controller注解<br>5.如果类有@Controller注解，得到该类的类名(首字母小写)作为key，再得到实例化对象作为value放入到ioc中<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//判断是否扫描到了类</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>classFullPathList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> classFullPath <span class="token operator">:</span> classFullPathList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token comment">//得到类名数字目小写</span>                   <span class="token class-name">String</span> simpleName <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   simpleName <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">uncapitalize</span><span class="token punctuation">(</span>simpleName<span class="token punctuation">)</span><span class="token punctuation">;</span>                   ioc<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>simpleName<span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="完成请求URL和控制器方法的映射关系"><a href="#完成请求URL和控制器方法的映射关系" class="headerlink" title="完成请求URL和控制器方法的映射关系"></a>完成请求URL和控制器方法的映射关系</h3><h3 id="完成功能说明-创建一个类，将-Controller修饰的bean，-RequestMapping的url路径，以及-RequestMapping修饰的方法封装到一个对象中"><a href="#完成功能说明-创建一个类，将-Controller修饰的bean，-RequestMapping的url路径，以及-RequestMapping修饰的方法封装到一个对象中" class="headerlink" title="完成功能说明 创建一个类，将@Controller修饰的bean，@RequestMapping的url路径，以及@RequestMapping修饰的方法封装到一个对象中"></a>完成功能说明 创建一个类，将@Controller修饰的bean，@RequestMapping的url路径，以及@RequestMapping修饰的方法封装到一个对象中</h3><h3 id="示意图分析"><a href="#示意图分析" class="headerlink" title="示意图分析"></a>示意图分析</h3><p><a href="https://imgse.com/i/ppbxfw6"><img src="https://s1.ax1x.com/2023/04/10/ppbxfw6.md.png" alt="ppbxfw6.md.png"></a></p><h3 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.创建一个QgqHandler类，里面存放的为@RequestMapping的url和对应的控制器-方法映射关系保存到集合中<br>2.在自己创建的核心控制器 QgqDispatcherServlet中创建ArrayList集合，存放url和控制器-方法的映射关系<br>3.创建方法initHandlerMapping，完成控制器层url—&gt;Controller—&gt;方法的映射关系(该关系封装到QgqHandler对象)，并放入到handlerList集合中<br>4.initHandlerMapping方法的具体的操作，先遍历自定义容器中的ioc判断里面的实例化对象是否有@Controller注解<br>5.如果有@Controller注解，得到该实例化的所有方法并遍历，判断这些方法是否有注解@RequestMapping。<br>6.如果有@RequestMapping注解，得到其的value值，并将url-控制器-方法封装到QgqHandler对象中，最后放入到ArrayList中<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>qgqWebApplicationContext<span class="token punctuation">.</span>ioc<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//判断当前ioc容器是否为空</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//遍历ioc容器的bean对象，然后进行url映射器处理</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> qgqWebApplicationContext<span class="token punctuation">.</span>ioc<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果注入的Bean是Controller</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//取出所有的方法</span>                <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//遍历</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> declaredMethod <span class="token operator">:</span> declaredMethods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>declaredMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">RequestMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">String</span> url <span class="token operator">=</span>declaredMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RequestMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">QgqHandler</span> qgqHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QgqHandler</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> declaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>                        handlerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>qgqHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="完成QgqDispatcherServlet分发请求到对应控制器方法"><a href="#完成QgqDispatcherServlet分发请求到对应控制器方法" class="headerlink" title="完成QgqDispatcherServlet分发请求到对应控制器方法"></a>完成QgqDispatcherServlet分发请求到对应控制器方法</h3><h3 id="完成功能说明：当用户发出请求，根据用户请求url找到对应的控制器-方法，并反射调用"><a href="#完成功能说明：当用户发出请求，根据用户请求url找到对应的控制器-方法，并反射调用" class="headerlink" title="完成功能说明：当用户发出请求，根据用户请求url找到对应的控制器-方法，并反射调用"></a>完成功能说明：当用户发出请求，根据用户请求url找到对应的控制器-方法，并反射调用</h3><h3 id="示意图分析-1"><a href="#示意图分析-1" class="headerlink" title="示意图分析"></a>示意图分析</h3><p><a href="https://imgse.com/i/ppbzK1J"><img src="https://s1.ax1x.com/2023/04/10/ppbzK1J.md.png" alt="ppbzK1J.md.png"></a></p><h3 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.先创建一个返回值为QgqHandler类型的方法传入的参数为request<br>2.根据传入的参数得到uri,遍历存放QgqHandler映射关系的集合，判断是否有与uri对应的QgqHandler，如果有，则return Handler，没有就return null<br>3.创建一个分发方法传入request和response,在根据上面写的得到该request对应的QgqHandler对象，如果该对象不为空，则通过反射调用<br>  qgqHandler.getMethod().invoke(qgqHandler.getController,req,response);</p><h3 id="代码一-通过传入的request得到uri-得到QgqHandler"><a href="#代码一-通过传入的request得到uri-得到QgqHandler" class="headerlink" title="代码一,通过传入的request得到uri,得到QgqHandler"></a>代码一,通过传入的request得到uri,得到QgqHandler</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">QgqHandler</span> <span class="token function">getQgqHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//先回去到用户请求的uri</span>        <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">QgqHandler</span> qgqHandler <span class="token operator">:</span> handlerList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestURI<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>qgqHandler<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//说明匹配成功</span>                <span class="token keyword">return</span> qgqHandler<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码一-通过传入的request得到uri-得到QgqHandler，通过反射调用与uri相对应的方法"><a href="#代码一-通过传入的request得到uri-得到QgqHandler，通过反射调用与uri相对应的方法" class="headerlink" title="代码一,通过传入的request得到uri,得到QgqHandler，通过反射调用与uri相对应的方法"></a>代码一,通过传入的request得到uri,得到QgqHandler，通过反射调用与uri相对应的方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">executeDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span>                             <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HspHandler</span> hspHandler <span class="token operator">=</span> <span class="token function">getHspHandler</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> hspHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//没有匹配的 Handler</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>404 NOT FOUND&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//有匹配的 Handler, 就调用</span>            hspHandler<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>hspHandler<span class="token punctuation">.</span><span class="token function">getController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span>                    response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="-3"><a href="#-3" class="headerlink" title></a><div class="note purple no-icon flat"><p>实现任务阶段 4- 从 web.xml 动态获取 qgqspringmvc.xml</p></div></h1><h3 id="说明-前面我们加载qgqspringmvc-xml是硬编码，现在做活，从web-xml动态获取"><a href="#说明-前面我们加载qgqspringmvc-xml是硬编码，现在做活，从web-xml动态获取" class="headerlink" title="说明:前面我们加载qgqspringmvc.xml是硬编码，现在做活，从web.xml动态获取"></a>说明:前面我们加载qgqspringmvc.xml是硬编码，现在做活，从web.xml动态获取</h3><h3 id="示意图分析-2"><a href="#示意图分析-2" class="headerlink" title="示意图分析"></a>示意图分析</h3><p><a href="https://imgse.com/i/ppbzvuR"><img src="https://s1.ax1x.com/2023/04/10/ppbzvuR.md.png" alt="ppbzvuR.md.png"></a></p><h3 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.先分析核心控制器与自定义Spring容器之间的关系。可以看出前端控制器初始化spring容器<br>2.所以在自定义spring容器时创建一个属性contextConfigLocation，然后核心控制器在初始化spring容器时动态的传入xml文件名<br>3.有因为核心控制器为一个Servlet，所以在核心控制器的init方法中初始化spring容器<br>4.最总把在wen.xml文件中存放的spring容器的配置文件名，通过spring容器的有参构造器传入给spring容器，然后Spring容器拿到后进行操作</p><h1 id="-4"><a href="#-4" class="headerlink" title></a><div class="note purple no-icon flat"><p>实现任务阶段 5- 从 完成自定义@Service注解功能</p></div></h1><h3 id="功能说明：如果给某个类加上-Service，则可以将其注入到我们的Spring容器，并可以通过接口名支持多级，类名来获取到Service-Bean"><a href="#功能说明：如果给某个类加上-Service，则可以将其注入到我们的Spring容器，并可以通过接口名支持多级，类名来获取到Service-Bean" class="headerlink" title="功能说明：如果给某个类加上@Service，则可以将其注入到我们的Spring容器，并可以通过接口名支持多级，类名来获取到Service Bean"></a>功能说明：如果给某个类加上@Service，则可以将其注入到我们的Spring容器，并可以通过接口名支持多级，类名来获取到Service Bean</h3><h3 id="示意图分析-3"><a href="#示意图分析-3" class="headerlink" title="示意图分析"></a>示意图分析</h3><p><a href="https://imgse.com/i/ppL4VYt"><img src="https://s1.ax1x.com/2023/04/11/ppL4VYt.md.png" alt="ppL4VYt.md.png"></a></p><h3 id="思路分析-6"><a href="#思路分析-6" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.先创建@Service注解<br>2.前面再遍历集合classFullPathList(存放的是扫描包/子包的类的全路径)只处理了是@Controller<br>3.判断class.forName后的类是否有@Service注解<br>4.如果有@Service注解，得到它的value当作key注入到ioc中<br>5.如果没有指定value，我们就使用默认的机制注入ioc<br>6.可以通过接口名/类名【首字母小写】来注入ioc容器<br>7.得到所有接口的名称<br>8.遍历接口，然后通过多个接口名来注入<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//如果有其他的注解，进行反射</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 先获取Service的value值</span>                    <span class="token class-name">Service</span> serviceAnnotation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> beanName <span class="token operator">=</span> serviceAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 说明没有指定value，我们就使用默认的机制注入ioc</span>                        <span class="token comment">// 可以通过接口名/类名[首字母小写]来注入ioc容器</span>                        <span class="token comment">// 1.得到所有接口的名称</span>                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Object</span> instance <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 2.遍历接口，然后通过多个接口名来注入</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> anInterface <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">String</span> beanName2 <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">uncapitalize</span><span class="token punctuation">(</span>anInterface<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            ioc<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName2<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">// 通过类名首字母小写完成</span>                        <span class="token comment">// beanName = StringUtils.uncapitalize(clazz.getSimpleName());</span>                        <span class="token comment">// ioc.put(beanName,instance);</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果有指定名称，就使用该名称注入即可</span>                        ioc<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h1 id="-5"><a href="#-5" class="headerlink" title></a><div class="note purple no-icon flat"><p>实现任务阶段 6- 完成 Spring 容器对象的自动装配 -@Autowried</p></div></h1><h3 id="说明：完成Spring容器中对象的注入-自动装配"><a href="#说明：完成Spring容器中对象的注入-自动装配" class="headerlink" title="说明：完成Spring容器中对象的注入/自动装配"></a>说明：完成Spring容器中对象的注入/自动装配</h3><h3 id="完成任务说明-加入-AutoWired注解，进行对象属性的装配"><a href="#完成任务说明-加入-AutoWired注解，进行对象属性的装配" class="headerlink" title="完成任务说明:加入@AutoWired注解，进行对象属性的装配"></a>完成任务说明:加入@AutoWired注解，进行对象属性的装配</h3><h3 id="思路分析-7"><a href="#思路分析-7" class="headerlink" title="思路分析"></a>思路分析</h3><p>1.先写一个注解@AutoWired<br>2.在初始化方法中将扫描到的类反射到ioc的容器中后<br>3.接下来就是完成注入的bean对象的属性的装配<br>4.遍历ioc中的所有注入的bean对象，得到其中的所有的字段<br>5.遍历得到的这些字段，判断是否有注解@AutoWired,<br>6.如果有@AutoWired注解，并且@AutoWired有value，在ioc容器中得到这个value的实例化对象，通过反射装配对象<br>7.如果没有value，得到字段类型的首字母小写作为名字在ioc容器中查找，如果找到，通过反射装配对象。<br>8.在装配时，要进行爆破，因为有的字段是私有类型<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeAutoWired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//判断ioc有没有要装配的对象</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>ioc<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//遍历ioc中的所有注入的bean对象，然后获取到bean的所有字段，判断是否需要装配</span>       <span class="token comment">/**        * 一个entry=>(String,Object) String就是注入对象时名称，object就是bean        */</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> ioc<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//String key = entry.getKey();</span>           <span class="token class-name">Object</span> bean <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> declaredField <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>declaredField<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">AutoWired</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token class-name">AutoWired</span> annotation <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AutoWired</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">String</span> beanName <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       <span class="token comment">//即得到字段类型的首字母小写作为名字</span>                       <span class="token class-name">String</span> simpleName <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       beanName <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">uncapitalize</span><span class="token punctuation">(</span>simpleName<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>                   <span class="token comment">//如果设置了value</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> ioc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"ioc容器不存在要装配的bean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>                   <span class="token comment">//为了防止属性时private，需要暴力破解</span>                   declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//可以装配属性</span>                   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                       declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> ioc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h1 id="-6"><a href="#-6" class="headerlink" title></a><div class="note purple no-icon flat"><p>实现任务阶段 7- 完成简单视图解</p></div></h1><h2 id="功能说明通过方法返回的-String-转发或者重定向到指定"><a href="#功能说明通过方法返回的-String-转发或者重定向到指定" class="headerlink" title="功能说明通过方法返回的 String, 转发或者重定向到指定"></a>功能说明通过方法返回的 String, 转发或者重定向到指定</h2><h2 id="思路分析-8"><a href="#思路分析-8" class="headerlink" title="思路分析"></a>思路分析</h2><p>1.在QgqDispatcherServlet中的doPost方法中编写一个请求转发的方法，因为此时的servlet刚好被调用<br>2.executeDispatch(HttpServletRequest request, HttpServletResponse response)方法解析<br>3.先通过传入的request从存放控制器-url-方法映射集合中读取到一组映射【其实就是一个QgqHandler对象】<br>4.判断这组映射是否为空，如果为空，response返回404<br>5.如果不为空，先通过qgqHandler这个对象得到目标方法的所有形参信息<br>6.创建一个参数数组【对应实参数组】<br>7.遍历形参数组，按照形参的类型先将HttpServletRequest和HttpServletResponse按照形参的顺序，放入到实参数组中<br>8.得到request传入的所有的参数，是以Map<String,String[]>类型接收的<br>9.再将这些参数按照形参数组的顺序进行填充到实参数组中，没有传入的则按照默认填充<br>10.反射调用目标方法，得到目标方法的返回结果 qgqHandler.getMethod().invoke<br>11.判断返回的结果是forward还是redirect，按照这个进行请求转发或者重定向<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">executeDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">QgqHandler</span> qgqHandler <span class="token operator">=</span> <span class="token function">getQgqHandler</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> qgqHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//说明用户请求的资源不存在</span>                response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>404 NOT FOUND&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//匹配成功,反射调用控制器的方法</span>                <span class="token comment">//1.得到目标方法的形参信息[对应的数组]</span>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> qgqHandler<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//2.创建一个参数数组[对应实参数组]，再后面反射调用目标方法时，会使用到</span>                <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>parameterTypes<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//遍历形参数组，根据形参数组信息，将实参填充到实参数组</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameterTypes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//取出每一个形参类型</span>                    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> parameterType <span class="token operator">=</span> parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">//如果这个形参是HttpServletRequest将request填充到params</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"HttpServletRequest"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>parameterType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"HttpServletResponse"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>parameterType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//将Http用户请求参数封装到params数组中，注意，再填充数组时，注意顺序问题</span>                <span class="token comment">//为什么可以反射，因为method=public void com.qgq.controller.MonsterController.listMonster(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)</span>                <span class="token comment">//有该方法的全路径</span>                <span class="token comment">//将需要传递给目标方法的实参=>封装到实参数组=>然后以反射的方式传入给目标方法</span>                <span class="token comment">//1.获取http请求参数集合</span>                <span class="token comment">//解析String, String[]</span>                <span class="token comment">//String表示http请求的参数名</span>                <span class="token comment">//String[]表示http请求的参数值</span>                <span class="token comment">//处理提交的的数据中文乱码</span>                request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//遍历parameterMap将请求参数，按照顺序填充到实参数组params</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> stringEntry <span class="token operator">:</span> parameterMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> name <span class="token operator">=</span> stringEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> value <span class="token operator">=</span> stringEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">//我们得到请求的参数对应目标方法的第几个形参，将其填充</span>                    <span class="token keyword">int</span> indexRequestParameterIndex <span class="token operator">=</span> <span class="token function">getIndexRequestParameterIndex</span><span class="token punctuation">(</span>qgqHandler<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>indexRequestParameterIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//找到对应的位置</span>                        params<span class="token punctuation">[</span>indexRequestParameterIndex<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//没有找到@RequestParam注解对应的参数，就会使用默认的机制进行配置</span>                        <span class="token comment">//思路</span>                        <span class="token comment">//1.得到目标方法的所有形参的名称</span>                        <span class="token comment">//2.对得到目标方法的形参名进行遍历,如果匹配就把当前请求的参数值，填充到params</span>                        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> parameterNames <span class="token operator">=</span> <span class="token function">getParameterNames</span><span class="token punctuation">(</span>qgqHandler<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameterNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token comment">//如果请求参数名和目标方法的形参名一样,说明匹配成功</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>parameterNames<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//反射调用目标方法，得到目标方法返回的结果</span>                <span class="token class-name">Object</span> result <span class="token operator">=</span> qgqHandler<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>qgqHandler<span class="token punctuation">.</span><span class="token function">getController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> viewName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> result<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>viewName<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">String</span> viewType <span class="token operator">=</span> viewName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token class-name">String</span> viewPage <span class="token operator">=</span> viewName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token comment">//判断是forward还是redirect</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"forward"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>viewType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>viewPage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"redirect"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>viewType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>viewName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//默认是请求转发</span>                        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>viewName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token comment">//这里还可以扩展</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></String,String[]></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;手动实现SpringMVC底层机制【核心分发控制器+Controller和Service注入容器+对象</summary>
      
    
    
    
    <category term="主流框架" scheme="https://100qin10086.github.io/categories/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="ssm" scheme="https://100qin10086.github.io/tags/ssm/"/>
    
    <category term="框架" scheme="https://100qin10086.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Java" scheme="https://100qin10086.github.io/tags/Java/"/>
    
    <category term="SpringMVC" scheme="https://100qin10086.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>无重复字符的最长子串</title>
    <link href="https://100qin10086.github.io/posts/4cd9164b.html"/>
    <id>https://100qin10086.github.io/posts/4cd9164b.html</id>
    <published>2023-04-05T13:22:35.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note orange no-icon flat"><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度 </p></div></h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">输入: s = "abcabcbb"输出: 3 解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.创建一个HashMap，里面存储字符串中的字符和它们最后一次出现的索引<br>2.定义两个变量一个max为最长字串的长度,一个是start,字串的起始位置<br>3.对字符串进行扫描并进行判断，如果在HashMap中存在该字符，更新子串的起始位置为她的前一个位置和当前位置之间的较大值start=Math.max(map.get(c)+1,start);<br>4.计算当前子串的长度,并更新为最大长度  max=Math.max(max,i-start+1)<br>5.最后将字符串的索引存储到map中map.put(c,i);<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 创建一个 HashMap 来存储字符串中的字符和它们最后一次出现的索引</span>       <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">// 遍历字符串</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 如果当前字符之前已经出现过，更新子串的起始位置为它的前一个位置和当前起始位置之间的较大值</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               start<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">// 计算当前子串的长度，并更新最大长度</span>           max<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>i<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 把当前字符的索引存储到 map 中</span>           map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> max<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note orange no-icon flat&quot;&gt;&lt;p&gt;给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;</summary>
      
    
    
    
    <category term="力扣" scheme="https://100qin10086.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="力扣" scheme="https://100qin10086.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>javaweb springMVC springBoot文件的上传与下载总结</title>
    <link href="https://100qin10086.github.io/posts/73d27226.html"/>
    <id>https://100qin10086.github.io/posts/73d27226.html</id>
    <published>2023-04-05T01:42:20.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>javaWeb文件上传 </p></div></h1><h2 id="文件上传的基本原理"><a href="#文件上传的基本原理" class="headerlink" title="文件上传的基本原理"></a>文件上传的基本原理</h2><p>1.还是使用表单提交<br>2.action还是按照以前的规则来指定<br>3.method指定为post、<br>4.enctype:encodetype编码类型 默认是Application/x-www-form-urlencoded，这种编码不适合二进制文件数据的提交，一般适用于文本<br>5.如果要进行二进制文件的提交，enctype要指定multipart/form-data</p><h2 id="前端代码部分"><a href="#前端代码部分" class="headerlink" title="前端代码部分"></a>前端代码部分</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileUploadServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    家居图: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prevView<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">prev</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/></span></span>    家居名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">prev</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//获取展示图片的区域</span>        <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"prevView"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取文件对象</span>        <span class="token keyword">let</span> file <span class="token operator">=</span> event<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">//获取文件阅读器</span>        <span class="token keyword">let</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//给 img 的 src 设置图片 url</span>            img<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后端代码思路"><a href="#后端代码思路" class="headerlink" title="后端代码思路"></a>后端代码思路</h2><p>1.先根据request判断接收到文件的文件表单编码是不是（enctype=“multipart/form-data”）<br>2.构建一个解析上传数据的工具对象ServletFileUpload(diskFileItemFactory)<br>3.解决接收道到的文件名时是中文乱码问题servletFileUpload.setHeaderEncoding(“utf-8”);<br>4.关键的地方创建的解析上传数据的工具对象servletFileUpload可以将上传的多个数据封装到list集合中<fileItem><br>5.遍历并分别判断，因为form表单中有多个input标签<br>6.如果是一个文件，得到它的文件名fileItem.getName();<br>7.创建一个存放长传文件的目录，并得到它的完整目录,request.getServletContext.getRealPath(根目录名)。<br>8.判断这个目录是否存在，如果是第一次上传，目录可能不存在此时要创建目录，目录名.mkdir<br>9.得到一个上传文件的完整的文件名.目录名+”/“+文件名<br>10.将上传的文件上传到指定的目录</fileItem></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>问题引出<br>1.如果在上传时，需要重复上传如何解决<br>2.如果将所有上传的文件全部放在同一文件夹中，那么在引用查找时，就会需要比较长的时间<br>问题解决<br>1.为了解决重复上传可以采用修改文件名的方法解决<br>UUID.randomUUID().toString()+”<em>“+System.currentTimeMillis()+”</em>“+name<br>2.为了解决将所有文件全部放在一个文件夹中的影响速度,可以采取将不同时间段的文件放到不同的文件夹中<br>fileRealPath+ WebUtils.getYearMonthDay()；</p><h2 id="后端代码部分"><a href="#后端代码部分" class="headerlink" title="后端代码部分"></a>后端代码部分</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FileUploadServlet被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是不是文件表单其编码是不是（enctype=“multipart/form-data”）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ServletFileUpload</span><span class="token punctuation">.</span><span class="token function">isMultipartContent</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//            System.out.println("ok");</span>            <span class="token comment">//2.创建DiskFileItemFactory对象，用于构建一个解析上传数据的工具对象</span>            <span class="token class-name">DiskFileItemFactory</span> diskFileItemFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.创建一个解析上传数据的工具对象</span>            <span class="token comment">/**             *     &lt;input type="file" name="pic" id="" value="2xxx.jpg" onchange="prev(this)"/>             *     家居名: &lt;input type="text" name="name">&lt;br/>             *     &lt;input type="submit" value="上传"/>             */</span>            <span class="token class-name">ServletFileUpload</span> servletFileUpload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>diskFileItemFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//解决接收到的文件名是中文乱码问题</span>            servletFileUpload<span class="token punctuation">.</span><span class="token function">setHeaderEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4.关键的地方,servletFileUpload对象可以把表单提交的数据text/文件将其封装到FileItem文件项中</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileItem</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> servletFileUpload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//                System.out.println("list==>"+list);</span>                <span class="token comment">//遍历，并分别处理</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileItem</span> fileItem <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//                    System.out.println("fileItem"+fileItem);</span>                    <span class="token comment">//判断是不是一个文件=》</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileItem<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果为真表单</span>                        <span class="token class-name">String</span> string <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//框框里面写的家具名</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"家具名="</span><span class="token operator">+</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//是一个文件</span>                        <span class="token comment">//获取上传的文件名</span>                        <span class="token class-name">String</span> name <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的文件名="</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//把这个上传到服务器temp下的文件保存到你指定的目录</span>                        <span class="token comment">//1.指定一个目录，就是我们网站工作目录下</span>                        <span class="token class-name">String</span> filePath<span class="token operator">=</span><span class="token string">"/upload/"</span><span class="token punctuation">;</span>                        <span class="token comment">//2.获取完整目录[io/servlet/基础]</span>                        <span class="token comment">//fileRealPath=D:\proj\javaweb\fileupdown\out\artifacts\fileupdown_war_exploded\xupload\</span>                        <span class="token class-name">String</span> fileRealPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fileRealPath="</span><span class="token operator">+</span>fileRealPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//3.创建这个上传的目录</span>                        <span class="token comment">//  思路，我们也写一个工具类，可以返回/2022/10/9</span>                        <span class="token class-name">File</span> fileRealPathDirectory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileRealPath<span class="token operator">+</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getYearMonthDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileRealPathDirectory<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//不存在</span>                            fileRealPathDirectory<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">//4.将文件拷贝到fileRealPathDirectory目录</span>                        <span class="token comment">//  构建一个上传文件的完整路径：目录+文件名</span>                        <span class="token comment">//  对上传的文件名进行处理，前面增加一个前缀，保证是唯一即可</span>                        name<span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>name<span class="token punctuation">;</span>                        <span class="token class-name">String</span> fileFullPath<span class="token operator">=</span>fileRealPathDirectory<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>name<span class="token punctuation">;</span>                        fileItem<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileFullPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//5.提示信息</span>                        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是文件表单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="-1"><a href="#-1" class="headerlink" title></a><div class="note purple no-icon flat"><p>javaWeb文件下载 </p></div></h1><h2 id="文件下载的思路"><a href="#文件下载的思路" class="headerlink" title="文件下载的思路"></a>文件下载的思路</h2><p>1.获取要下载的文件名request.getParameter，并且将要下载的文件名的绝对路径获得<br>2.给http响应设置响应头Content-Type，就是文件的MIME，就是设置它的响应。这一步最重要，给浏览器返回响应体Content-Type: image/jpeg<br>3.读去要下载的文件，返回给客户端/浏览器<br>InputStream resourceAsStream = servletContext.getResourceAsStream(downloadFileFullPath);<br>ServletOutputStream outputStream = response.getOutputStream();<br>IOUtils.copy(resourceAsStream,outputStream);</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FileDownloadServlet被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.先准备要下载的文件[假定这些文件是公共的资源]</span>        <span class="token comment">//  重要：保证当我们的tomcat启动后，在工作目录out下有download文件夹，并且有可供下载的文件</span>        <span class="token comment">//2.获取到要下载的文件的名字</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> downloadFileName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"downloadFileName="</span><span class="token operator">+</span>downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.给http响应，设置响应头Content-Type，就是文件的MIME</span>        <span class="token comment">//  通过servletContext来获取</span>        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> downloadPath<span class="token operator">=</span><span class="token string">"/download/"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> downloadFileFullPath<span class="token operator">=</span>downloadPath<span class="token operator">+</span>downloadFileName<span class="token punctuation">;</span>        <span class="token class-name">String</span> mimeType <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>downloadFileFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mimeType= "</span><span class="token operator">+</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.给http响应，设置响应头Contebt-Disposition</span>        <span class="token comment">//  这里考虑的细节比较多，比如不同的浏览器写法不一样，考虑编码</span>        <span class="token comment">//  ff 是 文件名需要base64,而ie/chrome是URL编码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Firefox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 火狐 Base64编码</span>            <span class="token class-name">Base64<span class="token punctuation">.</span>Encoder</span> encoder <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encode <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>downloadFileName<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename==?UTF-8?B?"</span> <span class="token operator">+</span>                   encode <span class="token operator">+</span> <span class="token string">"?="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 其他(主流ie/chrome)使用URL编码操作</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename="</span> <span class="token operator">+</span>                    <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>downloadFileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//5.读取下载的文件数据，返回给客户端/浏览器</span>        <span class="token comment">//（1）创建一个和下载的文件管理的输入流</span>        <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>downloadFileFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//（2）得到返回数据的输出流[因为返回文件大多数是二进制文件（字节），IO Java基础]</span>        <span class="token class-name">ServletOutputStream</span> outputStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">,</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="-2"><a href="#-2" class="headerlink" title></a><div class="note purple no-icon flat"><p>SpringMVC文件上传 </p></div></h1><h2 id="相比较与于原生的文件上传，框架已经被封装了很多，好多东西都已经看不见了"><a href="#相比较与于原生的文件上传，框架已经被封装了很多，好多东西都已经看不见了" class="headerlink" title="相比较与于原生的文件上传，框架已经被封装了很多，好多东西都已经看不见了"></a>相比较与于原生的文件上传，框架已经被封装了很多，好多东西都已经看不见了</h2><h2 id="SpringBoot文件上传的基本介绍"><a href="#SpringBoot文件上传的基本介绍" class="headerlink" title="SpringBoot文件上传的基本介绍"></a>SpringBoot文件上传的基本介绍</h2><p>1.SpringMVC为文件上传提供了直接的支持，这种支持是通过即插即用的MultipartResolver实现的<br>2.springMVC上下文中默认没有装配MultipartResovler，因此默认情况下不能处理文件的上传工作,如果想要使用Spring的文件上传功能,需要在上下文中配置MultipartResolver<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="前端代码演示"><a href="#前端代码演示" class="headerlink" title="前端代码演示"></a>前端代码演示</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%=request.getContextPath()%>/fileUpload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    文件介绍:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>introduce<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    选择文件:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文件上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后端代码思路-1"><a href="#后端代码思路-1" class="headerlink" title="后端代码思路"></a>后端代码思路</h2><p>1.由于前端传过来了一个MultipartFile file，可以通过这个得到上传的文件名<br>2.得到要把上传文件保存到那个路径（绝对路径）request.getServletContext().getRealPath(“/img/“ + originalFilename);<br>3.创建文件File saveToFile = new File(fileFullPath);<br>4.将上传到后端的文件，转存到刚才创建的文件中file.transferTo(saveToFile)</p><h2 id="后端代码部分被"><a href="#后端代码部分被" class="headerlink" title="后端代码部分被"></a>后端代码部分被</h2><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public String fileUpload(@RequestParam(value &#x3D; &quot;file&quot;) MultipartFile file,String introduce ,HttpServletRequest request) throws IOException &#123;        &#x2F;&#x2F;接收到提交的文件名        String originalFilename &#x3D; file.getOriginalFilename();        System.out.println(&quot;你上传的文件名是&quot;+originalFilename);        System.out.println(&quot;文件的介绍&quot;+introduce);        &#x2F;&#x2F;得到要把上传文件保存到那个路径        String fileFullPath &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;img&#x2F;&quot; + originalFilename);        &#x2F;&#x2F;创建文件        File saveToFile &#x3D; new File(fileFullPath);        &#x2F;&#x2F;将上传的文件，转存到saveToFile        file.transferTo(saveToFile);        return &quot;success&quot;;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="-3"><a href="#-3" class="headerlink" title></a><div class="note purple no-icon flat"><p>SpringBoot文件上传 </p></div></h1><h2 id="文件上传的基本思路"><a href="#文件上传的基本思路" class="headerlink" title="文件上传的基本思路"></a>文件上传的基本思路</h2><p>思路和SpringMVC的一样。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1.th:action=”@{/upload} 是thymeleaf的服务器渲染技术，相当于将表单提交到”/upload”<br>2.multiple意思为可以提交多个文件</p><h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"#"</span> method<span class="token operator">=</span><span class="token string">"post"</span> th<span class="token operator">:</span>action<span class="token operator">=</span><span class="token string">"@&#123;/upload&#125;"</span> enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span><span class="token operator">></span>   用户名<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> style<span class="token operator">=</span><span class="token string">"width:150px"</span> name<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>   电 邮<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> style<span class="token operator">=</span><span class="token string">"width:150px"</span> name<span class="token operator">=</span><span class="token string">"email"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>   年 龄<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> style<span class="token operator">=</span><span class="token string">"width:150px"</span> name<span class="token operator">=</span><span class="token string">"age"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>   职 位<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> style<span class="token operator">=</span><span class="token string">"width:150px"</span> name<span class="token operator">=</span><span class="token string">"job"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>   头 像<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> style<span class="token operator">=</span><span class="token string">"width:150px"</span> name<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>   宠 物<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> style<span class="token operator">=</span><span class="token string">"width:150px"</span> name<span class="token operator">=</span><span class="token string">"photos"</span> multiple<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"注册"</span><span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"reset"</span> value<span class="token operator">=</span><span class="token string">"重新填写"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><p>1.接收的文件@RequestParam(“header”) MultipartFile header<br>2.String path = ResourceUtils.getURL(“classpath:”).getPath(); 得到classpath的绝对路径<br>3.动态创建指定目录<br>File file = new File(path+”static/images/upload”+”/“+ now.getYear()+”/“+now.getMonthValue()+”/“+now.getDayOfMonth()+”/“);<br>4.判断该目录是否存在，如果不存在则创建file.mkdirs();<br>5.处理文件名，防止上传的文件名相同<br>originalFilename= UUID.randomUUID().toString()+”<em>“+System.currentTimeMillis()+”</em>“+originalFilename;<br>6.将将要上传的文件上传到指定的文件<br>header.transferTo(new File(file.getAbsolutePath()+”/“+originalFilename));<br>header的类型是MultipartFile，所有里面有个方法transferTo可以直接将要上传的header文件放入到指定的目录中</p><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/upload.html"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">uploadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"upload"</span><span class="token punctuation">;</span><span class="token comment">//视图解析 thymeleaf会进行视图解析，转发到templates下的upload.html页面</span><span class="token punctuation">&#125;</span><span class="token comment">//处理用户的的注册请求-包括处理文件上传</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> age<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"job"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> job<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> header<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"photos"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> photos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//输出获取到的信息</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"上传的信息name=&#123;&#125; email=&#123;&#125; age=&#123;&#125; header=&#123;&#125; photos=&#123;&#125;"</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>email<span class="token punctuation">,</span>age<span class="token punctuation">,</span>job<span class="token punctuation">,</span>header<span class="token punctuation">,</span>photos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果信息都成功得到，我们就将文件保存到指定的目录,比如d:\\temp_upload</span>    <span class="token comment">//1.我们先将文件保存到指定的目录,比如d:\\temp_upload</span>    <span class="token comment">//2.后面演示把文件保存到动态创建的目录【有可能不存在】</span>    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">ResourceUtils</span><span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token string">"classpath:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"path=&#123;&#125;"</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//动态创建指定目录</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token constant">FURN_IMG_DIRECTORY</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getYearMonthDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"file=&#123;&#125;"</span><span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果目录不存在，我们就创建,在java io</span>        file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>header<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理头像</span>        <span class="token comment">//获取上传文件的名字</span>        <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        originalFilename<span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>originalFilename<span class="token punctuation">;</span>        <span class="token comment">//这里需要指定保存文件的绝对路径，</span>        <span class="token comment">//header.transferTo(new File("d:\\\\temp_upload\\"+originalFilename));</span>        header<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>originalFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//log.info("保存文件的绝对路径=&#123;&#125;",file.getAbsolutePath());</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理宠物图片</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>photos<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> photo <span class="token operator">:</span> photos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//多了一个遍历处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>photo<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> photo<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//photo.transferTo(new File("d:\\temp_upload\\"+originalFilename));</span>                originalFilename<span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>originalFilename<span class="token punctuation">;</span>                photo<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>originalFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token string">"注册用户成功/文件上传成功"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;javaWeb文件上传 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;文件上传的基本原理&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="主流框架" scheme="https://100qin10086.github.io/categories/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring" scheme="https://100qin10086.github.io/tags/Spring/"/>
    
    <category term="ssm" scheme="https://100qin10086.github.io/tags/ssm/"/>
    
    <category term="框架" scheme="https://100qin10086.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Java" scheme="https://100qin10086.github.io/tags/Java/"/>
    
    <category term="springMVC" scheme="https://100qin10086.github.io/tags/springMVC/"/>
    
    <category term="springBoot" scheme="https://100qin10086.github.io/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>力扣-两数相加</title>
    <link href="https://100qin10086.github.io/posts/b4c98e93.html"/>
    <id>https://100qin10086.github.io/posts/b4c98e93.html</id>
    <published>2023-04-04T13:46:29.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note orange no-icon flat"><p>给你两个非空 的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字请你将两个数相加，并以相同形式返回一个表示和的链表</p></div></h1><h2 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h2><p>1.先将传入的两个链表逆序输出，得到两个正常的数<br>2.将两数相加<br>3.在将两数位数封装到结点中，逆序<br>4.问题1，将两个数的结果已经算出，但是死活完不成第三步<br>5.问题2，如果遇到两个非常长的链表类型会装不下，造成益处</p><h2 id="借鉴思路"><a href="#借鉴思路" class="headerlink" title="借鉴思路"></a>借鉴思路</h2><p>1.直接按照链表的正常顺序相加，以为这两个链表的位数顺序都是逆序的，所以不用考虑位数对齐的情况，只需要考虑进位的情况<br>2.分别取出两个链表中的一个结点，如果某个结点为null，则改直就为空，结点不为空，值为结点的值<br>3.将两个结点的值与进的一位进行相加【这个进的一位是上一次循环两个不为空的结点相加后进的一个数，所以就加到这一次相加中】，如果上一次相加没有进位，则这一次相加的进位就为null<br>4.准备将相加的后的值封装到节点中，并进行链表的链接<br>5.链表的链接需要两个空结点，一个作为结果链表的头节点，不动，另外一个作为可移动的添加结点，始终指向最后一个结点<br>6.添加时，先判断头节点是否为空，如果头结点为空，那么头节点=temp结点=第一次相加的值封装的结点<br>7.如果头节点不为空，则temp.next=new Node(sum%10),因为要进位，所以要%10；<br>8.将两个要相加的结点分别向后移动一位，如果在不为空的情况下<br>9.在循环结束后，判断curry（进位）是否大于0,如果大于0，意味着要比最长的链表还要长一个结点<br>10.所以最后temp.next=new ListNode(curry);<br>11.最后，返回头节点<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 力扣<span class="token punctuation">.</span>day1<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2023/4/3 21:05 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> 两数相加 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> listNode1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> listNode2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> listNode3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> listNode4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> listNode5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> listNode6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> listNode7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listNode1<span class="token punctuation">.</span>next<span class="token operator">=</span>listNode2<span class="token punctuation">;</span>        listNode2<span class="token punctuation">.</span>next<span class="token operator">=</span>listNode3<span class="token punctuation">;</span>        listNode3<span class="token punctuation">.</span>next<span class="token operator">=</span>listNode4<span class="token punctuation">;</span>        listNode4<span class="token punctuation">.</span>next<span class="token operator">=</span>listNode5<span class="token punctuation">;</span>        listNode5<span class="token punctuation">.</span>next<span class="token operator">=</span>listNode6<span class="token punctuation">;</span>        listNode6<span class="token punctuation">.</span>next<span class="token operator">=</span>listNode7<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> listNode8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> listNode9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> listNode10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> listNode11 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listNode8<span class="token punctuation">.</span>next<span class="token operator">=</span>listNode9<span class="token punctuation">;</span>        listNode9<span class="token punctuation">.</span>next<span class="token operator">=</span>listNode10<span class="token punctuation">;</span>        listNode10<span class="token punctuation">.</span>next<span class="token operator">=</span>listNode11<span class="token punctuation">;</span>        <span class="token class-name">Solution</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> listNode <span class="token operator">=</span> solution<span class="token punctuation">.</span><span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>listNode1<span class="token punctuation">,</span> listNode8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> head<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span>temp<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curry<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">||</span>l2<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> n1<span class="token operator">=</span>l1<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span> l1<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n2<span class="token operator">=</span>l2<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span> l2<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sum<span class="token operator">=</span>n1<span class="token operator">+</span>n2<span class="token operator">+</span>curry<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                head<span class="token operator">=</span>temp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                temp<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            curry<span class="token operator">=</span>sum<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l2<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curry<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            temp<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> val<span class="token punctuation">;</span>      <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>      <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>      <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note orange no-icon flat&quot;&gt;&lt;p&gt;给你两个非空 的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一</summary>
      
    
    
    
    <category term="力扣" scheme="https://100qin10086.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="力扣" scheme="https://100qin10086.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>力扣-两数之和</title>
    <link href="https://100qin10086.github.io/posts/db0123ac.html"/>
    <id>https://100qin10086.github.io/posts/db0123ac.html</id>
    <published>2023-04-04T13:26:39.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note orange no-icon flat"><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标</p></div></h1><p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p><h2 id="我的思路两个for循环暴力计算，结果花费48秒"><a href="#我的思路两个for循环暴力计算，结果花费48秒" class="headerlink" title="我的思路两个for循环暴力计算，结果花费48秒"></a>我的思路两个for循环暴力计算，结果花费48秒</h2><h2 id="网上借鉴思路-使用哈希表"><a href="#网上借鉴思路-使用哈希表" class="headerlink" title="网上借鉴思路-使用哈希表"></a>网上借鉴思路-使用哈希表</h2><h3 id="Hash表O-1-的原因"><a href="#Hash表O-1-的原因" class="headerlink" title="Hash表O(1)的原因"></a>Hash表O(1)的原因</h3><p>对数组中的数据进行快速访问必须要通过数组的下标，时间复杂度为 O(1)。如果只知道数据或者数据中的部分内容，想在数组中找到这个数据，还是需要遍历数组，时间复杂度为 O(N)。<br>Hash表的物理存储其实就是一个数组,如果我们根据Key计算出数组下表,那么就可以快速的在数组中查到需要的k-v，我们可以利用hashCode直接解算出下表事实上，(“abc”,“hello”) 这样的 Key、Value 数据并不会直接存储在 Hash 表的数组中，因为数组要求存储固定数据类型，主要目的是每个数组元素中要存放固定长度的数据。所以，数组中存储的是 Key、Value 数据元素的地址指针。一旦发生 Hash 冲突，只需要将相同下标，不同 Key 的数据元素添加到这个链表就可以了。查找的时候再遍历这个链表，匹配正确的 Key。</p><h3 id="使用Hash表计算两数之和的思路"><a href="#使用Hash表计算两数之和的思路" class="headerlink" title="使用Hash表计算两数之和的思路"></a>使用Hash表计算两数之和的思路</h3><p>1.遍历数组<br>2.判断target-当前的数组中的元素在hashMap中是否存在<br>3.我的理解1+2=3，同样3-2=1，所以要找到两个数之和为target，只需要在map中找到target-其中一个的值<br>4.如果找到，因为hashmap中存储的方式为&lt;数,下表&gt;，所以返回map.get(target-nums【i】)以及i;<br>5.如果找不到就将nums【i】以及i存入到hashmap中，继续遍历</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No two sum solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note orange no-icon flat&quot;&gt;&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 targe</summary>
      
    
    
    
    <category term="力扣" scheme="https://100qin10086.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="力扣" scheme="https://100qin10086.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>平衡二叉树</title>
    <link href="https://100qin10086.github.io/posts/4263f441.html"/>
    <id>https://100qin10086.github.io/posts/4263f441.html</id>
    <published>2023-04-01T12:18:29.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>平衡二叉树</p></div></h1><h2 id="案例-二叉树可能存在的问题"><a href="#案例-二叉树可能存在的问题" class="headerlink" title="案例-二叉树可能存在的问题"></a>案例-二叉树可能存在的问题</h2><h3 id="给你一个数列-1-2-3-4-5-6-，要求创建一颗二叉排序树-BST-并分析问题所在"><a href="#给你一个数列-1-2-3-4-5-6-，要求创建一颗二叉排序树-BST-并分析问题所在" class="headerlink" title="给你一个数列{1,2,3,4,5,6}，要求创建一颗二叉排序树(BST), 并分析问题所在."></a>给你一个数列{1,2,3,4,5,6}，要求创建一颗二叉排序树(BST), 并分析问题所在.</h3><p>·左边 BST 存在的问题分析:<br>1.左子树全部为空，从形式上看，更像一个单链表.<br>2。插入速度没有影响<br>3.查询速度明显降低(因为需要依次比较), 不能发挥 BST的优势，因为每次还需要比较左子树，其查询速度比单链表还慢<br>4.解决方案-平衡二叉树</p><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>1.平衡二叉树也叫做二叉搜索树又被称为AVL树，可以保证查询效率较高<br>2.具有一下特点,它是一棵空树或它的左右两个子树的高度查的绝对值不超过1,并且左右两个子树都是一颗平衡二叉树</p><h2 id="左旋转"><a href="#左旋转" class="headerlink" title="左旋转"></a>左旋转</h2><p><a href="https://imgse.com/i/ppWIfPA"><img src="https://s1.ax1x.com/2023/04/01/ppWIfPA.png" alt="ppWIfPA.md.png"></a></p><h3 id="已该图的树为例进行左旋转"><a href="#已该图的树为例进行左旋转" class="headerlink" title="已该图的树为例进行左旋转"></a>已该图的树为例进行左旋转</h3><p>1.创建一个新节点newNode【以该节点的值为新节点的值】<br>2.新节点的左子节点为该节点的左子节点 4.left=3<br>3.新节点的右子结点为该节点的右子节点的左子节点 4.right=5<br>4.该节点的值为该节点的右子节点的值 此时该节点的值为 6<br>5.该节点的左子节点为该节点的左子节点的左子节点 6.right=right<br>6.该节点的右子节点为新的结点 6.right=4</p><h3 id="左旋转后的树"><a href="#左旋转后的树" class="headerlink" title="左旋转后的树"></a>左旋转后的树</h3><p><a href="https://imgse.com/i/ppWo9qU"><img src="https://s1.ax1x.com/2023/04/01/ppWo9qU.png" alt="ppWo9qU.md.png"></a></p><h2 id="右旋转"><a href="#右旋转" class="headerlink" title="右旋转"></a>右旋转</h2><p><a href="https://imgse.com/i/ppWoPZF"><img src="https://s1.ax1x.com/2023/04/01/ppWoPZF.png" alt="ppWoPZF.md.png"></a></p><h3 id="已该图的树为例进行右旋转"><a href="#已该图的树为例进行右旋转" class="headerlink" title="已该图的树为例进行右旋转"></a>已该图的树为例进行右旋转</h3><p>1.创建一个新节点newNode【以该节点的值为新节点的值】<br>2.新节点的右子节点为该节点的右子节点 10.right=12<br>3.新节点的左子节点为该节点的左子节点的右子节点 10.left=9<br>4.该节点的值为该节点的左子结点的值10-&gt;8;<br>5.该节点的左子节点为该节点的左子节点的左子节点 10.left=7；<br>6.该节点的左子节点为新的结点 8.left=10</p><h2 id="什么时候进行旋转操作"><a href="#什么时候进行旋转操作" class="headerlink" title="什么时候进行旋转操作"></a>什么时候进行旋转操作</h2><h3 id="每添加一个节点时-如果左子结点的高度-右子节点的高度-gt-1-向右旋转"><a href="#每添加一个节点时-如果左子结点的高度-右子节点的高度-gt-1-向右旋转" class="headerlink" title="每添加一个节点时,如果左子结点的高度-右子节点的高度&gt;1,向右旋转"></a>每添加一个节点时,如果左子结点的高度-右子节点的高度&gt;1,向右旋转</h3><h3 id="每添加一个节点时-如果右子结点的高度-左子节点的高度-gt-1-向左旋转"><a href="#每添加一个节点时-如果右子结点的高度-左子节点的高度-gt-1-向左旋转" class="headerlink" title="每添加一个节点时,如果右子结点的高度-左子节点的高度&gt;1,向左旋转"></a>每添加一个节点时,如果右子结点的高度-左子节点的高度&gt;1,向左旋转</h3><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 数据结构与算法二<span class="token punctuation">.</span>二叉平衡树<span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2023/4/1 20:50 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> no1 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个AVL树</span>        <span class="token class-name">AVLTree</span> avlTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AVLTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            avlTree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//遍历</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中序遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        avlTree<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建AVLTree</span><span class="token keyword">class</span> <span class="token class-name">AVLTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>    <span class="token comment">//编写方法，删除节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.先得到要删除的节点</span>            <span class="token class-name">Node</span> target <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果我们发现当前的这颗二叉树只有一个节点时</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//2.找到要删除节点的父节点，因为树没有自我删除的能力，只要链表有自我删除的能力</span>            <span class="token class-name">Node</span> parent <span class="token operator">=</span> <span class="token function">searchNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//要删除节点的三种情况</span>            <span class="token comment">//（1）如果要删除的节点是叶子节点，无子节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//判断要删除的节点是它父节点的左子节点还是右子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>right<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//(2)如果要删除的节点有两颗子树</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//找出当前节点右子树的最小值，并删除</span>                <span class="token keyword">int</span> minVal <span class="token operator">=</span> <span class="token function">delLeftTreeMin</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                target<span class="token punctuation">.</span>value <span class="token operator">=</span> minVal<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//要删除的节点只要一颗子树</span>                <span class="token comment">//如果要删除的节点有左子树</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//判断要删除的节点是它父节点的左子节点还是右子节点</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果targetNode是parent的左子节点</span>                            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> target<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> target<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        root <span class="token operator">=</span> target<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">//如果要删除的节点有左子树</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果targetNode是parent的左子节点</span>                            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> target<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> target<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        root <span class="token operator">=</span> target<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写方法</span>    <span class="token comment">//1.返回的以node为根节点的二叉排序树的最小节点的值</span>    <span class="token comment">//2.删除node为根节点的二叉排序树的最小节点</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delLeftTreeMin</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> temp <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//这是temp的值就是最小的值</span>        <span class="token comment">//删除最小的值</span>        <span class="token function">delNode</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> temp<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找要删除节点的父节点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">searchNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找要删除的节点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//向平衡二叉树中添加节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回左子树的高度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回右子树的高度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> right<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回以该节点为根节点的树的高度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> left<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> right<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//左旋转的方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建新的结点，以当前根节点的值</span>        <span class="token class-name">Node</span> newnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把新的结点的左子树设置为当前结点的左子树</span>        newnode<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment">//把新的结点的右子树设置为当前结点的</span>        newnode<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment">//当前结点的值为当前结点的右子节点的值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//右旋转</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建新的结点,以当前结点的值</span>        <span class="token class-name">Node</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把新结点的左子树设置当前结点的左子树</span>        newNode<span class="token punctuation">.</span>right<span class="token operator">=</span>right<span class="token punctuation">;</span>        <span class="token comment">//把新结点的右子树设置成当前节点的右子树的左子树</span>        newNode<span class="token punctuation">.</span>right<span class="token operator">=</span>right<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment">//把当前节点的值替换成右子节点的值</span>        value<span class="token operator">=</span>right<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token comment">//当前节点的右子结点设置成当前结点右子结点的右子结点</span>        right<span class="token operator">=</span>right<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token comment">//当前结点的右子节点指向新的结点</span>        left<span class="token operator">=</span>newNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找要删除的结点</span>    <span class="token comment">/**     * @param val 希望删除的节点的值     * @return 如果找到返回该节点，否则返沪null     */</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//找到就是该节点</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果查找的值小于当前的结点，向左子树递归查找</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果查找的值不小于当前的结点，向右子树递归查找</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找要删除结点的父节点</span>    <span class="token comment">/**     * @param val 要找到的节点的值     * @return 返回的是要删除的结点的父节点，如果没有就返回null     */</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">searchParent</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果当前节点就是要删除结点的父节点，就返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果查找的值小于当前节点的值，并且当前节点的左子节点不为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相右子树递归查找</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 添加节点的方法</span>    <span class="token comment">// 递归的形式添加节点，注意需要满足二叉排序树的要求</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 判断传入的结点的值，和当前子树的根节点的关系</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果当前结点左子树节点为null</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 递归的向左子树添加</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 添加的结点的值大于当前结点的值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 递归的向右子树添加</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//当添加完一个节点后,如果(右子树的高度-左子树的高度)>1,左旋转</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果它的右子树的左子树高度大于右子树的左子树高度，先将右子树右旋转</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>right<span class="token punctuation">.</span><span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>right<span class="token punctuation">.</span><span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                right<span class="token punctuation">.</span><span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左旋转</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//必须要</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果它的左子树的右子树高度大于左子树的左子树高度，先左旋转，在右旋转</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>left<span class="token punctuation">.</span><span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>left<span class="token punctuation">.</span><span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                left<span class="token punctuation">.</span><span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左旋转</span>                <span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右旋转</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右旋转</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Node&#123;"</span> <span class="token operator">+</span>                <span class="token string">"value="</span> <span class="token operator">+</span> value <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;平衡二叉树&lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;案例-二叉树可能存在的问题&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉排序树</title>
    <link href="https://100qin10086.github.io/posts/e5052ecb.html"/>
    <id>https://100qin10086.github.io/posts/e5052ecb.html</id>
    <published>2023-03-31T10:51:54.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>二叉排序树</p></div></h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>给你一个数列 (7, 3, 10, 12, 5, 1, 9)，要求能够高效的完成对数据的查询和添加</p><h2 id="解决方案分析"><a href="#解决方案分析" class="headerlink" title="解决方案分析"></a>解决方案分析</h2><p>· 使用数组<br>数组未排序， 优点：直接在数组尾添加，速度快。 缺点：查找速度慢.<br>数组排序，优点：可以使用二分查找，查找速度快，缺点：为了保证数组有序，在添加新数据时，找到插入位置后，后面的数据需整体移动，速度慢。<br>· 使用链式存储-链表<br>不管链表是否有序，查找速度都慢，添加数据速度比数组快，不需要数据整体移动。<br>· 使用二叉排序</p><h2 id="二叉排序树介绍"><a href="#二叉排序树介绍" class="headerlink" title="二叉排序树介绍"></a>二叉排序树介绍</h2><p>1.二叉排序树：BST: (Binary Sort(Search) Tree), 对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大<br>2.对数据 (7, 3, 10, 12, 5, 1, 9) ，对应的二叉排序树为：<br><a href="https://imgse.com/i/ppR2DbR"><img src="https://s1.ax1x.com/2023/03/31/ppR2DbR.png" alt="ppR2DbR.md.png"></a></p><h1 id="-1"><a href="#-1" class="headerlink" title></a><div class="note purple no-icon flat"><p>二叉排序树创建和遍历</p></div></h1><h2 id="这里以数组Array-7-3-10-12-5-1-9-为例"><a href="#这里以数组Array-7-3-10-12-5-1-9-为例" class="headerlink" title="这里以数组Array(7, 3, 10, 12, 5, 1, 9)为例"></a>这里以数组Array(7, 3, 10, 12, 5, 1, 9)为例</h2><p>1.确定根节点 7<br>2.遍历剩下数据 3 将其封装到Node中,将其和根节点7比较,比7小,并且7的left为空，所以【7】.left=3<br>3.遍历接下来的数据 10 将其封装到Node中,将其和根节点7比较,比7打,并且7的right为空,所以【7】.right=10<br>4.遍历接下来的数据 12<br>将其封装到Node中,将其和根节点7比较,比7打,此时7的right不为空,此时以根节点的right为根节点,继续比较，此时的根节点为10,12比10,并且10的right为空，所以【10】.right=12<br>5.剩下的继续按照以上的方式遍历</p><h2 id="代码演示再后面"><a href="#代码演示再后面" class="headerlink" title="代码演示再后面"></a>代码演示再后面</h2><h1 id="-2"><a href="#-2" class="headerlink" title></a><div class="note purple no-icon flat"><p>二叉排序树的删除</p></div></h1><h2 id="二叉树的删除思路-删除的情况比较复杂，有三种情况需要考虑"><a href="#二叉树的删除思路-删除的情况比较复杂，有三种情况需要考虑" class="headerlink" title="二叉树的删除思路,删除的情况比较复杂，有三种情况需要考虑"></a>二叉树的删除思路,删除的情况比较复杂，有三种情况需要考虑</h2><p>1.删除叶子节点 (比如：2, 5, 9, 12)<br>2.删除只有一颗子树的节点 (比如：1)<br>3.删除有两颗子树的节点. (比如：7, 3，10 )</p><h2 id="操作的思路分析"><a href="#操作的思路分析" class="headerlink" title="操作的思路分析"></a>操作的思路分析</h2><h3 id="第一种情况：删除叶子节点"><a href="#第一种情况：删除叶子节点" class="headerlink" title="第一种情况：删除叶子节点"></a>第一种情况：删除叶子节点</h3><p>(1) 需求先去找到要删除的结点 targetNode<br>(2) 找到 targetNode 的 父结点 parent<br>(3) 确定 targetNode 是 parent 的左子结点 还是右子结点<br>(4) 根据前面的情况来对应删除<br>左子结点 parent.left = null<br>右子结点 parent.right = null</p><h3 id="第二种情况：删除只有一棵子树的节点"><a href="#第二种情况：删除只有一棵子树的节点" class="headerlink" title="第二种情况：删除只有一棵子树的节点"></a>第二种情况：删除只有一棵子树的节点</h3><p>(1) 需求先去找到要删除的结点 targetNode<br>(2) 找到 targetNode 的 父结点 parent<br>(3) 确定 targetNode 的子结点是左子结点还是右子结点<br>(4) targetNode 是 parent 的左子结点还是右子结点<br>(5) 如果 targetNode 有左子结点<br>5.1如果 targetNode 是 parent 的左子结点<br>parent.left = targetNode.left;<br>5.2 如果 targetNode 是 parent 的右子结点<br>parent.right = targetNode.left;<br>(6) 如果 targetNode 有右子结点<br>6.1 如果 targetNode 是 parent 的左子结点<br>parent.left = targetNode.right;<br>6.2 如果 targetNode 是 parent 的右子结点<br>parent.right = targetNode.right</p><h3 id="第三种情况：删除有两棵子树的节点"><a href="#第三种情况：删除有两棵子树的节点" class="headerlink" title="第三种情况：删除有两棵子树的节点"></a>第三种情况：删除有两棵子树的节点</h3><p>(1) 需求先去找到要删除的结点 targetNode<br>(2) 找到 targetNode 的 父结点 parent<br>(3) 从 targetNode 的右子树找到最小的结点<br>(4) 用一个临时变量，将 最小结点的值保存 temp = 11<br>(5) 删除该最小结点<br>(6) targetNode.value = temp</p><h1 id="-3"><a href="#-3" class="headerlink" title></a><div class="note purple no-icon flat"><p>二叉排序树创建和遍历以及删除的代码实现</p></div></h1><h2 id="代码分析已经在代码中实现"><a href="#代码分析已经在代码中实现" class="headerlink" title="代码分析已经在代码中实现"></a>代码分析已经在代码中实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 数据结构与算法二<span class="token punctuation">.</span>二叉排序树<span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2023/3/31 18:01 * @Version 1.0 * 我亦无他，惟手熟尔 * 二叉排序树 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> no1 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建一个二叉树</span><span class="token keyword">class</span> <span class="token class-name">BinarySortTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BinarySortTree</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写方法，删除节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.先得到要删除的节点</span>            <span class="token class-name">Node</span> target <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果我们发现当前的这颗二叉树只有一个节点时</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//2.找到要删除节点的父节点，因为树没有自我删除的能力，只要链表有自我删除的能力</span>            <span class="token class-name">Node</span> parent <span class="token operator">=</span> <span class="token function">searchNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//要删除节点的三种情况</span>            <span class="token comment">//（1）如果要删除的节点是叶子节点，无子节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//判断要删除的节点是它父节点的左子节点还是右子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//(2)如果要删除的节点有两颗子树</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//找出当前节点右子树的最小值，并删除</span>                <span class="token keyword">int</span> minVal <span class="token operator">=</span> <span class="token function">delLeftTreeMin</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                target<span class="token punctuation">.</span>val <span class="token operator">=</span> minVal<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//要删除的节点只要一颗子树</span>                <span class="token comment">//如果要删除的节点有左子树</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//判断要删除的节点是它父节点的左子节点还是右子节点</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果targetNode是parent的左子节点</span>                            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> target<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> target<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        root <span class="token operator">=</span> target<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">//如果要删除的节点有左子树</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果targetNode是parent的左子节点</span>                            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> target<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> target<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        root <span class="token operator">=</span> target<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写方法</span>    <span class="token comment">//1.返回的以node为根节点的二叉排序树的最小节点的值</span>    <span class="token comment">//2.删除node为根节点的二叉排序树的最小节点</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delLeftTreeMin</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> temp <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//这是temp的值就是最小的值</span>        <span class="token comment">//删除最小的值</span>        <span class="token function">delNode</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> temp<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找要删除节点的父节点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">searchNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找要删除的节点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//向平衡二叉树中添加节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeft</span><span class="token punctuation">(</span><span class="token class-name">Node</span> left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRight</span><span class="token punctuation">(</span><span class="token class-name">Node</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找要删除的节点的父节点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">searchParent</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果当前节点就是要查找节点的父节点就返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果要查找的值小于当前节点值,并且当前节点的左子节点的值不为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找要删除的节点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果要删除的节点为头节点</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加节点的方法</span>    <span class="token comment">//递归的方式添加节点，注意要满足二叉排序树的要求</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Node&#123;"</span> <span class="token operator">+</span>                <span class="token string">"val="</span> <span class="token operator">+</span> val <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;二叉排序树&lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; clas</summary>
      
    
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Spring-声明式事务</title>
    <link href="https://100qin10086.github.io/posts/e2210717.html"/>
    <id>https://100qin10086.github.io/posts/e2210717.html</id>
    <published>2023-03-30T10:51:05.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>声明式事务 </p></div></h1><h2 id="事务的分类"><a href="#事务的分类" class="headerlink" title="事务的分类"></a>事务的分类</h2><p>1.编程式事务【将一整个流程写在同一个程序中】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1. 先设置事务不要自动提交</span>      connection<span class="token punctuation">.</span><span class="token function">setAutoCommint</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2. 进行各种 crud</span>    <span class="token comment">//多个表的修改，添加 ，删除</span>    <span class="token comment">//3. 提交</span>      connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//4. 回滚</span>      conection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.声明式事务</p><h2 id="声明式事务-使用实例"><a href="#声明式事务-使用实例" class="headerlink" title="声明式事务-使用实例"></a>声明式事务-使用实例</h2><h3 id="我们需要去处理用户购买商品的业务逻辑-分析-当一个用户要去购买商品应该包含三个步骤"><a href="#我们需要去处理用户购买商品的业务逻辑-分析-当一个用户要去购买商品应该包含三个步骤" class="headerlink" title="我们需要去处理用户购买商品的业务逻辑:分析: 当一个用户要去购买商品应该包含三个步骤"></a>我们需要去处理用户购买商品的业务逻辑:分析: 当一个用户要去购买商品应该包含三个步骤</h3><p>1.通过id获取价格。<br>2.购买商品(某人购买商品,修改用户的余额)<br>3.修改库存量</p><h3 id="解决方案分析"><a href="#解决方案分析" class="headerlink" title="解决方案分析"></a>解决方案分析</h3><p>1.使用传统的编程式事务来处理，将代码写到一起【缺点：代码冗余,效率低,不利于扩展，有点是简单,好理解】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">//1. 先设置事务不要自动提交</span>     connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 进行各种 crud</span><span class="token comment">//多个表的修改，添加 ，删除</span>     elect from 商品表 <span class="token operator">=</span><span class="token operator">></span> 获取价格修改用户余额 update <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 修改库存量 update<span class="token comment">//3. 提交</span>     connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//4. 回滚</span>     conection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.使用声明式事务处理，可以将上面的三个子步骤分别写成一个方法,然后统一管理【这个是Spring很牛的地方,再开发使用的很多,优点是无代码冗余,扩展方便,缺点是理解比较困难】,底层是AOP【动态代理+动态绑定+反射+注解】<br>3.声明式事务处理-代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qgq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>tx<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JdbcTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2023/3/30 15:08 * @Version 1.0 */</span><span class="token annotation punctuation">@Repository</span><span class="token comment">//将GoodDao注入到spring容器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment">/**     * 根据商品id返回对应的价格     * @param id     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Float</span> <span class="token function">queryPriceById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT price From goods Where goods_id=?"</span><span class="token punctuation">;</span>        <span class="token comment">//返回单行单列对象</span>        <span class="token class-name">Float</span> price <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 修改用户的余额[减少用户的余额]     * @param user_id     * @param money     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBalance</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> user_id<span class="token punctuation">,</span> <span class="token class-name">Float</span> money<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"UPDATE user_account SET money=money-? Where user_id=?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> money<span class="token punctuation">,</span> user_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 修改商品库存     * @param goods_id     * @param amount     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAmount</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> goods_id<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"UPDATE goods_amount SET goods_num=goods_num-? Where goods_id=?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> amount <span class="token punctuation">,</span> goods_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.需要在.xml文件中配置事务管理器<br>5.增加声明式注解,此时三个子方法如果有一个方法报错，它们的数据就会具有一致性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyGoodsByTx</span><span class="token punctuation">(</span><span class="token keyword">int</span> user_id<span class="token punctuation">,</span> <span class="token keyword">int</span> goods_id<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//查询到商品价格</span><span class="token class-name">Float</span> goods_price <span class="token operator">=</span> goodsDao<span class="token punctuation">.</span><span class="token function">queryPriceById</span><span class="token punctuation">(</span>goods_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//购买商品，减去余额</span>goodsDao<span class="token punctuation">.</span><span class="token function">updateBalance</span><span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> goods_price <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// //老韩: 模拟一个异常, 会发生数据库数据不一致现象</span><span class="token comment">// int i = 10 / 0;</span><span class="token comment">//更新库存</span>goodsDao<span class="token punctuation">.</span><span class="token function">updateAmount</span><span class="token punctuation">(</span>goods_id<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="-1"><a href="#-1" class="headerlink" title></a><div class="note purple no-icon flat"><p>声明式事务机制 </p></div></h1><h2 id="1-事务的传播机制"><a href="#1-事务的传播机制" class="headerlink" title="1.事务的传播机制"></a>1.事务的传播机制</h2><h3 id="用户控制多个事务并存时"><a href="#用户控制多个事务并存时" class="headerlink" title="用户控制多个事务并存时"></a>用户控制多个事务并存时</h3><h3 id="事务传播的属性种类"><a href="#事务传播的属性种类" class="headerlink" title="事务传播的属性种类"></a>事务传播的属性种类</h3><p><a href="https://imgse.com/i/pp2afQf"><img src="https://s1.ax1x.com/2023/03/30/pp2afQf.png" alt="pp2afQf.md.png"></a></p><h3 id="REQUIRED说明：如果一个事务中包含两个事务【1，2】此时这两个事务是绑定在一起的有任何一个事务报错这两个事务都不会执行"><a href="#REQUIRED说明：如果一个事务中包含两个事务【1，2】此时这两个事务是绑定在一起的有任何一个事务报错这两个事务都不会执行" class="headerlink" title="REQUIRED说明：如果一个事务中包含两个事务【1，2】此时这两个事务是绑定在一起的有任何一个事务报错这两个事务都不会执行"></a>REQUIRED说明：如果一个事务中包含两个事务【1，2】此时这两个事务是绑定在一起的有任何一个事务报错这两个事务都不会执行</h3><h3 id="REQUIRED-NEW-如果一个事务中包含两个事务【1，2】此时这两个事务是相互独立的，如果有一个报错不会影响另外一个"><a href="#REQUIRED-NEW-如果一个事务中包含两个事务【1，2】此时这两个事务是相互独立的，如果有一个报错不会影响另外一个" class="headerlink" title="REQUIRED_NEW 如果一个事务中包含两个事务【1，2】此时这两个事务是相互独立的，如果有一个报错不会影响另外一个"></a>REQUIRED_NEW 如果一个事务中包含两个事务【1，2】此时这两个事务是相互独立的，如果有一个报错不会影响另外一个</h3><h2 id="2-事务的隔离级别"><a href="#2-事务的隔离级别" class="headerlink" title="2.事务的隔离级别"></a>2.事务的隔离级别</h2><p><a href="https://imgse.com/i/pp2dSw4"><img src="https://s1.ax1x.com/2023/03/30/pp2dSw4.md.png" alt="pp2dSw4.md.png"></a></p><h2 id="3-事务的超时回滚"><a href="#3-事务的超时回滚" class="headerlink" title="3.事务的超时回滚"></a>3.事务的超时回滚</h2><p>timeout=xx</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;声明式事务 &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;事务的分类&quot;&gt;&lt;a href=&quot;#事务的分</summary>
      
    
    
    
    <category term="主流框架" scheme="https://100qin10086.github.io/categories/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring" scheme="https://100qin10086.github.io/tags/Spring/"/>
    
    <category term="ssm" scheme="https://100qin10086.github.io/tags/ssm/"/>
    
    <category term="框架" scheme="https://100qin10086.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Java" scheme="https://100qin10086.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring-JdbcTemplate</title>
    <link href="https://100qin10086.github.io/posts/8950f30e.html"/>
    <id>https://100qin10086.github.io/posts/8950f30e.html</id>
    <published>2023-03-30T03:15:04.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>JdbcTemplate </p></div></h1><h2 id="1-需求-如果希望用spring框架来做项目-spring框架如何处理对数据库的操作"><a href="#1-需求-如果希望用spring框架来做项目-spring框架如何处理对数据库的操作" class="headerlink" title="1.需求 如果希望用spring框架来做项目,spring框架如何处理对数据库的操作"></a>1.需求 如果希望用spring框架来做项目,spring框架如何处理对数据库的操作</h2><h3 id="方案一-使用JDBC加德鲁伊数据库连接池"><a href="#方案一-使用JDBC加德鲁伊数据库连接池" class="headerlink" title="方案一 使用JDBC加德鲁伊数据库连接池"></a>方案一 使用JDBC加德鲁伊数据库连接池</h3><h3 id="方案二-使用spring提供的操作数据库功能强大的类JdbcTemplate。我们可以同ioc容器来配置一个jdbcTemplate对象-使用它来完成对数据库表的各种操作"><a href="#方案二-使用spring提供的操作数据库功能强大的类JdbcTemplate。我们可以同ioc容器来配置一个jdbcTemplate对象-使用它来完成对数据库表的各种操作" class="headerlink" title="方案二 使用spring提供的操作数据库功能强大的类JdbcTemplate。我们可以同ioc容器来配置一个jdbcTemplate对象,使用它来完成对数据库表的各种操作"></a>方案二 使用spring提供的操作数据库功能强大的类JdbcTemplate。我们可以同ioc容器来配置一个jdbcTemplate对象,使用它来完成对数据库表的各种操作</h3><h2 id="2-官方文档"><a href="#2-官方文档" class="headerlink" title="2.官方文档"></a>2.官方文档</h2><p>JdbcTemplate APIs : <a href="/spring-framework-5.3.8/docs/javadoc-api/index.html">Markdown语法</a>。</p><h2 id="2-JdbcTemplate-基本介绍"><a href="#2-JdbcTemplate-基本介绍" class="headerlink" title="2.JdbcTemplate-基本介绍"></a>2.JdbcTemplate-基本介绍</h2><h3 id="1-通过-Spring-可以配置数据源【德鲁伊-c3p0】，从而完成对数据表的操作"><a href="#1-通过-Spring-可以配置数据源【德鲁伊-c3p0】，从而完成对数据表的操作" class="headerlink" title="1.通过 Spring 可以配置数据源【德鲁伊,c3p0】，从而完成对数据表的操作"></a>1.通过 Spring 可以配置数据源【德鲁伊,c3p0】，从而完成对数据表的操作</h3><h3 id="2-JdbcTemplate-是-Spring-提供的访问数据库的技术。可以将-JDBC-的常用操作封装为模板方法。【dbcTemplate-类图】"><a href="#2-JdbcTemplate-是-Spring-提供的访问数据库的技术。可以将-JDBC-的常用操作封装为模板方法。【dbcTemplate-类图】" class="headerlink" title="2.JdbcTemplate 是 Spring 提供的访问数据库的技术。可以将 JDBC 的常用操作封装为模板方法。【dbcTemplate 类图】"></a>2.JdbcTemplate 是 Spring 提供的访问数据库的技术。可以将 JDBC 的常用操作封装为模板方法。【dbcTemplate 类图】</h3><p><a href="https://imgse.com/i/ppgOtaD"><img src="https://s1.ax1x.com/2023/03/30/ppgOtaD.md.png" alt="ppgOtaD.md.png"></a></p><h2 id="3-JdbcTemplate代码演示"><a href="#3-JdbcTemplate代码演示" class="headerlink" title="3.JdbcTemplate代码演示"></a>3.JdbcTemplate代码演示</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="1-创建配置文件-src-jdbc-properties"><a href="#1-创建配置文件-src-jdbc-properties" class="headerlink" title="1.创建配置文件 src/jdbc.properties"></a>1.创建配置文件 src/jdbc.properties</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">jdbc.userName</span><span class="token punctuation">=</span><span class="token value attr-value">xxxx</span><span class="token key attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token value attr-value">xxxx</span><span class="token key attr-name">jdbc.driverClass</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span><span class="token key attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/spring</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-创建配置文件src-JdbcTemplate-ioc-xml"><a href="#2-创建配置文件src-JdbcTemplate-ioc-xml" class="headerlink" title="2.创建配置文件src/JdbcTemplate_ioc.xml"></a>2.创建配置文件src/JdbcTemplate_ioc.xml</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">&lt;!--</span> <span class="token value attr-value">引入外部属性文件 --></span><span class="token key attr-name">&lt;context</span><span class="token punctuation">:</span><span class="token value attr-value">property-placeholder location="classpath:jdbc.properties"/></span><span class="token key attr-name">&lt;!--</span> <span class="token value attr-value">配置数据源 --></span><span class="token key attr-name">&lt;bean</span> <span class="token value attr-value">id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"></span><span class="token key attr-name">&lt;property</span> <span class="token value attr-value">name="user" value="$&#123;jdbc.userName&#125;">&lt;/property></span><span class="token key attr-name">&lt;property</span> <span class="token value attr-value">name="password" value="$&#123;jdbc.password&#125;">&lt;/property></span><span class="token key attr-name">&lt;property</span> <span class="token value attr-value">name="driverClass" value="$&#123;jdbc.driverClass&#125;">&lt;/property></span><span class="token key attr-name">&lt;property</span> <span class="token value attr-value">name="jdbcUrl" value="$&#123;jdbc.url&#125;">&lt;/property></span>&lt;/bean><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用JdbcTemplateTest向数据库中添加单行数据"><a href="#使用JdbcTemplateTest向数据库中添加单行数据" class="headerlink" title="使用JdbcTemplateTest向数据库中添加单行数据"></a>使用JdbcTemplateTest向数据库中添加单行数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDataByJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"JdbcTemplate_ioc.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取jdbcTemplate对象</span>    <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1.添加方式1 可能存在sql注入的问题</span>    <span class="token class-name">String</span> sqls<span class="token operator">=</span><span class="token string">"INSERT INTO monster VALUES (400,'红孩儿','枪法')"</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqls<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.添加方式二,防止sql注入</span>    <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"INSERT INTO monster VALUES (?,?,?)"</span><span class="token punctuation">;</span>    <span class="token comment">//affected,该sql语句执行后，数据库受影响的行数</span>    <span class="token keyword">int</span> affected <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token string">"七十二变"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>affected<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用JdbcTemplateTest向数据库中数据进行修改"><a href="#使用JdbcTemplateTest向数据库中数据进行修改" class="headerlink" title="使用JdbcTemplateTest向数据库中数据进行修改"></a>使用JdbcTemplateTest向数据库中数据进行修改</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateDataByJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"JdbcTemplate_ioc.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取jdbcTemplate对象</span>    <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//组织SQL</span>    <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"UPDATE monster SET `kill`=? WHERE id=?"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> affected <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">"美女计"</span><span class="token punctuation">,</span> <span class="token string">"300"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>affected<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用JdbcTemplate对象向数据库中批量添加数据"><a href="#使用JdbcTemplate对象向数据库中批量添加数据" class="headerlink" title="使用JdbcTemplate对象向数据库中批量添加数据"></a>使用JdbcTemplate对象向数据库中批量添加数据</h3><h4 id="说明：再调API时，无法确定是哪一个方法，可以按照如下步骤进行选择【1】先确定名字【2】根据API提供相应的参数【3】把自己的调用思路清晰"><a href="#说明：再调API时，无法确定是哪一个方法，可以按照如下步骤进行选择【1】先确定名字【2】根据API提供相应的参数【3】把自己的调用思路清晰" class="headerlink" title="说明：再调API时，无法确定是哪一个方法，可以按照如下步骤进行选择【1】先确定名字【2】根据API提供相应的参数【3】把自己的调用思路清晰"></a>说明：再调API时，无法确定是哪一个方法，可以按照如下步骤进行选择【1】先确定名字【2】根据API提供相应的参数【3】把自己的调用思路清晰</h4><h4 id="以批量添加的方法为例，先确定方法名字，但是类中重写的方法太多了，此时我们再根据我们要实现的功能，以及能提供参数来确定方法"><a href="#以批量添加的方法为例，先确定方法名字，但是类中重写的方法太多了，此时我们再根据我们要实现的功能，以及能提供参数来确定方法" class="headerlink" title="以批量添加的方法为例，先确定方法名字，但是类中重写的方法太多了，此时我们再根据我们要实现的功能，以及能提供参数来确定方法"></a>以批量添加的方法为例，先确定方法名字，但是类中重写的方法太多了，此时我们再根据我们要实现的功能，以及能提供参数来确定方法</h4><h4 id="这是本次使用批量添加的方法的源码，我们可以发现它需要两个参数，一个是sql语句，而另外一个参数是List，此时我们就明白了，可以将要批处理的多条数据封装到list集合中"><a href="#这是本次使用批量添加的方法的源码，我们可以发现它需要两个参数，一个是sql语句，而另外一个参数是List，此时我们就明白了，可以将要批处理的多条数据封装到list集合中" class="headerlink" title="这是本次使用批量添加的方法的源码，我们可以发现它需要两个参数，一个是sql语句，而另外一个参数是List，此时我们就明白了，可以将要批处理的多条数据封装到list集合中"></a>这是本次使用批量添加的方法的源码，我们可以发现它需要两个参数，一个是sql语句，而另外一个参数是List，此时我们就明白了，可以将要批处理的多条数据封装到list集合中</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">batchUpdate</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> batchArgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">batchUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> batchArgs<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用JdbcTemplate对象向数据库中批量添加数据-1"><a href="#使用JdbcTemplate对象向数据库中批量添加数据-1" class="headerlink" title="使用JdbcTemplate对象向数据库中批量添加数据"></a>使用JdbcTemplate对象向数据库中批量添加数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBatchDataByJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"JdbcTemplate_ioc.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取jdbcTemplate对象</span>    <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1.先确定。猜测API名称</span>    <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"INSERT INTO monster VALUES (?,?,?)"</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span>batchArgs<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token string">"老鼠精"</span><span class="token punctuation">,</span><span class="token string">"偷吃粮食"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token string">"老猫精"</span><span class="token punctuation">,</span><span class="token string">"抓老鼠"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">batchUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> batchArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> anInt <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询单行数据，并将其封装到对象中【再实际开发中非常重要】"><a href="#查询单行数据，并将其封装到对象中【再实际开发中非常重要】" class="headerlink" title="查询单行数据，并将其封装到对象中【再实际开发中非常重要】"></a>查询单行数据，并将其封装到对象中【再实际开发中非常重要】</h3><h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><p>1.先确定方法名queryForObject<br>2.我们可以看到里面有个参数叫做RowMapper行处理器，和我们需要返回的一行数据将其封装到对象相对应<br>3.然后将我们需要封装的对象传入RowMapper方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectDataByJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"JdbcTemplate_ioc.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取jdbcTemplate对象</span>    <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1.确定API的名字</span>    <span class="token comment">//猜测为public &lt;T> T queryForObject(String sql, RowMapper&lt;T> rowMapper) throws DataAccessException</span>    <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"SELECT id AS monsterId,`name`,`kill` from monster WHERE id=100"</span><span class="token punctuation">;</span>    <span class="token comment">//使用RowMapper 接口来对返回的数据，进行一个封装->底层使用的反射->setter</span>    <span class="token comment">//这里有一个细节；你查询的记录的表的字段需要和Monster的对象字段名保持一至</span>    <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span> monsterBeanPropertyRowMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Monster</span> monster <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> monsterBeanPropertyRowMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>monster<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询多行行数据，并将其封装到对象中【再实际开发中非常重要】"><a href="#查询多行行数据，并将其封装到对象中【再实际开发中非常重要】" class="headerlink" title="查询多行行数据，并将其封装到对象中【再实际开发中非常重要】"></a>查询多行行数据，并将其封装到对象中【再实际开发中非常重要】</h3><h4 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h4><p>1.看到是返回的是多行数据,所以先确定方法名,再看返回的对象 如：list,map,set之类的<br>2.再更具确定的方法名传入其需要的参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectMulDataByJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"JdbcTemplate_ioc.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取jdbcTemplate对象</span>    <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"SELECT id AS monsterId,`name`,`kill` from monster WHERE id>?"</span><span class="token punctuation">;</span>    <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span> monsterBeanPropertyRowMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Monster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Monster</span><span class="token punctuation">></span></span> query <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> monsterBeanPropertyRowMapper<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Monster</span> monster <span class="token operator">:</span> query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>monster<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询返回的结果只要一行一列"><a href="#查询返回的结果只要一行一列" class="headerlink" title="查询返回的结果只要一行一列"></a>查询返回的结果只要一行一列</h3><h4 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a>代码分析</h4><p>1.因为是查询语句,所以先确定方法名<br>2.返回的是单行单列,所以方法返回值是Object<br>3.最后根据确定的方法传入需要的参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectScalarByJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"JdbcTemplate_ioc.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取jdbcTemplate对象</span>    <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"SELECT `name` from monster WHERE id=?"</span><span class="token punctuation">;</span>    <span class="token comment">//第二个参数表示返回单行单列的类型是什么</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Map传入具名参数完成操作【我认为是对预处理的一种改进，将预处理中的-改为-字段名】"><a href="#使用Map传入具名参数完成操作【我认为是对预处理的一种改进，将预处理中的-改为-字段名】" class="headerlink" title="使用Map传入具名参数完成操作【我认为是对预处理的一种改进，将预处理中的?改为:字段名】"></a>使用Map传入具名参数完成操作【我认为是对预处理的一种改进，将预处理中的?改为:字段名】</h3><h4 id="代码分析-3"><a href="#代码分析-3" class="headerlink" title="代码分析"></a>代码分析</h4><p>1.其实就是将预处理中的?改为:参数名<br>2.并将需要到的参数封装到Map中<br>3.最后将Map传入方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDataByNameParameterJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"JdbcTemplate_ioc.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">NamedParameterJdbcTemplate</span> namedParameterJdbcTemplate <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">NamedParameterJdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//确定API</span>    <span class="token comment">//准备参数[:my_id, :name, :`kill`] 要求按照规定的名字来设置参数</span>    <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"INSERT INTO monster VALUES(:id, :name, :kill)"</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span>paramMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paramMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paramMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"蚂蚁精"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paramMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kill"</span><span class="token punctuation">,</span><span class="token string">"吃大米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> update <span class="token operator">=</span> namedParameterJdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> paramMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用sqlparametersoruce-来封装具名参数。"><a href="#使用sqlparametersoruce-来封装具名参数。" class="headerlink" title="使用sqlparametersoruce 来封装具名参数。"></a>使用sqlparametersoruce 来封装具名参数。</h3><h4 id="代码分析-4"><a href="#代码分析-4" class="headerlink" title="代码分析"></a>代码分析</h4><p>1.将要添加的消息使用具名参数来封装<br>2.具名参数就是预处理的进阶版使用形式-&gt;:参数名</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operDataBySqlparametersoruce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"JdbcTemplate_ioc.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">NamedParameterJdbcTemplate</span> namedParameterJdbcTemplate <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">NamedParameterJdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//public int update(String sql, SqlParameterSource paramSource, KeyHolder generatedKeyHolder)</span>    <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"INSERT INTO monster VALUES(:monsterId, :name, :kill)"</span><span class="token punctuation">;</span>    <span class="token class-name">Monster</span> monster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">,</span> <span class="token string">"狐狸精"</span><span class="token punctuation">,</span> <span class="token string">"色诱之术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlParameterSource</span> beanPropertySqlParameterSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertySqlParameterSource</span><span class="token punctuation">(</span>monster<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> update <span class="token operator">=</span> namedParameterJdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> beanPropertySqlParameterSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;JdbcTemplate &lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;1-需求-如果希望用spri</summary>
      
    
    
    
    <category term="主流框架" scheme="https://100qin10086.github.io/categories/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring" scheme="https://100qin10086.github.io/tags/Spring/"/>
    
    <category term="ssm" scheme="https://100qin10086.github.io/tags/ssm/"/>
    
    <category term="框架" scheme="https://100qin10086.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Java" scheme="https://100qin10086.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>赫夫曼树</title>
    <link href="https://100qin10086.github.io/posts/e42d964d.html"/>
    <id>https://100qin10086.github.io/posts/e42d964d.html</id>
    <published>2023-03-28T13:18:15.000Z</published>
    <updated>2023-06-26T08:47:41.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><div class="note purple no-icon flat"><p>赫夫曼树</p></div></h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>· 给定n个权值作为n个叶子节点，构造一棵二叉树,若该树的带权路径长度(wpl)达到最小,称这样的二叉树为最优二叉树<br>· 赫夫曼树是带权路径长度最短的树，权值较大的结点离根较低<br>· 结点的权及带权路径长度：结点的权就是该节点的数值。<br>· 结点的带权路径长度为：从根节点到该节点之间的路径长度与该节点的权的乘积<br>· 树的带权路径长度；规定为所有叶子节点的带权路径长度之和，记作wpl</p><h2 id="赫夫曼树的创建思路图解"><a href="#赫夫曼树的创建思路图解" class="headerlink" title="赫夫曼树的创建思路图解"></a>赫夫曼树的创建思路图解</h2><h3 id="构成赫夫曼树的步骤"><a href="#构成赫夫曼树的步骤" class="headerlink" title="构成赫夫曼树的步骤"></a>构成赫夫曼树的步骤</h3><p>· 从小到大进行排序，将每一个数据都是一个结点，每个节点可以看成是一颗最简单的二叉树<br>· 取出根节点权值最小的两颗二叉树<br>· 组成一个新的二叉树，该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和<br>· 在将这棵新的二叉树，以根节点的权值大小在排序，不断重复1-2-3-4的步骤，直到数列中所有的树都被处理，就得到一颗赫夫曼殊</p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><h4 id="将13、7、8、3、29、6、1-排序，并取出权值最小的两颗二叉树（前面说过每个节点可以看成是一颗最简单的二叉树）"><a href="#将13、7、8、3、29、6、1-排序，并取出权值最小的两颗二叉树（前面说过每个节点可以看成是一颗最简单的二叉树）" class="headerlink" title="将13、7、8、3、29、6、1 排序，并取出权值最小的两颗二叉树（前面说过每个节点可以看成是一颗最简单的二叉树）"></a>将13、7、8、3、29、6、1 排序，并取出权值最小的两颗二叉树（前面说过每个节点可以看成是一颗最简单的二叉树）</h4><p><a href="https://imgse.com/i/ppcPdmR"><img src="https://s1.ax1x.com/2023/03/28/ppcPdmR.png" alt="ppcPdmR.md.png"></a></p><h4 id="继续取出-4，6，7，8，13，29里面两个最小的值，构成新的树，并将节点的值进行排序"><a href="#继续取出-4，6，7，8，13，29里面两个最小的值，构成新的树，并将节点的值进行排序" class="headerlink" title="继续取出 4，6，7，8，13，29里面两个最小的值，构成新的树，并将节点的值进行排序"></a>继续取出 4，6，7，8，13，29里面两个最小的值，构成新的树，并将节点的值进行排序</h4><p><a href="https://imgse.com/i/ppcP6pD"><img src="https://s1.ax1x.com/2023/03/28/ppcP6pD.png" alt="ppcP6pD.md.png"></a></p><h4 id="继续重复前面的步骤"><a href="#继续重复前面的步骤" class="headerlink" title="继续重复前面的步骤"></a>继续重复前面的步骤</h4><p><a href="https://imgse.com/i/ppcPWnA"><img src="https://s1.ax1x.com/2023/03/28/ppcPWnA.md.png" alt="ppcPWnA.md.png"></a></p><p><a href="https://imgse.com/i/ppciQjH"><img src="https://s1.ax1x.com/2023/03/28/ppciQjH.png" alt="ppciQjH.md.png"></a></p><p><a href="https://imgse.com/i/ppciUC8"><img src="https://s1.ax1x.com/2023/03/28/ppciUC8.md.png" alt="ppciUC8.md.png"></a></p><p><a href="https://imgse.com/i/ppciDDs"><img src="https://s1.ax1x.com/2023/03/28/ppciDDs.png" alt="ppciDDs.md.png"></a></p><h1 id="-1"><a href="#-1" class="headerlink" title></a><div class="note purple no-icon flat"><p>赫夫曼树代码实现</p></div></h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 数据结构与算法二<span class="token punctuation">.</span>赫夫曼树<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2023/3/28 22:07 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> no1 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> huffmanTree <span class="token operator">=</span> <span class="token function">createHuffmanTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>huffmanTree<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"树是空树无法遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">createHuffmanTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//第一步为了操作方便</span>        <span class="token comment">//1.遍历arr数组</span>        <span class="token comment">//2.</span>        <span class="token comment">//3.将Node 放入到ArrayList中</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">boolean</span> add <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//取出根节点权值最小的两颗二叉树</span>            <span class="token comment">//（1）取出权值最小的结点（二叉树）</span>            <span class="token class-name">Node</span> left <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//（2）取出第二小的结点(二叉树)</span>            <span class="token class-name">Node</span> right <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//（3）构建一颗新的二叉树</span>            <span class="token class-name">Node</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>value <span class="token operator">+</span> right<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span>left<span class="token operator">=</span>left<span class="token punctuation">;</span>            parent<span class="token punctuation">.</span>right<span class="token operator">=</span>right<span class="token punctuation">;</span>            <span class="token comment">//（4）从ArrayList删除处理过的二叉树</span>            nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//（5）将parent加入到nodes</span>            nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//为了让Node对象支持排序Collection集合排序</span><span class="token comment">//让Node实现Comparable接口</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>    <span class="token comment">//写一个前序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Node</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//表示从小到大排序</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">-</span>o<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Node&#123;"</span> <span class="token operator">+</span>                <span class="token string">"value="</span> <span class="token operator">+</span> value <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;div class=&quot;note purple no-icon flat&quot;&gt;&lt;p&gt;赫夫曼树&lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; c</summary>
      
    
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
