<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秦家大胖&#39;s Blog</title>
  
  <subtitle>生活朗朗,万物可爱</subtitle>
  <link href="https://100qin10086.github.io/atom.xml" rel="self"/>
  
  <link href="https://100qin10086.github.io/"/>
  <updated>2023-03-26T01:37:11.218Z</updated>
  <id>https://100qin10086.github.io/</id>
  
  <author>
    <name>秦三顺</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二叉树复习</title>
    <link href="https://100qin10086.github.io/posts/8492d816.html"/>
    <id>https://100qin10086.github.io/posts/8492d816.html</id>
    <published>2023-03-25T14:04:19.000Z</published>
    <updated>2023-03-26T01:37:11.218Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树知识复习</p><h1 id=""><a href="#" class="headerlink" title=""></a><div class="note orange no-icon flat"><p>为什么需要树这种数据结构</p></div></h1><h3 id="1-1数字存储方式分析"><a href="#1-1数字存储方式分析" class="headerlink" title="1.1数字存储方式分析"></a>1.1数字存储方式分析</h3><p>优点:通过下标方式访问元素,速度快,对于有序数组,还可以使用二分查找提高检索速度。<br>缺点:检索或者插入值会整体移动,效率低。</p><h3 id="1-2链式存储方式分析"><a href="#1-2链式存储方式分析" class="headerlink" title="1.2链式存储方式分析"></a>1.2链式存储方式分析</h3><p>优点:在一定程度上对数组存储方式有优化。<br>缺点:进行检索是效率任然很低。</p><h3 id="1-3数存储方式的分析"><a href="#1-3数存储方式的分析" class="headerlink" title="1.3数存储方式的分析"></a>1.3数存储方式的分析</h3><p>能提高数据存储,读取效率,比如利用二叉排序树</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 秦家大胖 * @Date 2023/3/25 21:19 * @Version 1.0 * 我亦无他，惟手熟尔 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> no1 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建树</span><span class="token keyword">class</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//前序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二叉树为空，无法便利"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//中序遍历和后序遍历与前序遍历一样</span>    <span class="token comment">//前序查找</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">preOrderSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">preOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//中序查找和后续查找与前序查找思路一样</span><span class="token punctuation">&#125;</span><span class="token comment">//先创建结点</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeft</span><span class="token punctuation">(</span><span class="token class-name">Node</span> left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRight</span><span class="token punctuation">(</span><span class="token class-name">Node</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Node&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//前序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//向左遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//向右遍历，注意此时的this和向左边遍历的this是同一个值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//向左遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//向右遍历，注意此时的this和向左边遍历的this是同一个值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//后序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">PostOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//向左遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//向右遍历，注意此时的this和向左边遍历的this是同一个值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//前序遍历查找</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">preOrderSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//先判断当前节点是不是</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">==</span>no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//则判断当前节点的左子节点是否为空,如果不为空，则递归前序查找</span>        <span class="token class-name">Node</span> resNode<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            resNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断在左子树找到了吗</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> resNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//则判断当前节点的右子节点是否为空,如果不为空，则递归前序查找</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            resNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> resNode<span class="token punctuation">;</span><span class="token comment">//注意，此时的resNode可能为空，要在树哪里进行判断</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//中序遍历查找，和后续遍历查找和前序遍历查找的思路一样，它们都是按照前面遍历的思路查找</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">infixOrderSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> resNode<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            resNode<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">infixOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> resNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">==</span>no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            resNode<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">infixOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> resNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//后续遍历查找</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">postOrderSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> resNode<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            resNode<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">postOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> resNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            resNode<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">postOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> resNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">==</span>no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> resNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;二叉树知识复习&lt;/p&gt;
&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;div class=&quot;note orange no-icon flat&quot;&gt;&lt;p&gt;为什么需要树这种数据结构&lt;/p&gt;
&lt;/div&gt;&lt;/h1&gt;&lt;h</summary>
      
    
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://100qin10086.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://100qin10086.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Markdown_study</title>
    <link href="https://100qin10086.github.io/posts/b4566c99.html"/>
    <id>https://100qin10086.github.io/posts/b4566c99.html</id>
    <published>2023-03-24T17:32:40.000Z</published>
    <updated>2023-03-26T01:37:11.218Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown学习笔记</p><h1 id="1-标题-一般用-区分"><a href="#1-标题-一般用-区分" class="headerlink" title="1.标题,一般用#区分"></a>1.标题,一般用#区分</h1><h1 id="2-段落-段落的前后最好不要有空白字符"><a href="#2-段落-段落的前后最好不要有空白字符" class="headerlink" title="2.段落,段落的前后最好不要有空白字符"></a>2.段落,段落的前后最好不要有空白字符</h1><h1 id="3-粗体斜体删除线"><a href="#3-粗体斜体删除线" class="headerlink" title="3.粗体斜体删除线"></a>3.粗体斜体删除线</h1><h3 id="3-1-粗体-在需要加粗的文本前后添加两个星号-或下划线-可以对文本加粗"><a href="#3-1-粗体-在需要加粗的文本前后添加两个星号-或下划线-可以对文本加粗" class="headerlink" title="3.1 粗体,在需要加粗的文本前后添加两个星号(*)或下划线(_)可以对文本加粗"></a>3.1 粗体,在需要加粗的文本前后添加两个星号(*)或下划线(_)可以对文本加粗</h3><h3 id="3-2-斜体-在需要加粗的文本前后添加一个星号-或下划线-可以对文本加粗"><a href="#3-2-斜体-在需要加粗的文本前后添加一个星号-或下划线-可以对文本加粗" class="headerlink" title="3.2 斜体,在需要加粗的文本前后添加一个星号(*)或下划线(_)可以对文本加粗"></a>3.2 斜体,在需要加粗的文本前后添加一个星号(*)或下划线(_)可以对文本加粗</h3><h3 id="3-3-删除线-在需要带删除线的文本前后添加两个波浪号"><a href="#3-3-删除线-在需要带删除线的文本前后添加两个波浪号" class="headerlink" title="3.3 删除线,在需要带删除线的文本前后添加两个波浪号(~)"></a>3.3 删除线,在需要带删除线的文本前后添加两个波浪号(~)</h3><h1 id="4-列表-数字开头的是有序列表-，-，-开头的是无序列表"><a href="#4-列表-数字开头的是有序列表-，-，-开头的是无序列表" class="headerlink" title="4.列表,数字开头的是有序列表,-，*，+开头的是无序列表"></a>4.列表,数字开头的是有序列表,-，*，+开头的是无序列表</h1><h3 id="4-1-列表的嵌套"><a href="#4-1-列表的嵌套" class="headerlink" title="4.1 列表的嵌套"></a>4.1 列表的嵌套</h3><h4 id="4-1-1-有序嵌套有序"><a href="#4-1-1-有序嵌套有序" class="headerlink" title="4.1.1 有序嵌套有序"></a>4.1.1 有序嵌套有序</h4><h4 id="4-1-2-有序嵌套无序"><a href="#4-1-2-有序嵌套无序" class="headerlink" title="4.1.2 有序嵌套无序"></a>4.1.2 有序嵌套无序</h4><h4 id="4-1-3-无需嵌套无序"><a href="#4-1-3-无需嵌套无序" class="headerlink" title="4.1.3 无需嵌套无序"></a>4.1.3 无需嵌套无序</h4><h3 id="4-2-任务列表"><a href="#4-2-任务列表" class="headerlink" title="4.2 任务列表"></a>4.2 任务列表</h3><h4 id="4-2-1-有序任务列表-x-已选中的项目"><a href="#4-2-1-有序任务列表-x-已选中的项目" class="headerlink" title="4.2.1 有序任务列表 [x] 已选中的项目"></a>4.2.1 有序任务列表 [x] 已选中的项目</h4><h4 id="4-2-2-无序任务列表-未选中的项目"><a href="#4-2-2-无序任务列表-未选中的项目" class="headerlink" title="4.2.2 无序任务列表 -[ ] 未选中的项目"></a>4.2.2 无序任务列表 -[ ] 未选中的项目</h4><h1 id="5-引用"><a href="#5-引用" class="headerlink" title="5.引用"></a>5.引用</h1><h1 id="6-代码块"><a href="#6-代码块" class="headerlink" title="6.代码块"></a>6.代码块</h1><h3 id="6-1行内代码，使用一对反引号来创建行内代码块，如果我们需要在代码块种使用代码块-最里面的两个就是可以使用的反引号"><a href="#6-1行内代码，使用一对反引号来创建行内代码块，如果我们需要在代码块种使用代码块-最里面的两个就是可以使用的反引号" class="headerlink" title="6.1行内代码，使用一对反引号来创建行内代码块，如果我们需要在代码块种使用代码块(``````),最里面的两个就是可以使用的反引号"></a>6.1行内代码，使用一对反引号来创建行内代码块，如果我们需要在代码块种使用代码块(``````),最里面的两个就是可以使用的反引号</h3><h3 id="6-2代码块-将文本的每一行缩进至少四个空格或一个制表符。这样这些文本就会变成代码块"><a href="#6-2代码块-将文本的每一行缩进至少四个空格或一个制表符。这样这些文本就会变成代码块" class="headerlink" title="6.2代码块,将文本的每一行缩进至少四个空格或一个制表符。这样这些文本就会变成代码块"></a>6.2代码块,将文本的每一行缩进至少四个空格或一个制表符。这样这些文本就会变成代码块</h3><h3 id="6-3围栏式代码块，也是我们经常使用的代码块，用三个单引号将代码块围起来"><a href="#6-3围栏式代码块，也是我们经常使用的代码块，用三个单引号将代码块围起来" class="headerlink" title="6.3围栏式代码块，也是我们经常使用的代码块，用三个单引号将代码块围起来"></a>6.3围栏式代码块，也是我们经常使用的代码块，用三个单引号将代码块围起来</h3><h4 id="以下为一个围栏式代码块的演示"><a href="#以下为一个围栏式代码块的演示" class="headerlink" title="以下为一个围栏式代码块的演示"></a>以下为一个围栏式代码块的演示</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 数据结构与算法<span class="token punctuation">.</span>冒泡排序<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author 秦家大胖 * @Date 2022/9/20 20:25 * @Version 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token comment">//临时变量</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果前面的数比后面的数大，则交换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                temp<span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果前面的数比后面的数大，则交换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                temp<span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果前面的数比后面的数大，则交换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                temp<span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果前面的数比后面的数大，则交换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                temp<span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-分割线-一行只存在连续三个以上星号-减号-或下划线-会被生成分割线，"><a href="#7-分割线-一行只存在连续三个以上星号-减号-或下划线-会被生成分割线，" class="headerlink" title="7.分割线 ,一行只存在连续三个以上星号(*),减号(-)或下划线(_)会被生成分割线，"></a>7.分割线 ,一行只存在连续三个以上星号(*),减号(-)或下划线(_)会被生成分割线，</h1><h3 id="以下为示例"><a href="#以下为示例" class="headerlink" title="以下为示例"></a>以下为示例</h3><hr><hr><hr><h1 id="8-超链接，在Markdown里可以创建超链接，以连接到其他Markdown页面或者网站"><a href="#8-超链接，在Markdown里可以创建超链接，以连接到其他Markdown页面或者网站" class="headerlink" title="8.超链接，在Markdown里可以创建超链接，以连接到其他Markdown页面或者网站"></a>8.超链接，在Markdown里可以创建超链接，以连接到其他Markdown页面或者网站</h1><h3 id="8-1链接到网站，语法-字-网站"><a href="#8-1链接到网站，语法-字-网站" class="headerlink" title="8.1链接到网站，语法[字]+(网站)"></a>8.1链接到网站，语法[字]+(网站)</h3><h3 id="8-2链接到其他Markdown页面，语法-字-标题"><a href="#8-2链接到其他Markdown页面，语法-字-标题" class="headerlink" title="8.2链接到其他Markdown页面，语法[字]+(./标题)"></a>8.2链接到其他Markdown页面，语法[字]+(./标题)</h3><h3 id="8-3无标签连接在一对尖括号里直接写上网址"><a href="#8-3无标签连接在一对尖括号里直接写上网址" class="headerlink" title="8.3无标签连接在一对尖括号里直接写上网址"></a>8.3无标签连接在一对尖括号里直接写上网址</h3><h3 id="8-4查链接一般与其他元素配合使用，如粗体连接，斜体链接，粗斜体连接，代码块链接等"><a href="#8-4查链接一般与其他元素配合使用，如粗体连接，斜体链接，粗斜体连接，代码块链接等" class="headerlink" title="8.4查链接一般与其他元素配合使用，如粗体连接，斜体链接，粗斜体连接，代码块链接等"></a>8.4查链接一般与其他元素配合使用，如粗体连接，斜体链接，粗斜体连接，代码块链接等</h3><h1 id="9-图片-Markdown里可以添加图片"><a href="#9-图片-Markdown里可以添加图片" class="headerlink" title="9.图片 Markdown里可以添加图片"></a>9.图片 Markdown里可以添加图片</h1><h3 id="9-1添加图片，语法-地址-，会在笔记中直接添加一张图片，例"><a href="#9-1添加图片，语法-地址-，会在笔记中直接添加一张图片，例" class="headerlink" title="9.1添加图片，语法![]+(地址)，会在笔记中直接添加一张图片，例"></a>9.1添加图片，语法![]+(地址)，会在笔记中直接添加一张图片，例</h3><h1 id="10-Emoji表情"><a href="#10-Emoji表情" class="headerlink" title="10.Emoji表情"></a>10.Emoji表情</h1><h3 id="10-1一般用表情短码输入表情，语法：在两个冒号直接输入表情短码"><a href="#10-1一般用表情短码输入表情，语法：在两个冒号直接输入表情短码" class="headerlink" title="10.1一般用表情短码输入表情，语法：在两个冒号直接输入表情短码"></a>10.1一般用表情短码输入表情，语法：在两个冒号直接输入表情短码</h3><h4 id="例-win-。"><a href="#例-win-。" class="headerlink" title="例 win+。"></a>例 win+。</h4><p>😊😁👍🙌🤦‍♀️🤦‍♂️🤷‍♀️🤷‍♂️😜💖😢🎶😎😉🤞✌👏💋💋🌹🎉🎂🤳🐱‍👤🐱‍🏍✨😃👀✔🐱‍🚀🐱‍👓🐱‍🐉🐱‍💻😆🤔🤢🎁</p><h1 id="11-使用表格-可以在表格中放代码，表情，各种字体"><a href="#11-使用表格-可以在表格中放代码，表情，各种字体" class="headerlink" title="11.使用表格,可以在表格中放代码，表情，各种字体"></a>11.使用表格,可以在表格中放代码，表情，各种字体</h1><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><div class="table-container"><table><thead><tr><th>第一列</th><th>第二列</th><th>第三列</th></tr></thead><tbody><tr><td>第一列</td><td>第二列</td><td>第三列</td></tr><tr><td>第一列</td><td>第二列</td><td>第三列</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Markdown学习笔记&lt;/p&gt;
&lt;h1 id=&quot;1-标题-一般用-区分&quot;&gt;&lt;a href=&quot;#1-标题-一般用-区分&quot; class=&quot;headerlink&quot; title=&quot;1.标题,一般用#区分&quot;&gt;&lt;/a&gt;1.标题,一般用#区分&lt;/h1&gt;&lt;h1 id=&quot;2-段落-段落的前</summary>
      
    
    
    
    <category term="Markdown学习笔记" scheme="https://100qin10086.github.io/categories/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Markdown" scheme="https://100qin10086.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>测试文章</title>
    <link href="https://100qin10086.github.io/posts/7a6a6b5a.html"/>
    <id>https://100qin10086.github.io/posts/7a6a6b5a.html</id>
    <published>2023-03-24T14:06:08.000Z</published>
    <updated>2023-03-26T01:37:11.218Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个测试文章<br><a href="https://yangzhi-1.github.io/posts/615e2dec.html">https://yangzhi-1.github.io/posts/615e2dec.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个测试文章&lt;br&gt;&lt;a href=&quot;https://yangzhi-1.github.io/posts/615e2dec.html&quot;&gt;https://yangzhi-1.github.io/posts/615e2dec.html&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="测试" scheme="https://100qin10086.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试文章" scheme="https://100qin10086.github.io/tags/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
</feed>
